<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>job-interview-summary</title>
      <link href="/job-interview-summary.html"/>
      <url>/job-interview-summary.html</url>
      <content type="html"><![CDATA[<h1 id="大佬总结">1. 大佬总结</h1><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzIwMzY1OTU1NQ==&amp;mid=2247484751&amp;idx=1&amp;sn=8616aece193d174c12757d22e3e04924&amp;chksm=96cd4503a1bacc154aceaaa89cdb8eeb4c2a83a459df0edb2c5380579aa46a946a94bfa1dac1&amp;mpshare=1&amp;scene=23&amp;srcid=1031r9yw90bnnqcakGdQ3zjC#rd" target="_blank" rel="noopener">来之不易的美团面试，结果居然挂了…（附面试答案）</a>  </li></ol><blockquote><p>非常口语化的描述了面试问题和答案，非常赞，包含了java基础知识、数据结构、多线程、内存机制、垃圾回收等常见面试点。  </p></blockquote><ol start="2"><li><p><a href="https://blog.csdn.net/huangshulang1234/article/details/79523258" target="_blank" rel="noopener">算法经典面试题整理（java实现）</a>  </p></li><li><p><a href="https://www.cnblogs.com/skywang12345/category/508186.html" target="_blank" rel="noopener">数据结构-算法博客</a>  </p></li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2018工作项目总结-liang多多商城后台</title>
      <link href="/2018-work-program-summary-2.html"/>
      <url>/2018-work-program-summary-2.html</url>
      <content type="html"><![CDATA[<h1 id="简介">1. 简介</h1><p>liang多多商城后台微服务项目介绍。  </p><h2 id="架构摘要">1.1. 架构摘要</h2><h3 id="SpringCloud">1.1.1. SpringCloud</h3><ul><li><code>Spirng Cloud</code> 版本<code>Edgware.SR3</code>，<code>Spring Boot</code>版本<code>1.5.13</code>。  <blockquote><p><code>Spring Cloud</code> 是一个基于<code>Spring Boot</code>实现的云应用开发工具，它为基于JVM的云应用开发中的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。  </p></blockquote></li></ul><h3 id="认证与鉴权">1.1.2. 认证与鉴权</h3><blockquote><p>基于 <code>OAuht2</code> 方案实现对于请求或登陆的用户身份的认证和合法性鉴权。  </p></blockquote><h3 id="负载均衡">1.1.3. 负载均衡</h3><h4 id="介绍">1.1.3.1. 介绍</h4><p>参考博客：<a href="https://www.cnblogs.com/jurendage/p/9211832.html" target="_blank" rel="noopener">Java开源生鲜电商平台-Java分布式以及负载均衡架构与设计详解</a>  </p><p><strong>负载均衡</strong>（Load Balance），意思是将负载（工作任务，访问请求）进行平衡，分摊到多个操作单元（服务器，组件）上进行执行。是解决高性能、单点故障（高可用）、扩展性（水平伸缩）的终极解决方案。  </p><blockquote><p>将服务保留的rest进行代理和网关控制，除了平常经常使用的<code>node.js</code>、<code>nginx</code>外，<code>Spring Cloud</code>系列的<code>zuul</code>和<code>ribbon</code>，可以帮我们进行正常的网关管控和负载均衡。  </p></blockquote><h3 id="服务注册与调用">1.1.4. 服务注册与调用</h3><blockquote><p>基于<code>Eureka</code>来实现的服务注册与调用，在<code>Spring Cloud</code>中使用<code>Feign</code>, 我们可以做到使用HTTP请求远程服务时能与调用本地方法一样的编码体验，开发者完全感知不到这是远程方法，更感知不到这是个HTTP请求。  </p></blockquote><h3 id="熔断机制">1.1.5. 熔断机制</h3><blockquote><p>因为采取了服务的分布，为了避免服务之间的调用“雪崩”，采用了<code>Hystrix</code>的作为熔断器，避免了服务之间的“雪崩”。  </p></blockquote><h2 id="项目模块说明">1.2. 项目模块说明</h2><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">gateway</td><td style="text-align:left">网关路由</td></tr><tr><td style="text-align:left">eureka-server</td><td style="text-align:left">服务注册发现中心</td></tr><tr><td style="text-align:left">config-server</td><td style="text-align:left">配置服务中心</td></tr><tr><td style="text-align:left">auth-service</td><td style="text-align:left">登录认证授权</td></tr><tr><td style="text-align:left">user-service</td><td style="text-align:left">用户微服务</td></tr><tr><td style="text-align:left">supplier-service</td><td style="text-align:left">直供商城微服务</td></tr><tr><td style="text-align:left">life-service</td><td style="text-align:left">本地生活微服务</td></tr><tr><td style="text-align:left">pay-service</td><td style="text-align:left">充值(聚合支付)微服务</td></tr><tr><td style="text-align:left">red-service</td><td style="text-align:left">红包微服务</td></tr><tr><td style="text-align:left">msg-service</td><td style="text-align:left">消息推送短信微服务</td></tr><tr><td style="text-align:left">game-service</td><td style="text-align:left">游戏微服务</td></tr><tr><td style="text-align:left">live-service</td><td style="text-align:left">直播微服务</td></tr><tr><td style="text-align:left">admin-service</td><td style="text-align:left">后台管理服务</td></tr></tbody></table><h2 id="重点技术">1.3. 重点技术</h2><h3 id="auth-service-登录认证授权">1.3.1. auth-service 登录认证授权</h3><h4 id="介绍-1">1.3.1.1. 介绍</h4><blockquote><p>随着 Restful API、微服务的兴起，基于Token的认证现在已经越来越普遍。<br>Token和Session ID 不同，并非只是一个 key。Token 一般会包含用户的相关信息，通过验证 Token 就可以完成身份校验。用户输入登录信息，发送到身份认证服务进行认证。AuthorizationServer验证登录信息是否正确，返回用户基础信息、权限范围、有效时间等信息，客户端存储接口。用户将 Token 放在 HTTP 请求头中，发起相关 API 调用。被调用的微服务，验证Token。ResourceServer返回相关资源和数据。  </p></blockquote><h4 id="模块主要功能">1.3.1.2. 模块主要功能</h4><blockquote><ul><li>用户登录认证授权  </li><li>微服务资源权限  </li><li>第三方登录认证封装  </li></ul></blockquote><h4 id="Oauth2-0-登录模式">1.3.1.3. Oauth2.0 登录模式</h4><ol><li><code>authorization_code</code> — 授权码模式(即先登录获取code,再获取token)  </li><li><code>password</code> — 密码模式(将用户名,密码传过去,直接获取token)  </li><li><code>client_credentials</code> — 客户端模式(无用户,用户向客户端注册,然后客户端以自己的名义向’服务端’获取资源)  </li><li><code>implicit</code> — 简化模式(在redirect_uri 的Hash传递token; Auth客户端运行在浏览器中,如JS,Flash)  </li><li><code>refresh_token</code> — 刷新access_token  </li></ol><h4 id="测试流程">1.3.1.4. 测试流程</h4><ol><li>登陆请求  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:8084/oauth/token?username=账号&amp;password=密码&amp;grant_type=password</span></span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th style="text-align:center">参数名称</th><th style="text-align:center">说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">username</td><td style="text-align:center">用户账号</td><td style="text-align:center">18600000000</td></tr><tr><td style="text-align:center">password</td><td style="text-align:center">用户密码</td><td style="text-align:center">123456</td></tr><tr><td style="text-align:center">grant_type</td><td style="text-align:center">登录模式</td><td style="text-align:center">password</td></tr></tbody></table><table><thead><tr><th style="text-align:center">Header</th><th style="text-align:center">Value</th></tr></thead><tbody><tr><td style="text-align:center">Authorization</td><td style="text-align:center">Basic 加密后的secret</td></tr></tbody></table><ul><li>返回结果  </li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"access_token"</span>: <span class="string">"afa127f9-aed6-4430-9f53-bb3cfe1e4abd"</span>,</span><br><span class="line">    <span class="attr">"token_type"</span>: <span class="string">"bearer"</span>,</span><br><span class="line">    <span class="attr">"refresh_token"</span>: <span class="string">"3a7af11a-bdad-48d6-8b52-3ca5ed6cc955"</span>,</span><br><span class="line">    <span class="attr">"expires_in"</span>: <span class="number">7199</span>,</span><br><span class="line">    <span class="attr">"scope"</span>: <span class="string">"api"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>access_token</code> 就是用户认证的令牌   </p></blockquote><p>携带令牌请求其他接口时写在Header中格式</p><table><thead><tr><th style="text-align:left">Header</th><th style="text-align:left">Value</th></tr></thead><tbody><tr><td style="text-align:left">Authorization</td><td style="text-align:left">Bearer afa127f9-aed6-4430-9f53-bb3cfe1e4abd</td></tr></tbody></table><h4 id="第三方登录认证封装">1.3.1.5. 第三方登录认证封装</h4><blockquote><p>第三方登陆不管是那种方式，原理基本上都是基于OAuth的<br>主要两点：向第三方登陆的认证服务器获取token，向资源服务器获取第三方的用户信息。  </p></blockquote><ol><li>需求描述  </li></ol><blockquote><p>用户可使用<strong>支付宝</strong>或<strong>微信</strong>来登录 App  </p></blockquote><ol start="2"><li>详细说明  </li></ol><blockquote><p>生成第三方登录认证请求的令牌返回给前端 前端唤起第三方应用  </p></blockquote><blockquote><p>第三方应用授权后和账号进行关联绑定  </p></blockquote><h3 id="user-service-用户微服务">1.3.2. user-service 用户微服务</h3><h4 id="功能介绍">1.3.2.1. 功能介绍</h4><ol><li>用户登录注册</li><li>第三方登录注册</li><li>用户资料修改</li><li>收货地址增删改查</li><li>银行卡增删改查</li><li>实名认证</li><li>用户粉丝查询</li><li>商户提现申请</li></ol><h4 id="注册功能">1.3.2.2. 注册功能</h4><ol><li>需求描述  </li></ol><blockquote><p>注册功能主要可以实现, 用户手机号,验证码的形式进行注册. 用户手机号码必须唯一. 必须实现第三方登录(微信/支付宝)  </p></blockquote><ol start="2"><li>详细说明   </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 1个手机号码只能注册一个账号.</span><br><span class="line">2. 手机号存在或者账号被冻结需要提示.</span><br><span class="line">3. 提供推荐者手机号(选填)</span><br><span class="line">4. 验证码为6位数字随机</span><br><span class="line">5. 用户注册成功之后将默认密码为手机后六位, 并提示用户及时修改</span><br><span class="line">6. 支持支付宝/微信账号授权登陆, 第三方授权绑定用户手机号, 不允许多次绑定手机号</span><br></pre></td></tr></table></figure><ol start="3"><li>流程描述  </li></ol><blockquote><p><a href="https://docs.open.alipay.com/218/105326/" target="_blank" rel="noopener">支付宝第三方登录</a> 官方文档中已经详细描述了第三方授权登陆的流程以及细节。  </p></blockquote><blockquote><p> 这里再次强调流程中的条件。</p></blockquote><blockquote><ol><li>用户发起第三方登陆, 获取授权码,userid. 如果数据库中已经存在匹配的userid 则说明,用户已经绑定过了. 拉取用户相关信息即可完成登陆</li><li><p>如果userid不存在则需要注册新用户, 通过授权码发起oauth.token返回用户access_token. 通过access_token 获取用户用户信息 (ifo.share). <a href="https://docs.open.alipay.com/api_2/alipay.user.info.share" target="_blank" rel="noopener">获取用户信息</a></p><p><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419317851&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">微信第三方登录</a>和支付都采用了标准的oauth2. 大体类似. 获取第三方注册信息之后 需要补充我们自己的业务. 我们拿到access_token 获取用户信息, 需要注册新用户, 跳转到用户注册页面进行信息的关联. 用户填写内容之后. 注册成功新用户, 并且关联第三方唯一信息.</p></li></ol></blockquote><h3 id="pay-service-充值-聚合支付-微服务">1.3.3. pay-service 充值(聚合支付)微服务</h3><h4 id="功能介绍-1">1.3.3.1. 功能介绍</h4><ol><li>充值订单的生成  </li><li>第3方支付通知接口业务  </li><li>聚合扫码支付  </li></ol><h4 id="充值订单的生成">1.3.3.2. 充值订单的生成</h4><ul><li><p>需求描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对前端发起的充值业务区分 和 支付方式生成充值订单 和 第三方支付订单</span><br></pre></td></tr></table></figure></li><li><p>详细说明</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 生成支付宝或微信充值订单信息 返回给前端用于唤起支付宝或微信支付功能</span><br><span class="line">2. 对充值的进行检测是否异常 是否可完成支付该充值业务的支付</span><br></pre></td></tr></table></figure><ul><li>流程描述</li></ul><blockquote><p>参考支付宝官方文档：<a href="https://docs.open.alipay.com/204/105051/" target="_blank" rel="noopener">官方文档</a>  </p></blockquote><ol><li><p>创建应用并获取APPID  </p></li><li><p>配置应用  </p><blockquote><p>添加App支付功能，在开放平台里进行签约。  </p></blockquote></li><li><p>时序图<br><img src="https://gw.alipayobjects.com/zos/skylark-tools/public/files/2885bb7c5ebbc7ec07a46141fc3c0480.png" alt="">  </p></li><li><p>接口流程示意图<br><img src="https://gw.alipayobjects.com/os/skylark-tools/public/files/81fdbf664f654970835e5426b55959f6" alt=""></p></li></ol><blockquote><p>参考微信官方文档：<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1" target="_blank" rel="noopener">官方文档</a> </p></blockquote><ol><li><p>时序图<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-9-22/16266607.jpg" alt="">  </p></li><li><p>用户在商户APP中选择商品，提交订单，选择微信支付。  </p></li><li><p>商户后台收到用户支付单，调用微信支付统一下单接口。  </p></li><li><p>统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appid，partnerid，prepayid，noncestr，timestamp，package。注意：package的值格式为Sign=WXPay  </p></li><li><p>商户APP调起微信支付。  </p></li><li><p>商户后台接收支付通知。  </p></li><li><p>商户后台查询支付结果。</p></li></ol><h4 id="第3方支付通知接口业务">1.3.3.3. 第3方支付通知接口业务</h4><ul><li><p>需求描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户支付成功后(失败,取消) 后端会收到 支付宝或微信支付的通知</span><br><span class="line">后端对该支付订单进行校检 修改用户资金</span><br></pre></td></tr></table></figure></li><li><p>详细说明</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 收到第3方通知回调后 对订单进行校检</span><br><span class="line">2. 当通知为 用户支付完成 必须和本地支付订单进行对比 校检最终给用户增加 资金 和 账单</span><br></pre></td></tr></table></figure><h4 id="聚合扫码支付">1.3.3.4. 聚合扫码支付</h4><ul><li><p>需求描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户能在 支付宝 微信 App 中扫描商家二维码 来进行对商家付款</span><br></pre></td></tr></table></figure></li><li><p>详细说明</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 订单生成逻辑和上面支付逻辑大致相同</span><br><span class="line">2. 唯一不同的是在支付宝和微信支付中必须先生成 认证请求</span><br><span class="line">3. 支付完成后进行其他业务处理 如: 分润 生成红包 等业务</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018工作项目总结-个人项目仿微信聊天项目</title>
      <link href="/2018-work-program-summary-4.html"/>
      <url>/2018-work-program-summary-4.html</url>
      <content type="html"><![CDATA[<h2 id="简介">0.1. 简介</h2><p>基于后端netty、前端websocket实现的前后端分离项目，模仿微信，实现微信单聊、群聊功能功能，本意是自己学习netty的项目。  </p><h2 id="后端架构">0.2. 后端架构</h2><p>基于SpirngBoot、shiro的后端开发基础框架。</p><h2 id="前端架构">0.3. 前端架构</h2><ul><li><p>项目地址：<a href="https://gitee.com/ddebug/my_wechat_ui.git" target="_blank" rel="noopener">my_wechat_ui</a>  </p></li><li><p>基于跨平台APP开发方案<a href="http://www.wetouch.net/" target="_blank" rel="noopener">wetouch</a>，开发完成后，直接打包  </p><blockquote><p>wetouch对免费用户只有100M免费流量，请注意！  </p></blockquote></li></ul><h2 id="启动流程">0.4. 启动流程</h2><h3 id="后端">0.4.1. 后端</h3><ol><li><p>克隆项目到本地  </p><blockquote><p>git clone <a href="https://gitee.com/ddebug/my_wechat_admin.git" target="_blank" rel="noopener">https://gitee.com/ddebug/my_wechat_admin.git</a>  </p></blockquote></li><li><p>启动后台管理中心  </p><blockquote><p>运行模块 <code>admin-service</code> 的主程序文件 <code>AdminApplication</code>  </p></blockquote></li></ol><h3 id="前端">0.4.2. 前端</h3><ol><li><p>克隆项目到本地  </p><blockquote><p>git clone <a href="mailto:git@192.168.50.186" target="_blank" rel="noopener">git@192.168.50.186</a>:java/ldd-admin-ui.git  </p></blockquote></li><li><p>启动前端  </p></li></ol><ul><li><p>安装依赖 </p><blockquote><p>npm install  </p></blockquote></li><li><p>开发环境运行  </p><blockquote><p>npm run dev</p></blockquote></li><li><p>进入项目  </p><blockquote><p>浏览器访问：<a href="http://0.0.0.0:8181" target="_blank" rel="noopener">http://0.0.0.0:8181</a>  </p></blockquote></li></ul><h2 id="过程">0.5. 过程</h2><ol><li>服务端发送消息到客户端，客户端向服务端发送签收响应；  </li><li>主要处理<strong>网络的不稳定性</strong>、<strong>网络的无响应</strong>、<strong>安全认证</strong>、<strong>客户端心跳重连机制</strong>、<strong>消息编解码</strong>等问题；  </li><li>客户端和服务器建立长连接，服务端会保存着这个长连接，然后对长连接进行轮询看看是否有新的消息；</li><li>当客户端socket在非正常情况掉线，比如断网、断电，服务端没有收到连接关闭命令，连接对象不会自从关闭，继续保持着连接活跃。  </li></ol><h2 id="常见技术">0.6. 常见技术</h2><h3 id="netty">0.6.1. netty</h3><h4 id="推送消息状况">0.6.1.1. 推送消息状况</h4><ol><li><p>信息阅读的方式比较多，例如：pc、手机、ipad、穿戴设备等等。  </p></li><li><p>现在使用网络质量并不是稳定的，网络主要是运营商的无线移动网，例如在地铁上、山区、沙漠信号就很差，容易发生网络闪断；</p></li><li><p>海量的终端链接，而且通常使用长连接，服务器维持大量长连接，资源消耗都非常大；  </p></li><li><p>谷歌开发的推送框架无法再国内使用，android的应用必须自己由于谷歌的推送框架无法在国内使用，Android的长连接是由每个应用各自维护的，这就意味着每台安卓设备上会存在多个长连接。即便没有消息需要推送，长连接本身的心跳消息量也是非常巨大的，这就会导致流量和耗电量的增加；</p></li></ol><p>不稳定：消息丢失、重复推送、延迟送达、过期推送时有发生；垃圾消息到处是。  </p><h4 id="netty优点">0.6.1.2. netty优点</h4><p><code>Netty</code>提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。  </p><ol><li>统一的API，适用于不同的协议（阻塞和非阻塞）,比如http/tcp/udp。  </li><li>基于灵活、可扩展的事件驱动模型,采用了链式的事件模型。  </li><li>高度可定制的线程模型。  </li><li>可靠的无连接数据Socket支持（UDP）。  </li><li>更好的吞吐量，低延迟。  </li></ol><p>#### </p><h3 id="TCP协议模型">0.6.2. TCP协议模型</h3><p>参考博客：<a href="http://www.cookqq.com/blog/8a10a5f35382ba2e0153e9e2ffe0304d" target="_blank" rel="noopener">TCP/IP 协议和 OSI 模型</a>  </p><p>TCP/IP协议由应用层、传输层（tcp）、网络层（IP）和数据链路层（物理层）四层组成。 </p><h2 id="问题">0.7. 问题</h2><ol><li><p>Netty中boss线程池大小为1，worker线程池大小为8, new NioEventLoopGroup(8)，其余线程分配给业务使用。  </p></li><li><p>由于超时时间过长，100W个长链接链路会创建100w长连接对象（比如channel/IdlChannelHandlerAdapter/ScheduledFutureTask …），每个对象还保存有业务的成员变量，非常消耗内存。一些定时任务被老化到持久代中，没有被JVM垃圾回收掉，内存一直在增长，用户误认为存在内存泄露。 所以说一些长时间没有通信的链接需要关闭掉。 定时心跳显得很重要，如果300s没有收到任何信息，则把链接关闭掉。  </p></li><li><p>不要在Netty的I/O线程上处理业务（心跳发送和检测除外）。为什么呢？？  </p><blockquote><p>因为Java进程，线程不能无限增长。这就意味着Netty的Reactor线程数必须收敛。但是在实际业务处理中，经常会有一些额外的复杂逻辑处理，例如性能统计、记录接口日志等，这些业务操作性能开销也比较大，如果在I/O线程上直接做业务逻辑处理，可能会阻塞I/O线程，影响对其它链路的读写操作，或者导致一些链路的关闭或者打开比较慢。</p></blockquote></li><li><p>写日志的时候小心</p></li></ol><p>在生产环境中，需要实时打印接口日志，其它日志处于ERROR级别，当推送服务发生I/O异常之后，会记录异常日志。如果当前磁盘的WIO比较高，可能会发生写日志文件操作被同步阻塞，阻塞时间无法预测。这就会导致Netty的NioEventLoop线程被阻塞，Socket链路无法被及时关闭、其它的链路也无法进行读写操作等。  </p><p>5、-Xmx:JVM最大内存需要根据内存模型进行计算并得出相对合理的值；  </p><h2 id="服务器消息重发">0.8. 服务器消息重发</h2><p>参考：<a href="http://www.cookqq.com/blog/8a10a5f35382ba2e0153c2f707e11e9e" target="_blank" rel="noopener">基于netty的企业即时通讯系统的设计与实现-服务器消息重发</a>  </p><h2 id="服务器端跨域">0.9. 服务器端跨域</h2><p>参考：<a href="https://blog.csdn.net/james_wade63/article/details/50772041" target="_blank" rel="noopener">服务器端解决跨域问题的三种方法</a></p><h2 id="表结构设计">0.10. 表结构设计</h2><h3 id="群消息设计">0.10.1. 群消息设计</h3><ol><li><p>群消息，只存一份。  </p><blockquote><p>如果为每一个成员设置一个群消息队列，会有大量数据冗余，不合适。  </p></blockquote></li><li><p>确定未读消息  </p><blockquote><p>利用群消息的偏序关系，记录每个成员已读的最后一条消息，那么该消息之前的消息都是已读，之后的消息<br>都是未读。<br>即对于群内的每一个用户，只需要记录一个值即可。  </p></blockquote></li><li><p>群消息表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`message`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'消息id'</span>,</span><br><span class="line">  <span class="string">`type`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'消息类型：1：私聊；2：群聊'</span>,</span><br><span class="line">  <span class="string">`receiver_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人id（接收方）；type为1：联系人id, type为2：群id'</span>,</span><br><span class="line">  <span class="string">`sender_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id（发送方）'</span>,</span><br><span class="line">  <span class="string">`message_type`</span> <span class="built_in">int</span> (<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'类型  1：文字；3：图片；43：音频；47：emoji；48：位置；49：文件'</span>,</span><br><span class="line">  <span class="string">`content`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'消息格式 【发信人id:内容】'</span>,</span><br><span class="line">  <span class="string">`sign_status`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'消息状态  0: 未签收；1: 签收'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime(<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'消息发送时间'</span>,</span><br><span class="line">  <span class="string">`updated_time`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'消息状态更新时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_bin <span class="keyword">COMMENT</span>=<span class="string">'消息记录表'</span>;</span><br></pre></td></tr></table></figure></li><li><p>群成员表  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`chat_group_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'群成员id'</span>,</span><br><span class="line">  <span class="string">`chat_group_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'群组id'</span>,</span><br><span class="line">  <span class="string">`user_remark_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户所在群昵称'</span>,</span><br><span class="line">  <span class="string">`last_ack_msg_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'群成员最后收到的一条群消息ID'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updated_time`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_bin <span class="keyword">COMMENT</span>=<span class="string">'群组表'</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018工作项目总结-模仿蒲公英App上传平台</title>
      <link href="/2018-work-program-summary-3.html"/>
      <url>/2018-work-program-summary-3.html</url>
      <content type="html"><![CDATA[<h1 id="简介">1. 简介</h1><p>模仿蒲公英App上传平台。  </p><h2 id="项目描述">1.1. 项目描述</h2><ul><li>后端基于 <code>SpringBoot + tk.mybatis</code>、前端基于<code>Vue + Vuex + elementUI</code>的前后端分离项目；  </li><li>基于 <code>Shiro</code> 安全框架的登陆身份认证和权限校验（授权）；  </li><li>实现前后端分离，通过 <code>token</code> 进行数据交互。  </li><li>特点  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 友好的代码结构及注释，便于阅读及二次开发</span><br><span class="line">- 实现前后端分离，通过token进行数据交互，前端再也不用关注后端技术</span><br><span class="line">- 灵活的权限控制，可控制到页面或按钮，满足绝大部分的权限需求</span><br><span class="line">- 页面交互使用Vue2.x，极大的提高了开发效率</span><br><span class="line">- 完善的代码生成机制，可在线生成entity、xml、dao、service、vue、sql代码，减少70%以上的开发任务</span><br><span class="line">- 引入quartz定时任务，可动态完成任务的添加、修改、删除、暂停、恢复及日志查看等功能</span><br><span class="line">- 引入API模板，根据token作为登录令牌，极大的方便了APP接口开发</span><br><span class="line">- 引入Hibernate Validator校验框架，轻松实现后端校验</span><br><span class="line">- 引入云存储服务，已支持：七牛云、阿里云、腾讯云等</span><br></pre></td></tr></table></figure></li></ul><h2 id="技术选型">1.2. 技术选型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 核心框架：Spring Boot 2.0</span><br><span class="line">- 安全框架：Apache Shiro 1.4</span><br><span class="line">- 视图框架：Spring MVC 5.0</span><br><span class="line">- 持久层框架：MyBatis 3.3</span><br><span class="line">- 定时器：Quartz 2.3</span><br><span class="line">- 数据库连接池：Druid 1.0</span><br><span class="line">- 日志管理：SLF4J 1.7、Log4j</span><br><span class="line">- 页面交互：Vue2.x</span><br></pre></td></tr></table></figure><h2 id="项目主要模块">1.3. 项目主要模块</h2><ol><li><p>结合七牛云的文件上传  </p></li><li><p>QQ、Github第三方登录  </p></li><li><p>支付宝PC端网页支付、微信扫码支付  </p></li><li><p>邮箱发送注册  </p></li></ol><h3 id="七牛云文件上传">1.3.1. 七牛云文件上传</h3><h3 id="QQ第三方登陆">1.3.2. QQ第三方登陆</h3><ol><li>申请地址: <a href="https://connect.qq.com/index.html" target="_blank" rel="noopener">QQ互联</a>  </li><li>需要审核成为<strong>开发者</strong>才能创建应用  </li><li>本地测试中，网站应用或移动该应用可以不用审核成功，但只能本人qq登陆自己网站。  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-9-30/71077275.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-9-30/23390421.jpg" alt=""></p><h3 id="Github第三方登陆">1.3.3. Github第三方登陆</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-9-30/17124559.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-9-30/95558268.jpg" alt=""></p><h3 id="支付宝PC端支付">1.3.4. 支付宝PC端支付</h3><ol><li>微信/支付宝异步回调域名设置  </li></ol><blockquote><p>如果没有域名，可以内网穿透，推荐免费工具：<a href="http://ngrok.ciqiuwl.cn/" target="_blank" rel="noopener">小米球</a></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pay:</span></span><br><span class="line"><span class="attr">  web-url:</span> <span class="attr">http://app.ngrok.xiaomiqiu.cn</span></span><br></pre></td></tr></table></figure><ol start="2"><li>支付宝设置同步回调地址  </li></ol><blockquote><p>支付成功后，跳转页面，正式环境切换域名<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alipay:</span></span><br><span class="line"><span class="attr">    return_url:</span> <span class="attr">http://localhost:8080/#/index</span> <span class="comment"># 支付宝支付成功后前端跳转地址（非必填）</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="微信扫码支付">1.3.5. 微信扫码支付</h3><h3 id="发送邮件">1.3.6. 发送邮件</h3><ul><li>使用SpringBoot自带的 <code>JavaMailSender</code>  </li><li><p>参考博客<a href="http://blog.didispace.com/springbootmailsender/" target="_blank" rel="noopener">Spring Boot中使用JavaMailSender发送邮件</a>  </p></li><li><p><code>application.yml</code> 配置文件:  </p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    mail:</span></span><br><span class="line"><span class="attr">        default-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">        host:</span> <span class="string">smtp.163.com</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">***@163.com</span></span><br><span class="line"><span class="attr">        password:</span> <span class="string">*********</span></span><br><span class="line"><span class="comment"># 设置常用参数</span></span><br><span class="line"><span class="attr">custom:</span></span><br><span class="line"><span class="attr">  email:</span></span><br><span class="line">      <span class="comment"># 邮箱配置</span></span><br><span class="line"><span class="attr">      from-email:</span> <span class="string">*****@163.com</span></span><br><span class="line">      <span class="comment"># 验证码信息模板</span></span><br><span class="line"><span class="attr">      codeTemplate:</span> <span class="string">"您的验证码是: #code"</span></span><br><span class="line">      <span class="comment"># 每日最大发送条数</span></span><br><span class="line"><span class="attr">      sendMaxCount:</span> <span class="number">30</span></span><br><span class="line">      <span class="comment"># 验证错误次数限制</span></span><br><span class="line"><span class="attr">      errorMaxCount:</span> <span class="number">3</span></span><br><span class="line">      <span class="comment"># 验证码过期时间 单位秒</span></span><br><span class="line"><span class="attr">      expireTime:</span> <span class="number">300</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018工作项目总结-后台管理中心</title>
      <link href="/2018-work-program-summary-1.html"/>
      <url>/2018-work-program-summary-1.html</url>
      <content type="html"><![CDATA[<h1 id="简介">1. 简介</h1><p>liang多多商城后台管理中心。  </p><h2 id="项目描述">1.1. 项目描述</h2><ul><li>后端基于 <code>SpringBoot + tk.mybatis</code>、前端基于<code>Vue + Vuex + elementUI</code>的前后端分离项目；  </li><li>基于 <code>Shiro</code> 安全框架的登陆身份认证和权限校验（授权）；  </li><li>实现前后端分离，通过 <code>token</code> 进行数据交互。  </li></ul><h2 id="项目主要模块">1.2. 项目主要模块</h2><ol><li><p>系统管理  </p><blockquote><p>管理员列表、角色管理、菜单管理、文件上传、系统日志  </p></blockquote></li><li><p>会员管理  </p><blockquote><p>认证审核、充值管理、用户管理  </p></blockquote></li><li><p>财务管理  </p><blockquote><p>提现审核、银行机构  </p></blockquote></li><li><p>直供管理  </p><blockquote><p>订单管理、商家管理、商品管理、商品分类  </p></blockquote></li><li><p>本地生活  </p><blockquote><p>商家管理、生活服务、订单管理、生活分类、开通城市  </p></blockquote></li><li><p>统计管理  </p></li><li><p>代理管理  </p></li><li><p>其他  </p><blockquote><p>推送、弹窗消息、广告位管理、App文章管理  </p></blockquote></li></ol><h2 id="重点技术">1.3. 重点技术</h2><p>自定义全局异常处理类、shiro、redis、系统日志等</p><h3 id="shiro">1.3.1. shiro</h3><p>参考：<a href="http://jinnianshilongnian.iteye.com/blog/2018398?page=3#comments" target="_blank" rel="noopener">跟我学Shiro</a>  </p><p>实体关系：<strong>用户–角色–权限</strong>  </p><ol><li>主要创建Shiro配置文件<code>ShiroConfig.java</code>  </li></ol><ul><li>初始化<code>SessionMannger</code>  <blockquote><p><strong>会话管理</strong>，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中。  </p></blockquote></li><li>初始化 <code>SerucityManager</code>  <blockquote><p><strong>安全管理器</strong>，安全管理器；即所有与安全有关的操作都会与SecurityManager交 互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器。</p></blockquote></li></ul><ul><li><p>初始化<code>权限过滤器</code>  </p><blockquote><p>拦截所有请求，配置为 <code>anon</code> 的，表示不经过shiro处理，配置为 <code>oauth2</code> 的，表示经过 <code>OAuth2Filter.java</code> 处理。<br>前后端分离的接口，都会交给<code>OAuth2Filter</code>处理，这样就保证，没有权限的<br>请求，拒绝访问。  </p></blockquote></li><li><p><code>Oauth2Filter.java</code>  </p><blockquote><p>继承<code>AuthenticatingFilter.java</code>;<br>主要重写了：<code>createToken</code>(获取当前认证令牌信息token)、<code>isAccessAllowed</code>(是否允许访问)、<code>onAccessDenied</code>(访问被拒绝处理，token不存在，直接返回401)、<code>onLoginFailure</code>(登陆失败处理,返回授权错误状态码401)  </p></blockquote></li></ul><ol start="2"><li>创建<code>OAuth2Realm.java</code>  </li></ol><ul><li><p><code>Realm</code></p><blockquote><p>可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；  </p></blockquote></li><li><p>继承<code>AuthorizingRealm.java</code>抽象类</p><blockquote><p>实现<code>supports()</code>： 判断是否支持此token（本项目我们自定义token）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> token <span class="keyword">instanceof</span> OAuth2Token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2Token</span> <span class="keyword">implements</span> <span class="title">AuthenticationToken</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OAuth2Token</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取身份</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取凭证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现<code>doGetAuthenticationInfo()</code>: 获取身份验证（登陆）相关信息<br>实现<code>doGetAuthorizationInfo()</code>: 获取授权信息  </p></blockquote><ol start="3"><li>本项目中登陆时，都会重新生成token保存到数据库中，获取权限等其他接口请求的header中携带token参数，通过shiro的过滤器判断token是否和数据库中查询的一样。  </li></ol><h3 id="Redis缓存">1.3.2. Redis缓存</h3><blockquote><p>灵活和高效实用缓存，需要考虑以下几个问题：  </p></blockquote><ol><li>查询数据的时候，尽量减少DB查询，DB主要负责写数据</li><li>尽量不使用 <code>LEFT JOIN</code> 等关联查询，缓存命中率不高，还浪费内存</li><li>多使用单表查询，缓存命中率最高</li><li>数据库insert、update、delete时，同步更新缓存数据  </li><li>合理运用Redis数据结构，也许有质的飞跃</li><li>对于访问量不大的项目，使用缓存只会增加项目的复杂度</li></ol><h4 id="切面配置">1.3.2.1. 切面配置</h4><blockquote><p>本系统采用Redis作为缓存，并可配置是否开启redis缓存，主要还是通过Spring AOP实现的，配置如下所<br>示：  </p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line"><span class="attr">    open:</span> <span class="literal">true</span>  <span class="comment"># 是否开启redis缓存  true开启   false关闭</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="string">.**.***</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    password:</span>      <span class="comment"># 密码（默认为空）</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">6000</span>  <span class="comment"># 连接超时时长（毫秒）</span></span><br><span class="line"><span class="attr">    pool:</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">1000</span>  <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span>      <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">      max-idle:</span> <span class="number">10</span>      <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">5</span>       <span class="comment"># 连接池中的最小空闲连接</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis切面处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否开启redis缓存  true开启   false关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.open: false&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> open;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.dl98.admin.common.utils.RedisUtils.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(open)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                result = point.proceed();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                logger.error(<span class="string">"redis error"</span>, e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RRException(<span class="string">"Redis服务异常"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时任务">1.3.3. 定时任务</h3><p>了解：<a href="https://segmentfault.com/a/1190000013077817?utm_source=tag-newest" target="_blank" rel="noopener">SpringBoot集中定时任务的实现方式</a>。  </p><ol><li><p><strong>Timer</strong>：这是java自带的java.util.Timer类，这个类允许你调度一个java.util.TimerTask任务。使用这种方式可以让你的程序按照某一个频度执行，但不能在指定时间运行。一般用的较少。  </p></li><li><p><strong>ScheduledExecutorService</strong>：也jdk自带的一个类；是基于线程池设计的定时任务类,每个调度任务都会分配到线程池中的一个线程去执行,也就是说,任务是并发执行,互不影响。  </p></li><li><p><strong>Spring Task</strong>：Spring3.0以后自带的task，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多。  </p></li><li><strong>Quartz</strong>：这是一个功能比较强大的的调度器，可以让你的程序在指定时间执行，也可以按照某一个频度执行，配置起来稍显复杂。  </li></ol><blockquote><p>本项目中使用第二种。  </p></blockquote><h4 id="使用">1.3.3.1. 使用</h4><p>参考：<a href="https://www.cnblogs.com/huhx/p/baseusejavaScheduledExecutorService.html" target="_blank" rel="noopener">Thread之ScheduledExecutorService的使用</a>  </p><h3 id="全局异常处理机制">1.3.4. 全局异常处理机制</h3><blockquote><p>本项目通过 <code>RRException</code> 异常类，抛出自定义异常，RRException继承 <code>RuntimeException</code>，不能继承Exception，如果继承Exception，则Spring事务不会回滚。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RRException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code = <span class="number">500</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RRException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(msg);</span><br><span class="line"><span class="keyword">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RRException</span><span class="params">(String msg, Throwable e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(msg, e);</span><br><span class="line"><span class="keyword">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RRException</span><span class="params">(String msg, <span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(msg);</span><br><span class="line"><span class="keyword">this</span>.msg = msg;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RRException</span><span class="params">(String msg, <span class="keyword">int</span> code, Throwable e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(msg, e);</span><br><span class="line"><span class="keyword">this</span>.msg = msg;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义了 <code>RRExceptionHandler</code> 类，并加上注解 <code>@RestControllerAdvice</code>，就可以处理所有抛出的异常，并返回JSON数据。  </p></blockquote><blockquote><p>@RestControllerAdvice是由@ControllerAdvice、@ResponseBody注解组合而来。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RRExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理自定义异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(RRException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handleRRException</span><span class="params">(RRException ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"handleRRException =&gt; &#123;&#125;"</span>, ex.getMessage());</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.put(<span class="string">"code"</span>, ex.getCode());</span><br><span class="line">        r.put(<span class="string">"msg"</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(DuplicateKeyException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handleDuplicateKeyException</span><span class="params">(DuplicateKeyException ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"handleDuplicateKeyException =&gt; &#123;&#125;"</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"数据库中已存在该记录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(AuthorizationException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handleAuthorizationException</span><span class="params">(AuthorizationException ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"handleAuthorizationException =&gt; &#123;&#125;"</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"没有权限，请联系管理员授权"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handleException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"handleException =&gt; &#123;&#125;"</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="系统日志">1.3.5. 系统日志</h3><blockquote><p>系统日志是通过 <code>Spring AOP</code> 实现的，我们自定义了注解 <code>@SysLog</code>，且只能在方法上使用，如下所示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 放置在RequestMapping注解的Url请求处理方法上，用于统计请求操作日志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SysLog &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 功能名称 ***/</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用方式：  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SysLog</span>(<span class="string">"保存用户"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"sys:user:save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(@RequestBody SysUserEntity user)</span> </span>&#123;</span><br><span class="line">    ValidatorUtils.validateEntity(user, AddGroup.class);</span><br><span class="line"></span><br><span class="line">    user.setCreateUserId(getUserId());</span><br><span class="line">    sysUserService.add(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们可以发现，只需要在保存日志的请求方法上，加上 <code>@SysLog</code> 注解，就可以把日志保存到数据库里了。具体是在哪里把数据保存到数据库里的呢，我们定义  <code>SysLogAspect</code> 处理类，如下所示  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 操作日志切面处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysLogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SysLogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysLogService sysLogService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Long&gt; startTime = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能描述: 其他请求拦截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"within(com.dl98.admin..*) &amp;&amp; @annotation(sysLog)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBeforeSysLog</span><span class="params">(JoinPoint joinPoint, SysLog sysLog)</span> </span>&#123;</span><br><span class="line">        startTime.set(System.currentTimeMillis());</span><br><span class="line">        logger.debug(<span class="string">"执行 [ &#123;&#125; ] 开始"</span>, sysLog.value());</span><br><span class="line">        logger.debug(<span class="string">"方法名称 : &#123;&#125;"</span>, joinPoint.getSignature().toString());</span><br><span class="line">        logger.debug(<span class="string">"传入参数 : &#123;&#125;"</span>, JsonUtils.toJsonString(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"within(com.dl98.admin..*) &amp;&amp; @annotation(sysLog)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAfterReturningSysLog</span><span class="params">(JoinPoint joinPoint, SysLog sysLog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis() - startTime.get();</span><br><span class="line">        logger.debug(<span class="string">"执行 [ &#123;&#125; ] 结束 耗时: &#123;&#125; 毫秒"</span>, sysLog.value(), time);</span><br><span class="line">        saveSysLog(joinPoint, sysLog, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(pointcut = <span class="string">"within(com.dl98.admin..*) &amp;&amp; @annotation(sysLog)"</span>, throwing = <span class="string">"ex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAfterThrowingSysLog</span><span class="params">(JoinPoint joinPoint, SysLog sysLog, Exception ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"执行 [ &#123;&#125; ] 异常"</span>, sysLog.value(), ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveSysLog</span><span class="params">(JoinPoint joinPoint, SysLog sysLog, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        SysLogEntity operation = <span class="keyword">new</span> SysLogEntity();</span><br><span class="line">        <span class="comment">// 注解上的描述</span></span><br><span class="line">        operation.setOperation(sysLog.value());</span><br><span class="line">        <span class="comment">// 请求的方法名</span></span><br><span class="line">        operation.setMethod(joinPoint.getSignature().toShortString());</span><br><span class="line">        <span class="comment">// 请求的参数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            operation.setParams(JsonUtils.toJsonString(joinPoint.getArgs()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            operation.setParams(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置IP地址</span></span><br><span class="line">        operation.setIp(IPUtils.getIpAddress(HttpContextUtils.getHttpServletRequest()));</span><br><span class="line"></span><br><span class="line">        String username = ((SysUserEntity) SecurityUtils.getSubject().getPrincipal()).getUsername();</span><br><span class="line">        operation.setUsername(username);</span><br><span class="line"></span><br><span class="line">        operation.setTime(time);</span><br><span class="line">        operation.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">// 保存系统日志</span></span><br><span class="line">        sysLogService.saveNotNull(operation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>SysLogAspect</code> 类定义了一个切入点，请求 <code>@SysLog</code> 注解的方法时，会进入 <code>around</code> 方法，把系统日志保存到数据库中。  </p></blockquote>]]></content>
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Netty笔记--后期整理</title>
      <link href="/netty-study-first.html"/>
      <url>/netty-study-first.html</url>
      <content type="html"><![CDATA[<h1 id="前言">1. 前言</h1><h2 id="学习资料">1.1. 学习资料</h2><ol><li><p><a href="https://juejin.im/book/5b4bc28bf265da0f60130116/section/5b6a1a9cf265da0f87595521" target="_blank" rel="noopener">Netty入门与实战：仿写微信 IM 即时通讯系统</a>  </p></li><li><p><a href="https://www.jianshu.com/nb/7981390" target="_blank" rel="noopener">netty源码深度分析</a>  </p></li><li><p><a href="https://blog.csdn.net/baiye_xing/article/details/76735113" target="_blank" rel="noopener">Netty面试相关</a>  </p></li><li><p><a href="https://wenku.baidu.com/view/b7c83e54ba0d4a7302763acf.html" target="_blank" rel="noopener">微信聊天表结构设计</a>  </p></li><li><p><a href="https://www.cnblogs.com/imstudy/p/9224604.html" target="_blank" rel="noopener">微信小程序中如何使用WebSocket实现长连接</a>  </p></li><li><p><a href="http://www.52im.net/thread-464-1-1.html" target="_blank" rel="noopener">新手入门一篇就够：从零开发移动端IM</a>  </p></li><li><p><a href="http://www.cookqq.com/listBlog.action?type=8a10a5f34e38beab014e4cd6b9e801cf" target="_blank" rel="noopener">大佬的netty企业即时通讯系统博客</a>  </p></li></ol><h2 id="总结知识点">1.2. 总结知识点</h2><ol><li><p><code>Netty</code>是基于Java NIO的<code>client-server</code>框架。  </p><blockquote><p>作为一个异步NIO框架，Netty的所有IO操作都是异步非阻塞的，通过<code>Future-Listener</code>机制，用户可以很方便的主动获取或者通过通过机制获得IO操作结果。  </p></blockquote></li><li><p><code>Netty</code>是一个高性能、异步事件驱动的NIO框架，它提供了对<strong>TCP</strong>、<strong>UDP</strong>、和<strong>文件传输</strong>的支持。  </p><blockquote><p>Netty、Redis等大多数IO相关组件使用的IO模式–高性能IO之Reactor模式，参考<a href="https://www.cnblogs.com/doit8791/p/7461479.html" target="_blank" rel="noopener">https://www.cnblogs.com/doit8791/p/7461479.html</a>  </p></blockquote></li><li><p>自定义客户端服务端通信协议设计<strong>魔数</strong>的原因。  </p><blockquote><p>尽早屏蔽非本协议的客户端</p></blockquote></li><li><p>理解<strong>服务端</strong>绑定监听端口方法返回的一个<code>Future</code>、<strong>客户端</strong>连接服务端返回的<code>Future</code>，说明这两个方法是异步的。  参考<code>Java Futrue</code>资料：<a href="https://blog.csdn.net/u014209205/article/details/80598209" target="_blank" rel="noopener">https://blog.csdn.net/u014209205/article/details/80598209</a>。  </p></li><li><p>无论是<code>netty</code>，还是原始的<code>Socket</code>编程，基于<code>TCP</code>通信的数据包格式均为<strong>二进制</strong>。  </p><blockquote><p>协议指的是客户端与服务端事先商量好的</p></blockquote></li><li><p>序列化和编码都是把<code>java</code>对象封装成二进制数据的过程，它们的区别和联系  </p><blockquote><p>编码在将java对象序列化后按照约定的协议规则处理。简单来说，序列化是将java对象持久化成二进制流，编码是将信息从一定格式转换成另一种格式，序列化可以看做是一种编码方式。<br>除了<code>json</code>序列化方式外，还有<code>xml</code>、<code>protobuf</code>方式。  </p></blockquote></li></ol><h3 id="Reactor-线程模型">1.2.1. Reactor 线程模型</h3><p>详细请参考：<a href="https://www.cnblogs.com/doit8791/p/7461479.html" target="_blank" rel="noopener">高性能IO之Reactor模式</a>。  </p><p>netty 提供了三种Reactor线程模型：</p><ol><li><p>单线程模型：所有的IO操作都由同一个NIO线程处理的。  </p><ul><li>三个<code>client</code>连接了<code>server</code>,连接过程单线程处理的，该单线程要完成client连接、读取请求，响应请求。 </li><li>理论上，简单业务单线程处理上述所有逻辑没有问题，但高负载、大并发性能上支持不了，此时，client连接服务端，如果连接不上，就会执行重试，加重服务器负载，造成单节点故障或宕机。  </li></ul></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-11-1/14354713.jpg" alt=""></p><ol start="2"><li><p>多线程模型：由一组NIO线程处理IO操作  </p><ul><li>可以看到，由原先的<code>Reactor单线程</code>拆分两块，一块为<code>Reactor单线程</code>，一块为<code>Reactor线程池</code>；</li><li>左边负责client连接，丢给线程池处理数据读写请求。  </li></ul></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-11-1/59444344.jpg" alt=""></p><ol start="3"><li><p>主从线程组模型：一组线程池接收客户端请求，另一组线程池处理io操作  </p><ul><li>原来<code>Reactor单线程</code>变为<code>主线程池</code>，后面更名为<code>从线程池</code>。  </li><li>官方推荐的线程模型，高效  </li></ul></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-11-1/33303710.jpg" alt=""></p><h3 id="websocket">1.2.2. websocket</h3><p>实时通信的方式：  </p><ol><li><p>Ajax轮询  </p><blockquote><p>循环访问，不停建立http访问链接，耗费性能</p></blockquote></li><li><p>Long pull  </p><blockquote><p>阻塞模型，循环访问服务端，性能差</p></blockquote></li><li><p>websocket  </p><blockquote><p>一旦建立连接，服务端会主动的推送消息到客户端，客户端不需要请求服务端。<br>只需要一次http请求连接，服务端主动推送消息，节省资源。  </p></blockquote></li></ol><h4 id="websocket-api">1.2.2.1. websocket api</h4><ol><li><p>var socket = new WebSocket(“ws://[ip]:[port]”)  </p><blockquote><p>服务端和客户端通过url地址连接  </p></blockquote></li><li><p>生命周期：onopen()、onmessage()、onerror()、onclose()  </p><ul><li>onopen(): client和server连接时触发</li><li>onmessage(): client收到消息时触发  </li><li>onerror(): server等异常触发</li><li>onclose: client断开连接触发  </li></ul></li><li><p>主动方法  </p><ul><li>new WebSocket().send(): 客户端发送消息到服务端  </li><li>new WebSocket().close(): 关闭客户端和服务端连接  </li></ul></li></ol><h3 id="心跳机制">1.2.3. 心跳机制</h3><ol><li>netty与三个手机（客户端）连接，此时Channel数量3个；<br><img src="" alt=""></li><li>如果用户手动关闭手机websocket进程，服务端自定义的handler会把每个channel关闭并移除，此时Channel数量为0；  </li><li>如果用户开始飞行模式，websocket进程没有关闭，服务端Channel数量还是3个；<br><img src="" alt=""></li><li>如果有几千上万的手机端开启了飞行模式，服务端的channel没有关闭，造成资源的浪费；  </li><li>所以我们要在客户端做心跳机制，检测失败的关闭Channel。  </li></ol><h3 id="责任链模式">1.2.4. 责任链模式</h3><blockquote><p>通俗讲，将对象处理连成一条链，使得请求可以在链中进行传递，直到有一个对象处理他为止。  </p></blockquote><h4 id="角色">1.2.4.1. 角色</h4><ol><li><p>抽象处理者角色（Handler）  </p><blockquote><p>定义一个处理请求接口，接口中定义出一个方法用来设定和返回对下个处理者的引用，通常用Java抽象类或者Java接口实现。  </p></blockquote></li><li><p>具体处理角色（ConcreteHandler）  </p><blockquote><p>具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家，由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家。  </p></blockquote></li></ol><h4 id="实例">1.2.4.2. 实例</h4><ul><li><p><code>Handler.java</code>: 抽象处理者角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** 持有后继的责任对象 */</span></span><br><span class="line">  <span class="keyword">protected</span> Handler successor;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 处理请求的方法，自定义参数 */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取值方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Handler <span class="title">getSuccessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> successor;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** 赋值方法，设置后继的责任对象 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.successor = successor;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ConcreateHandler.java</code>: 具体处理者角色  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreateHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理请求方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 判断是否有后继的责任对象</span></span><br><span class="line">     <span class="comment">// 1. 如果有，转发给后继的责任对象</span></span><br><span class="line">     <span class="comment">// 2. 如果没有，处理请求</span></span><br><span class="line">     <span class="keyword">if</span> (getSuccessor() != <span class="keyword">null</span>) &#123;</span><br><span class="line">       getSuccessor().handleRequest();</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">"处理请求"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Client.java</code>: 客户端类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 组装责任链</span></span><br><span class="line">    Handler handler1 = <span class="keyword">new</span> ConcreateHandler();</span><br><span class="line">    Handler handler2 = <span class="keyword">new</span> ConcreateHandler();</span><br><span class="line">    handler1.setSuccessor(handler2);</span><br><span class="line">    <span class="comment">// 提交请求</span></span><br><span class="line">    handler1.handleRequest()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的java学习计划</title>
      <link href="/my-java-study-plan.html"/>
      <url>/my-java-study-plan.html</url>
      <content type="html"><![CDATA[<h1 id="教程">1. 教程</h1><h2 id="视频">1.1. 视频</h2><ol><li><a href="http://www.imooc.com/u/2145618/courses" target="_blank" rel="noopener">java高并发秒杀</a>  <strong>未完成</strong>  </li></ol><h2 id="github">1.2. github</h2><ol><li><a href="https://gitee.com/52itstyle/spring-boot-seckill" target="_blank" rel="noopener">分布式秒杀系统</a>  </li></ol><h2 id="掘金小册">1.3. 掘金小册</h2><ol><li><a href="https://juejin.im/book/5b4bc28bf265da0f60130116" target="_blank" rel="noopener">闪电侠的Netty 入门与实战：仿写微信 IM 即时通讯系统</a>  </li></ol>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>好用的软件总结</title>
      <link href="/life-common-software.html"/>
      <url>/life-common-software.html</url>
      <content type="html"><![CDATA[<h1 id="windows">1. windows</h1><h2 id="系统安装">1.1. 系统安装</h2><ol><li><strong>Rufus</strong>  <blockquote><p><a href="https://rufus.akeo.ie/?locale=zh_CN" target="_blank" rel="noopener">Rufus - 轻松创建USB启动盘</a>  </p></blockquote></li></ol><h2 id="系统优化">1.2. 系统优化</h2><ol><li><strong>CClenaer</strong>  <blockquote><p><a href="https://www.ccleaner.com/" target="_blank" rel="noopener">清理卸载工具</a>  </p></blockquote></li></ol>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java优秀的开源项目和博客</title>
      <link href="/java-open-program-learning.html"/>
      <url>/java-open-program-learning.html</url>
      <content type="html"><![CDATA[<h1 id="github">1. github</h1><h2 id="文档知识">1.1. 文档知识</h2><ol><li><p><a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="noopener">后端架构师技术图谱(architect-awesome)</a>  </p></li><li><p><a href="https://github.com/crossoverJie/JCSprout" target="_blank" rel="noopener">Java核心知识库(JCSprout)</a>  </p></li><li><p><a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">java面试指南(JavaGuide)</a>  </p></li><li><p><a href="http://www.cnblogs.com/jurendage" target="_blank" rel="noopener">Java开源生鲜电商平台</a>  </p></li></ol><h2 id="开源项目">1.2. 开源项目</h2><h3 id="Java垂直爬虫框架-Web-Magic">1.2.1. Java垂直爬虫框架(Web Magic)</h3><p><a href="https://github.com/code4craft/webmagic/blob/master/README-zh.md" target="_blank" rel="noopener">Java垂直爬虫框架(Web Magic)</a>  </p><h3 id="Spring-Cloud-Vue-oAuth2-0商城-paascloud-master">1.2.2. Spring Cloud + Vue + oAuth2.0商城(paascloud-master)</h3><p><a href="https://github.com/paascloud/paascloud-master" target="_blank" rel="noopener">Spring Cloud + Vue + oAuth2.0商城(paascloud-master)</a>  </p><h3 id="基于可靠消息最终一致性分布式事务框架-myth">1.2.3. 基于可靠消息最终一致性分布式事务框架(myth)</h3><p><a href="https://github.com/yu199195/myth" target="_blank" rel="noopener">基于可靠消息最终一致性分布式事务框架(myth)</a>  </p><h3 id="高性能异步分布式事务TCC框架">1.2.4. 高性能异步分布式事务TCC框架</h3><p><a href="https://github.com/yu199195/hmily" target="_blank" rel="noopener">高性能异步分布式事务TCC框架（try/confirm/cancel）</a>  </p><h1 id="开源项目讲解">2. 开源项目讲解</h1><h2 id="Hmily项目demo流程">2.1. Hmily项目demo流程</h2><ol><li><p>aop  </p><blockquote><p>根据添加的注解进行aop处理  </p></blockquote></li><li><p>rpc框架特性  </p><blockquote><p>在调用远程服务的接口前，获取所调用的方法签名  </p></blockquote></li><li><p>rpc框架参数传递  </p><blockquote><p>通过ThreadLocal保存事务上下文信息，进行参数传递  </p></blockquote></li><li><p>事务日志，到底存储了什么东西？怎么存储的，怎么序列化的？  </p><blockquote><p>采用<code>disruptor</code>进行事务日志异步读写，与rpc框架性能毫无差别   </p></blockquote></li><li><p>定时事务补偿  </p><blockquote><p>使用jdk的<code>ScheduledExecutorService.scheduleWithFixedDelay()</code>，主要作用将定时任务和线程池功能结合使用。<br>参考：<a href="https://www.cnblogs.com/huhx/p/baseusejavaScheduledExecutorService.html" target="_blank" rel="noopener">Thread之ScheduledExecutorService的使用</a><br>解决集群下重复执行问题，可以使用<a href="https://blog.csdn.net/quwenzhe/article/details/78865875" target="_blank" rel="noopener">redis分布式锁</a>解决，redis的命令<code>setnx</code>实现：当网redis中存入一个值时，会先判断该值对应的key是否存在，如果存在则返回0，如果不存在，则将该值存入redis并返回1。<br>根据上面的特性，我们在执行任务的程序中，每次都调用<code>setIfAbsent(该方法时setnx命令的实现)</code>方法，来模拟是否获取到锁，如果返回true，则说明key值不存在，表示获取到锁；如果返回false，则说明key值已存在，已经有程序使用这个key了，从而实现类似加锁的功能。  </p></blockquote></li><li><p>高效并发  </p><blockquote><p>单机 <strong>2000</strong> 并发，可以通过<a href="http://www.cnblogs.com/yangxia-test/p/3964881.html" target="_blank" rel="noopener">jmeter压测</a><br>因为目前是异步的存储日志到mysql，会有限制，使用<code>mongo</code>集群，很快  </p></blockquote></li><li><p>TCC缺点  </p><blockquote><p>代码量多，try、confirm、cancel三个方法，使用者需要知道confirm、cancel方法的正确书写，使用场景有限。<br>事务日志需要记录：推荐使用高效的存储，推荐使用mongo集群，kroy序列化  </p></blockquote></li><li><p>TCC优点  </p><blockquote><p>天然支持集群，不依赖于事务；<br>依赖事务日志，最终一致性</p></blockquote></li></ol><h3 id="使用技术">2.1.1. 使用技术</h3><h4 id="mysql乐观锁">2.1.1.1. mysql乐观锁</h4><p>目的：解决高并发。  </p><p>参考：<a href="https://www.cnblogs.com/jurendage/p/9232173.html" target="_blank" rel="noopener">APP大规模高并发请求和抢购的架构与解决方案</a>  </p><p>在<strong>定时事务补偿</strong>补偿中，对于事务异常记录到数据库中的事务进行补偿重试操作，为避免高并发，采用<code>mysql乐观锁</code>机制，采用版本号的形式实现，事务的重试次数即为版本号。  </p><blockquote><p>乐观锁，是相对于<strong>悲观锁</strong>采用更为宽松的加锁机制，大都是采用带版本号（Version）更新。实现就是，这个数据所有请求都有资格去修改，但会获得一个该数据的版本号，只有版本号符合的才能重试。  </p></blockquote><blockquote><p>悲观锁，也就是在修改数据的时候，采用锁定状态，排斥外部请求的修改。遇到加锁的状态，就必须等待。<br>虽然上述的方案的确解决了线程安全的问题，但是，别忘记，我们的场景是“高并发”。也就是说，会很多这样的修改请求，每个请求都需要等待“锁”，某些线程可能永远都没有机会抢到这个“锁”，这种请求就会死在那里。同时，这种请求会很多，瞬间增大系统的平均响应时间，结果是可用连接数被耗尽，系统陷入异常。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">final</span> TccTransaction tccTransaction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Integer currentVersion = tccTransaction.getVersion();</span><br><span class="line">    tccTransaction.setLastTime(<span class="keyword">new</span> Date());</span><br><span class="line">    tccTransaction.setVersion(tccTransaction.getVersion() + <span class="number">1</span>);</span><br><span class="line">    String sql = <span class="string">"update "</span> + tableName</span><br><span class="line">            + <span class="string">" set last_time = ?,version =?,retried_count =?,invocation=?,status=? ,pattern=? where trans_id = ? and version=? "</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] serialize = serializer.serialize(tccTransaction.getParticipants());</span><br><span class="line">        <span class="keyword">return</span> executeUpdate(sql, tccTransaction.getLastTime(),</span><br><span class="line">                tccTransaction.getVersion(), tccTransaction.getRetriedCount(), serialize,</span><br><span class="line">                tccTransaction.getStatus(), tccTransaction.getPattern(),</span><br><span class="line">                tccTransaction.getTransId(), currentVersion);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TccException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> FAIL_ROWS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ScheduledExecutorService">2.1.1.2. ScheduledExecutorService</h4><p>参考博客：<a href="http://moon-walker.iteye.com/blog/2407533" target="_blank" rel="noopener">a定时任务之ScheduledThreadPoolExecutor</a>  </p><ol><li><p>extends <a href="http://moon-walker.iteye.com/blog/2406788" target="_blank" rel="noopener">ThreadPoolExecutor</a>，说明本质也是一个线程池。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledThreadPoolExecutor</span>  <span class="keyword">extends</span> <span class="title">ThreadPoolExecutor</span>  </span></span><br><span class="line"><span class="class">                <span class="keyword">implements</span> <span class="title">ScheduledExecutorService</span> </span>&#123;  </span><br><span class="line"><span class="comment">//省略实现代码  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>ScheduledExecutorService</code>接口，自定义个性方法，实现<strong>延迟任务和周期性任务</strong>的核心方法。 </p></li></ol><blockquote><p>下面四个方法都是提交任务方法，相当于<code>ThreadPoolExecutor</code>的execute、submit方法，并且都由返回值，类型都是<code>ScheduledFuture</code>，相当于普通线程池的<code>Future</code>，可以用于控制任务生命周期。  </p></blockquote><blockquote><p>第1、2个是<strong>延迟任务</strong>，即延迟固定period时间后，执行任务。<br>第3、4个是<strong>周期性任务</strong>，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 延迟任务 执行方法，参数为Runnable类型对象  </span></span><br><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; schedule(Runnable command,  </span><br><span class="line">                                    <span class="keyword">long</span> delay, TimeUnit unit);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 延迟任务 执行方法，参数为Callable类型对象  </span></span><br><span class="line"><span class="keyword">public</span> &lt;V&gt; <span class="function">ScheduledFuture&lt;V&gt; <span class="title">schedule</span><span class="params">(Callable&lt;V&gt; callable,  </span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">long</span> delay, TimeUnit unit)</span></span>;  </span><br><span class="line"><span class="comment">// 3. 固定频率 执行方法，任务时间到后就立即执行</span></span><br><span class="line"><span class="comment">// 等待周期分两种情况：如果程序的执行时间大于间隔时间，等待周期为执行时间；</span></span><br><span class="line"><span class="comment">// 如果程序的执行时间小于间隔时间，等待周期为间隔时间</span></span><br><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,  </span><br><span class="line">                                                <span class="keyword">long</span> initialDelay,  </span><br><span class="line">                                                <span class="keyword">long</span> period,  </span><br><span class="line">                                                TimeUnit unit);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 固定延迟周期 执行方法，上次执行完成后（不管执行任务需要花多长时间）固定等待延迟时间后 再执行  </span></span><br><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command,  </span><br><span class="line">                                                    <span class="keyword">long</span> initialDelay,  </span><br><span class="line">                                                    <span class="keyword">long</span> delay,  </span><br><span class="line">                                                    TimeUnit unit);</span><br></pre></td></tr></table></figure></p></blockquote><ol start="3"><li>新建线程池的任务队列是<code>ScheduledThreadPoolExecutor</code>的静态内部类<code>DelayedWorkQueue</code>。  <blockquote><p>该队列主要是维护了一个由<a href="https://www.cnblogs.com/skywang12345/p/3610390.html" target="_blank" rel="noopener">二叉堆算法(最小堆)</a>实现的数组，简单理解就是在调用add方法插入队列时，采用二叉堆算法保证第一个元素是最小值，这里其实就是<strong>Delay时间</strong>最小的值。  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledService</span><span class="params">(<span class="keyword">final</span> TccConfig tccConfig, <span class="keyword">final</span> CoordinatorRepository coordinatorRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tccConfig = tccConfig;</span><br><span class="line">        <span class="keyword">this</span>.coordinatorRepository = coordinatorRepository;</span><br><span class="line">        <span class="comment">// 内部默认实现了队列</span></span><br><span class="line">        <span class="keyword">this</span>.scheduledExecutorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>, HmilyThreadFactory.create(<span class="string">"tccRollBackService"</span>, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="切面-AOP">2.1.1.3. 切面-AOP</h4><ol><li>理解了aop，就理解了tcc，就理解了分布式事务的实现。  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Tcc</span>(confirmMethod = <span class="string">"confirmOrderStatus"</span>, cancelMethod = <span class="string">"cancelOrderStatus"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePayment</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">       order.setStatus(OrderStatusEnum.PAYING.getCode());</span><br><span class="line">       <span class="comment">// 本地事务</span></span><br><span class="line">       orderMapper.update(order);</span><br><span class="line">       <span class="comment">// 扣除用户余额</span></span><br><span class="line">       AccountDTO accountDTO = <span class="keyword">new</span> AccountDTO();</span><br><span class="line">       accountDTO.setAmount(order.getTotalAmount());</span><br><span class="line">       accountDTO.setUserId(order.getUserId());</span><br><span class="line">       LOGGER.debug(<span class="string">"===========执行springcloud扣减资金接口=========="</span>);</span><br><span class="line">       <span class="comment">// 远端服务</span></span><br><span class="line">       accountClient.payment(accountDTO);</span><br><span class="line">       <span class="comment">//进入扣减库存操作</span></span><br><span class="line">       InventoryDTO inventoryDTO = <span class="keyword">new</span> InventoryDTO();</span><br><span class="line">       inventoryDTO.setCount(order.getCount());</span><br><span class="line">       inventoryDTO.setProductId(order.getProductId());</span><br><span class="line">       <span class="comment">// 远端服务</span></span><br><span class="line">       inventoryClient.decrease(inventoryDTO);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>实现springcloud的切面类实现了Spirng的<code>Ordered</code>接口，并重写了getOrder方法，返回<code>Ordered.HIGHEST_PRECEDENCE</code>，所以他是优先级最高的切面。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudHmilyTransactionAspect</span> <span class="keyword">extends</span> <span class="title">AbstractTccTransactionAspect</span> <span class="keyword">implements</span> <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringCloudHmilyTransactionAspect</span><span class="params">(<span class="keyword">final</span> SpringCloudHmilyTransactionInterceptor springCloudHmilyTransactionInterceptor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setTccTransactionInterceptor(springCloudHmilyTransactionInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.HIGHEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们在<code>下订单</code>时会调用远端rpc服务，springcloud使用<code>@FeignClient</code>，并在接口上加了注解<code>@Tcc</code>。  </p><blockquote><p>Spring AOP的特性，接口上加注解，无法进入切面，所以在这里，要采用rpc框架的某些特性来帮助我们获取到<code>@Tcc</code>注解信息。  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"account-service"</span>, configuration = MyConfiguration.class)</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账户付款</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountDO 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/account-service/account/payment"</span>)</span><br><span class="line">    <span class="meta">@Tcc</span></span><br><span class="line">    <span class="function">Boolean <span class="title">payment</span><span class="params">(@RequestBody AccountDTO accountDO)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>承接上一步，当调用<code>SpringCloud</code>的RPC服务<code>accountClient.payment()</code>，会进入<code>HmilyFeignHandler</code>。  <blockquote><p>通过@FeignClient的自定义配置<code>MyConfiguration.java</code>;<br>在这里我们获取了之前设置到本地ThreadLocal里的事务上下文，然后进行SpringCloud的rpc传参数。<br>保存方法的所有的信息，方法签名、接口等。</p></blockquote></li></ol><h3 id="tcc库作用">2.1.2. tcc库作用</h3><p>存储做分布式事务时的日志信息。  </p><ol><li>如果是正常执行，日志信息会删除；  </li><li><p><code>订单</code>、<code>库存</code>、<code>账户</code>三个不同的库，下订单时，属于分布式事务，如果有一处异常，比如库存异常（服务断掉），已经持久化的订单、账户就会回滚，保持事务高度一致性。  </p></li><li><p>服务超时时，通过<strong>本地补偿</strong>，</p></li></ol><ul><li>applicationContext.xml  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hmily.tcc.*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hmilyTransactionBootstrap"</span> <span class="attr">class</span>=<span class="string">"com.hmily.tcc.core.bootstrap.HmilyTransactionBootstrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serializer"</span> <span class="attr">value</span>=<span class="string">"kryo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"recoverDelayTime"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"retryMax"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"scheduledDelay"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"scheduledThreadMax"</span> <span class="attr">value</span>=<span class="string">"4"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"repositorySupport"</span> <span class="attr">value</span>=<span class="string">"db"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tccDbConfig"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.hmily.tcc.common.config.TccDbConfig"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/tcc?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="执行confirm、cancel方法失败时">2.1.3. 执行confirm、cancel方法失败时</h3><p>框架初始化时，会初始化一个线程池，任务调度，根据你的配置多少时间轮询一次。  </p><ol><li>如果你的日志没有删除，服务分布式事务执行失败，进行各种情况的判断；  </li><li>如果try未执行完成，那么就不进行补偿，直接删除事务日志 （防止在try阶段的各种异常情况）  </li><li>如果超过了最大执行次数，不再进行重试  </li><li></li></ol><h3 id="Myth项目demo流程">2.1.4. Myth项目demo流程</h3><blockquote><p><code>MythMqReceiveServiceImpl.java</code>: ReentrantLock  </p></blockquote><ul><li>订单支付分布式事务流程  </li></ul><ol><li><p>service层 <code>PaymentServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Myth</span>(destination = <span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePayment</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 扣除余额</span></span><br><span class="line">  <span class="comment">// 扣减库存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为上面service有 <code>@Myth</code> 注解，该注解使用了 <code>Aop</code> 切面拦截该注解  <code>AbstractMythTransactionAspect.java</code><br>spirng aop AspectJ参考：<a href="https://blog.csdn.net/zhengchao1991/article/details/53391244" target="_blank" rel="noopener">Spring 之AOP AspectJ切入点语法详解</a>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.github.myth.annotation.Myth)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mythTransactionInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this is around in &#123;<span class="doctag">@linkplain</span> com.github.myth.annotation.Myth &#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> proceedingJoinPoint proceedingJoinPoint</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Throwable  Throwable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"mythTransactionInterceptor()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">interceptMythAnnotationMethod</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mythTransactionInterceptor.interceptor(proceedingJoinPoint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Aop</code>拦截器对事务进行处理，判断事务角色是否是发起者、本地执行或者提供者<code></code></p><blockquote><p>此处事务已经发起，返回<code>StartMythTransactionHandler.java</code><br><img src="1" alt="">  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MythTransactionFactoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">MythTransactionFactoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MythTransactionEngine mythTransactionEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MythTransactionFactoryServiceImpl</span><span class="params">(<span class="keyword">final</span> MythTransactionEngine mythTransactionEngine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mythTransactionEngine = mythTransactionEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断事务类型并返回相应事务处理类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">factoryOf</span><span class="params">(<span class="keyword">final</span> MythTransactionContext context)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//如果事务还没开启或者 myth事务上下文是空， 那么应该进入发起调用</span></span><br><span class="line">        <span class="keyword">if</span> (!mythTransactionEngine.isBegin() &amp;&amp; Objects.isNull(context)) &#123;</span><br><span class="line">            <span class="keyword">return</span> StartMythTransactionHandler.class;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (context.getRole() == MythRoleEnum.LOCAL.getCode()) &#123;</span><br><span class="line">                <span class="keyword">return</span> LocalMythTransactionHandler.class;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ActorMythTransactionHandler.class;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MythTransactionAspectServiceImpl</span> <span class="keyword">implements</span> <span class="title">MythTransactionAspectService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MythTransactionFactoryService mythTransactionFactoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MythTransactionAspectServiceImpl</span><span class="params">(<span class="keyword">final</span> MythTransactionFactoryService mythTransactionFactoryService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mythTransactionFactoryService = mythTransactionFactoryService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> MythTransactionContext mythTransactionContext, <span class="keyword">final</span> ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 返回相应事务</span></span><br><span class="line">        <span class="keyword">final</span> Class clazz = mythTransactionFactoryService.factoryOf(mythTransactionContext);</span><br><span class="line">        <span class="keyword">final</span> MythTransactionHandler mythTransactionHandler = (MythTransactionHandler) SpringBeanUtils.getInstance().getBean(clazz);</span><br><span class="line">        <span class="comment">// 处理相应事务（该流程下事务已经开始，进入StartMythTransactionHandler.java）</span></span><br><span class="line">        <span class="keyword">return</span> mythTransactionHandler.handler(point, mythTransactionContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>处理事务：<code>StartMythTransactionHandler.handler()</code>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">handler</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint point, <span class="keyword">final</span> MythTransactionContext mythTransactionContext)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 异步保存事务</span></span><br><span class="line">        mythTransactionEngine.begin(point);</span><br><span class="line">        <span class="keyword">final</span> Object proceed = point.proceed();</span><br><span class="line">        mythTransactionEngine.updateStatus(MythStatusEnum.COMMIT.getCode());</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        <span class="comment">//更新失败的日志信息</span></span><br><span class="line">        mythTransactionEngine.failTransaction(throwable.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> throwable;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        mythTransactionEngine.sendMessage();</span><br><span class="line">        mythTransactionEngine.cleanThreadLocal();</span><br><span class="line">        TransactionContextLocal.getInstance().remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="订单支付流程异常处理">2.1.4.1. 订单支付流程异常处理</h4><ul><li>下订单业务逻辑  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Myth</span>(destination = <span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePayment</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查数据 这里只是demo 只是demo 只是demo</span></span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">        <span class="comment">// 1. 本地事务：更新订单</span></span><br><span class="line">        order.setStatus(OrderStatusEnum.PAY_SUCCESS.getCode());</span><br><span class="line">        orderMapper.update(order);</span><br><span class="line">        <span class="comment">// 2. 远程事务：扣除用户余额</span></span><br><span class="line">        AccountDTO accountDTO = <span class="keyword">new</span> AccountDTO();</span><br><span class="line">        accountDTO.setAmount(order.getTotalAmount());</span><br><span class="line">        accountDTO.setUserId(order.getUserId());</span><br><span class="line">        accountClient.payment(accountDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 远程事务：进入扣减库存操作</span></span><br><span class="line">        InventoryDTO inventoryDTO = <span class="keyword">new</span> InventoryDTO();</span><br><span class="line">        inventoryDTO.setCount(order.getCount());</span><br><span class="line">        inventoryDTO.setProductId(order.getProductId());</span><br><span class="line">        inventoryClient.decrease(inventoryDTO);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="停掉Invertory库存服务">2.1.4.1.1. 停掉Invertory库存服务</h5><p>承接上一节内容，此时如果在<code>第3步</code>扣库存时停掉<code>invertory</code>微服务，会发现之前执行的<strong>订单更新</strong>、远程服务的<strong>扣除余额</strong>操作都已经正常完成；<br>而库存并没有减掉，再次重新启动<code>invertory</code>服务，发现会自动执行未完成事务，完成扣库存操作。  </p><ol><li>重启<code>invertory</code>服务时，会经过<code>SpringCloudMythTransactionInterceptor.interceptor()</code>执行事务补偿。  </li></ol><h5 id="停掉Order服务">2.1.4.1.2. 停掉Order服务</h5><p>如果上面再<code>第2步</code>停掉<code>order</code>服务，<code>order</code>服务会执行完该业务方法，即完成<code>2、3步</code>。不会造成分布式事务问题。  </p><h5 id="停掉消息服务RabbitMQ">2.1.4.1.3. 停掉消息服务RabbitMQ</h5><ul><li><figure class="highlight plain"><figcaption><span>通过线程池调动一直重试恢复</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">```java</span><br><span class="line">    @Override</span><br><span class="line">    public void initialization(final MythConfig mythConfig) &#123;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(new Thread(() -&gt; LOGGER.error(&quot;myth have error!&quot;)));</span><br><span class="line">        try &#123;</span><br><span class="line">            loadSpiSupport(mythConfig);</span><br><span class="line">            // 启动disruptor</span><br><span class="line">            publisher.start(mythConfig.getBufferSize());</span><br><span class="line">            coordinatorService.start(mythConfig);</span><br><span class="line">            // (事务发起者)如果需要自动恢复 开启线程 调度线程池，进行恢复</span><br><span class="line">            if (mythConfig.getNeedRecover()) &#123;</span><br><span class="line">                scheduledService.scheduledAutoRecover(mythConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            LogUtil.error(LOGGER, &quot;Myth init fail:&#123;&#125;&quot;, ex::getMessage);</span><br><span class="line">            //非正常关闭</span><br><span class="line">            System.exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        LogUtil.info(LOGGER, () -&gt; &quot;Myth init success&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Disruptor-无锁并行计算框架">2.1.4.2. Disruptor(无锁并行计算框架)</h4><p>在无锁的情况下实现网络的Queue并发操作，高性能的异步事件驱动型的处理框架，或者可以认为是最快的消息框架（轻量的JMS），也可以认为是一个观察者模式的实现，或者事件监听模式的实现。  </p><p>典型的<strong>生产者-消费者</strong>模式，disruptor使用RingBuffer存放数据，sequence管理生产和消费的位置（long类型，递增），生产者要生产数据的时候首先向生产者请求一个sequence，然后在sequence的位置放置数据。  </p><p>参考博客：<a href="https://www.cnblogs.com/sigm/p/6251910.html" target="_blank" rel="noopener">架构师养成记–15.Disruptor并发框架</a>  </p><ul><li>项目使用流程总结  <blockquote><p><code>MythTransactionBootStrap.java</code>启动类中初始化启动了<code>Disruptor</code>，当然还启动了其他配置。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">final</span> MythConfig mythConfig)</span> </span>&#123;</span><br><span class="line">    mythInitService.initialization(mythConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MythInitServiceImpl.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialization</span><span class="params">(<span class="keyword">final</span> MythConfig mythConfig)</span> </span>&#123;</span><br><span class="line">    Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(() -&gt; LOGGER.error(<span class="string">"myth have error!"</span>)));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        loadSpiSupport(mythConfig);</span><br><span class="line">        <span class="comment">// 启动disruptor</span></span><br><span class="line">        <span class="comment">// bufferSize，RingBuffer大小，必须是2的N次方</span></span><br><span class="line">        publisher.start(mythConfig.getBufferSize());</span><br><span class="line">        coordinatorService.start(mythConfig);</span><br><span class="line">        <span class="comment">//(事务发起者)如果需要自动恢复 开启线程 调度线程池，进行恢复</span></span><br><span class="line">        <span class="keyword">if</span> (mythConfig.getNeedRecover()) &#123;</span><br><span class="line">            scheduledService.scheduledAutoRecover(mythConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        LogUtil.error(LOGGER, <span class="string">"Myth init fail:&#123;&#125;"</span>, ex::getMessage);</span><br><span class="line">        <span class="comment">//非正常关闭</span></span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    LogUtil.info(LOGGER, () -&gt; <span class="string">"Myth init success"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>建立<code>Event</code>类（数据对象）  </p><blockquote><p>事务对象  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MythTransactionEvent</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MythTransaction mythTransaction;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * help gc.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mythTransaction = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>建立一个生产数据的工厂类，<code>EventFactory</code>，用于生产数据  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MythTransactionEventFactory</span> <span class="keyword">implements</span> <span class="title">EventFactory</span>&lt;<span class="title">MythTransactionEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MythTransactionEvent <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MythTransactionEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监听事件类（处理Event数据）   </p><blockquote><p>监听策略  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BlockingWaitStrategy 是最低效的策略，但其对CPU的消耗最小并且在各种不同部署环境中能提供更加一致的性能表现</span></span><br><span class="line">WaitStrategy BLOCKING_WAIT = <span class="keyword">new</span> BlockingWaitStrategy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SleepingWaitStrategy 的性能表现跟BlockingWaitStrategy差不多，对CPU的消耗也类似，但其对生产者线程的影响最小，适合用于异步日志类似的场景</span></span><br><span class="line">WaitStrategy SLEEPING_WAIT = <span class="keyword">new</span> SleepingWaitStrategy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// YieldingWaitStrategy 的性能是最好的，适合用于低延迟的系统。在要求极高性能且事件处理线数小于CPU逻辑核心数的场景中，推荐使用此策略；例如，CPU开启超线程的特性</span></span><br><span class="line">WaitStrategy YIELDING_WAIT = <span class="keyword">new</span> YieldingWaitStrategy();</span><br></pre></td></tr></table></figure></blockquote></li><li><p>实例化Disruptor，配置参数，绑定事件  </p><blockquote><p><code>MythTransactionEventPublisher.java</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> bufferSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 disruptor</span></span><br><span class="line">    <span class="comment">// 使用 BlockingWatiStrategy 策略</span></span><br><span class="line">    <span class="comment">// ProducerType: MULTI(多个生产者), SINGLE(单个生产者)</span></span><br><span class="line">    disruptor = <span class="keyword">new</span> Disruptor&lt;&gt;(<span class="keyword">new</span> MythTransactionEventFactory(), bufferSize, r -&gt; &#123;</span><br><span class="line">        AtomicInteger index = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(<span class="keyword">null</span>, r, <span class="string">"disruptor-thread-"</span> + index.getAndIncrement());</span><br><span class="line">    &#125;, ProducerType.MULTI, <span class="keyword">new</span> BlockingWaitStrategy());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者缓存池构建</span></span><br><span class="line">    <span class="keyword">final</span> Executor executor = <span class="keyword">new</span> ThreadPoolExecutor(MAX_THREAD, MAX_THREAD, <span class="number">0</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(),</span><br><span class="line">            MythTransactionThreadFactory.create(<span class="string">"myth-log-disruptor"</span>, <span class="keyword">false</span>),</span><br><span class="line">            <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">    MythTransactionEventHandler[] consumers = <span class="keyword">new</span> MythTransactionEventHandler[MAX_THREAD];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_THREAD; i++) &#123;</span><br><span class="line">        consumers[i] = <span class="keyword">new</span> MythTransactionEventHandler(coordinatorService, executor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 连接消费者的方法</span></span><br><span class="line">    disruptor.handleEventsWithWorkerPool(consumers);</span><br><span class="line">    disruptor.setDefaultExceptionHandler(<span class="keyword">new</span> IgnoreExceptionHandler());</span><br><span class="line">    <span class="comment">// 启动</span></span><br><span class="line">    disruptor.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>事件发布  </p><blockquote><p>建存放数据的核心 RingBuffer，生产的数据放入 RungBuffer，本项目中就是各种类型的事务。参考上面的<strong>订单支付分布式事务流程</strong>的第<br>4步，处理<code>Start</code>类型事务。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StartMythTransactionHandler.java  </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">handler</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint point, <span class="keyword">final</span> MythTransactionContext mythTransactionContext)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 此处发布了（生产者数据）事务</span></span><br><span class="line">        mythTransactionEngine.begin(point);</span><br><span class="line">        <span class="keyword">final</span> Object proceed = point.proceed();</span><br><span class="line">        mythTransactionEngine.updateStatus(MythStatusEnum.COMMIT.getCode());</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        <span class="comment">//更新失败的日志信息</span></span><br><span class="line">        mythTransactionEngine.failTransaction(throwable.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> throwable;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        mythTransactionEngine.sendMessage();</span><br><span class="line">        mythTransactionEngine.cleanThreadLocal();</span><br><span class="line">        TransactionContextLocal.getInstance().remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MythTransactionEngine.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint point)</span> </span>&#123;</span><br><span class="line">    LogUtil.debug(LOGGER, () -&gt; <span class="string">"开始执行Myth分布式事务！start"</span>);</span><br><span class="line">    MythTransaction mythTransaction = buildMythTransaction(point, MythRoleEnum.START.getCode(), MythStatusEnum.BEGIN.getCode(), <span class="string">""</span>);</span><br><span class="line">    <span class="comment">// 发布事务保存事件，异步保存</span></span><br><span class="line">    publishEvent.publishEvent(mythTransaction, EventTypeEnum.SAVE.getCode());</span><br><span class="line">    <span class="comment">// 当前事务保存到ThreadLocal</span></span><br><span class="line">    CURRENT.set(mythTransaction);</span><br><span class="line">    <span class="comment">// 设置tcc事务上下文，这个类会传递给远端</span></span><br><span class="line">    MythTransactionContext context = <span class="keyword">new</span> MythTransactionContext();</span><br><span class="line">    <span class="comment">// 设置事务id</span></span><br><span class="line">    context.setTransId(mythTransaction.getTransId());</span><br><span class="line">    <span class="comment">// 设置为发起者角色</span></span><br><span class="line">    context.setRole(MythRoleEnum.START.getCode());</span><br><span class="line">    TransactionContextLocal.getInstance().set(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MythTransactionEventPublisher.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(<span class="keyword">final</span> MythTransaction mythTransaction, <span class="keyword">final</span> <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> RingBuffer&lt;MythTransactionEvent&gt; ringBuffer = disruptor.getRingBuffer();</span><br><span class="line">    ringBuffer.publishEvent(<span class="keyword">new</span> MythTransactionEventTranslator(type), mythTransaction);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>消费者：消费缓存中主动发送给消费端的数据  <blockquote><p><a href="http://san-yun.iteye.com/blog/2072726" target="_blank" rel="noopener">executor的execute()和submit方法区别</a>  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MythTransactionEventHandler.</span></span><br><span class="line"><span class="comment"> *  // 事件消费者，也就是一个事件处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyu(Myth)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MythTransactionEventHandler</span> <span class="keyword">implements</span> <span class="title">WorkHandler</span>&lt;<span class="title">MythTransactionEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CoordinatorService coordinatorService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MythTransactionEventHandler</span><span class="params">(<span class="keyword">final</span> CoordinatorService coordinatorService,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">final</span> Executor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coordinatorService = coordinatorService;</span><br><span class="line">        <span class="keyword">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据EventTypeEnum事务类型不同处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(<span class="keyword">final</span> MythTransactionEvent mythTransactionEvent)</span> </span>&#123;</span><br><span class="line">        executor.execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (mythTransactionEvent.getType() == EventTypeEnum.SAVE.getCode()) &#123;</span><br><span class="line">                coordinatorService.save(mythTransactionEvent.getMythTransaction());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mythTransactionEvent.getType() == EventTypeEnum.UPDATE_PARTICIPANT.getCode()) &#123;</span><br><span class="line">                coordinatorService.updateParticipant(mythTransactionEvent.getMythTransaction());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mythTransactionEvent.getType() == EventTypeEnum.UPDATE_STATUS.getCode()) &#123;</span><br><span class="line">                <span class="keyword">final</span> MythTransaction mythTransaction = mythTransactionEvent.getMythTransaction();</span><br><span class="line">                coordinatorService.updateStatus(mythTransaction.getTransId(), mythTransaction.getStatus());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mythTransactionEvent.getType() == EventTypeEnum.UPDATE_FAIR.getCode()) &#123;</span><br><span class="line">                coordinatorService.updateFailTransaction(mythTransactionEvent.getMythTransaction());</span><br><span class="line">            &#125;</span><br><span class="line">            mythTransactionEvent.clear();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Feign源码">2.1.4.3. Feign源码</h4><p><a href="http://techblog.ppdai.com/2018/05/14/20180514/" target="_blank" rel="noopener">feign源码解析</a>  </p><ul><li>设计模式：建造者模式   </li></ul><h3 id="netty系列">2.1.5. netty系列</h3><ol><li><p><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="noopener">Netty 4.x 用户指南(netty-4-user-guide)</a>  </p></li><li><p><a href="https://github.com/a2888409/face2face" target="_blank" rel="noopener">基于netty的IM服务器(face2face)</a>  </p></li><li><p><a href="https://github.com/mpusher/mpush" target="_blank" rel="noopener">MPush推送系统(mpush)</a>  </p></li><li><p><a href="https://github.com/tang-jie/NettyRPC" target="_blank" rel="noopener">基于netty构建RPC系统(NettyRPC)</a>  </p></li><li><p><a href="https://github.com/YunaiV/netty" target="_blank" rel="noopener">芋艿源码解读(netty)</a>  </p></li></ol><h1 id="博客大佬">3. 博客大佬</h1><ol><li><a href="https://crossoverjie.top/" target="_blank" rel="noopener">crossoverJie’s Blog</a>  </li></ol>]]></content>
      
      <categories>
          
          <category> 总结大全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云服务器总结</title>
      <link href="/aliyun-learning-summary.html"/>
      <url>/aliyun-learning-summary.html</url>
      <content type="html"><![CDATA[<h1 id="阿里云服务器SSH免密远程登录">1. 阿里云服务器SSH免密远程登录</h1><ul><li>注意：我的服务器<code>ssh</code>文件夹在：<code>etc/ssh</code>。</li></ul><p>参考资料：<a href="https://www.aliyun.com/jiaocheng/160395.html" target="_blank" rel="noopener">https://www.aliyun.com/jiaocheng/160395.html</a></p><h1 id="Docker操作">2. Docker操作</h1><h2 id="删除容器与镜像">2.1. 删除容器与镜像</h2><p>参考博客：<a href="https://blog.csdn.net/qq_32447301/article/details/79387649" target="_blank" rel="noopener">https://blog.csdn.net/qq_32447301/article/details/79387649</a>  </p><h2 id="Docker-部署-SpringBoot">2.2. Docker 部署 SpringBoot</h2><ul><li><p><a href="http://blog.anxpp.com/index.php/archives/1075/" target="_blank" rel="noopener">spring boot 应用发布到 docker 完整版</a>  </p></li><li><p><a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener">Docker — 从入门到实践</a>  </p></li></ul>]]></content>
      
      <categories>
          
          <category> 阿里云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (十五)：Docker容器部署</title>
      <link href="/springcloud-project-docker-deploy.html"/>
      <url>/springcloud-project-docker-deploy.html</url>
      <content type="html"><![CDATA[<h1 id="简单上手">1. 简单上手</h1><h2 id="运行-Eureka">1.1. 运行 Eureka</h2><ol><li><p>下载并启动 <strong>8761</strong> 端口的<code>Eureka</code>   </p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">docker run -p 8761:8761 -d hub.c.163.com/springcloud/eureka</span><br></pre></td></tr></table></figure></blockquote></li><li><p>下载并启动 <strong>18761</strong> 端口的<code>Eureka</code>   </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p <span class="number">18761</span>:<span class="number">8761</span> -d hub.c.163.com/springcloud/eureka</span><br></pre></td></tr></table></figure><h1 id="点餐项目-Docker-容器部署">2. 点餐项目 Docker 容器部署</h1><h2 id="构建镜像">2.1. 构建镜像</h2><h3 id="eureka-项目">2.1.1. eureka 项目</h3><ol><li><strong>Dockerfile</strong>  </li></ol>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot + MyBatis 开发脚手架</title>
      <link href="/springboot-mybatis-development-scaffold.html"/>
      <url>/springboot-mybatis-development-scaffold.html</url>
      <content type="html"><![CDATA[<h1 id="前言">1. 前言</h1><p>方便快速进行项目开发！个人使用。  </p><h2 id="项目地址">1.1. 项目地址</h2><p>码云：<a href="https://gitee.com/ddebug/wechat-admin" target="_blank" rel="noopener">wechat-admin</a>  </p><blockquote><p>注意：clone 后切换到 <strong>tag标签</strong>的<code>v1.0</code>版本，最原始的脚手架，可以在上面添加新增的业务代码。  </p></blockquote><h2 id="使用技术">1.2. 使用技术</h2><ul><li>Spirng Boot  </li><li>MyBatis  </li><li><p>MySQL 5.7x  </p><blockquote><p>注意：不要使用<strong>5.6及以下版本</strong>，表设计时采用了时间字段交给mysql处理。低版本不支持。  </p></blockquote></li><li><p>Druid  </p></li><li>全局异常处理  </li><li>logback日志管理  </li></ul>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序学习总结</title>
      <link href="/wechat-mini-apps-learning.html"/>
      <url>/wechat-mini-apps-learning.html</url>
      <content type="html"><![CDATA[<h1 id="前言">1. 前言</h1><p>参考资料：<a href="https://www.cnblogs.com/xuanbiyijue/p/7980010.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuanbiyijue/p/7980010.html</a>  </p><p>知乎精选：<a href="https://www.zhihu.com/question/50907897" target="_blank" rel="noopener">如何入门微信小程序开发</a>  </p><p><a href="https://github.com/justjavac/awesome-wechat-weapp" target="_blank" rel="noopener">微信小程序开发资源汇总</a>  </p><p><a href="https://github.com/senola/wechat-app-issues" target="_blank" rel="noopener">微信小程序使用有坑记录</a></p><h2 id="github项目">1.1. github项目</h2><ol><li><p><a href="https://github.com/linlinjava/litemall" target="_blank" rel="noopener">litemall【Spring Boot后端 + Vue管理员前端 + 微信小程序用户前端】</a>   </p><blockquote><p>该项目有非常完善的开发部署文档：<a href="https://linlinjava.gitbook.io/litemall" target="_blank" rel="noopener">https://linlinjava.gitbook.io/litemall</a>    </p></blockquote></li><li><p><a href="https://github.com/ximolang/mp-jishengji" target="_blank" rel="noopener">计生计</a>  </p></li><li><p><a href="https://muse-ui.org/#/zh-CN/button" target="_blank" rel="noopener">Muse-UI</a>  </p></li></ol><h2 id="wepy：微信小程序组件开发框架">1.2. wepy：微信小程序组件开发框架</h2><ol><li>github地址：<a href="https://github.com/Tencent/wepy" target="_blank" rel="noopener">wepy</a>  </li><li>组件汇总：<a href="https://github.com/aben1188/awesome-wepy" target="_blank" rel="noopener">awesome-wepy</a>  </li><li><a href="https://gitee.com/qfr_bz/citySelector" target="_blank" rel="noopener">省份/城市/区县定位选择器</a>  </li><li><a href="https://github.com/czcaiwj/calendar" target="_blank" rel="noopener">微信小程序-极点日历</a>  </li><li><a href="https://github.com/meili/minui" target="_blank" rel="noopener">微信原始小程序组件-minui</a>  </li></ol><h2 id="mpvue：美团小程序开发框架">1.3. mpvue：美团小程序开发框架</h2><ol><li>github地址：<a href="https://github.com/Meituan-Dianping/mpvue" target="_blank" rel="noopener">mpvue</a></li></ol><h2 id="视频教程">1.4. 视频教程</h2><ol><li><a href="https://www.imooc.com/learn/945" target="_blank" rel="noopener">SpringBoot+MyBatis搭建迷你小程序</a>  </li></ol><h2 id="实现功能">1.5. 实现功能</h2><p>日历上能够显示不同颜色，不同颜色代表你坚持的不同的事情。 </p><h3 id="项目名称">1.5.1. 项目名称</h3><ol><li>you can you up</li><li>you will,you mast</li></ol><h3 id="首页">1.5.2. 首页</h3><p>显示本月日历，每天日期上会有颜色区块！  </p><ol><li>红色：一段时间内，你每天是否跑步；  </li><li>蓝色：剪头；  </li><li>黄色：看电影；  </li><li>绿色：发工资；</li></ol><h3 id="类别统计页">1.5.3. 类别统计页</h3><ol><li>统计你自定义的事情的列表/柱形图等；  </li><li>…..待续  </li></ol><h2 id="使用组件">1.6. 使用组件</h2><ol><li><a href="https://github.com/czcaiwj/calendar" target="_blank" rel="noopener">微信小程序-极点日历</a>  </li><li><a href="https://github.com/we-plugin/we-swiper" target="_blank" rel="noopener">轮播图：we-swiper</a>  </li><li><a href="https://github.com/TalkingData/iview-weapp" target="_blank" rel="noopener">第三方UI组件库</a>  </li><li><a href="http://www.wxapp-union.com/forum.php?mod=viewthread&amp;tid=4628" target="_blank" rel="noopener">首页特效</a> </li><li><a href="https://github.com/qindiandadudu/TianguoguoXiaopu" target="_blank" rel="noopener">首页特效</a></li><li><a href="https://github.com/skyvow/wux" target="_blank" rel="noopener">悬浮按钮-wux</a>  </li><li><a href="https://github.com/bigmeow/minapp-api-promise" target="_blank" rel="noopener">promise</a><h1 id="初步了解小程序">2. 初步了解小程序</h1></li></ol><p>通过上面视频教程，初步学习小程序前后台搭建。  </p><h2 id="实现功能-1">2.1. 实现功能</h2><ol><li><p><strong>后端：Spring Boot + Mybatis 框架</strong>  </p></li><li><p><strong>实现后端业务功能</strong>  </p></li><li><p><strong>前端：本地微信小程序</strong>  </p></li><li><p><strong>前端和后端联调</strong>  </p></li></ol><h2 id="域名证书">2.2. 域名证书</h2><ul><li><a href="https://blog.csdn.net/Colton_Null/article/details/78266810" target="_blank" rel="noopener">SpringBoot微服务的https配置方法（即微信小程序后台服务搭建解决方案）</a>  </li></ul><h2 id="spring后台部署">2.3. spring后台部署</h2><ul><li><a href="http://www.ityouknow.com/docker/2018/03/22/docker-compose.html" target="_blank" rel="noopener">Docker(四)：Docker 三剑客之 Docker Compose</a>  </li><li><a href="http://www.ityouknow.com/springboot/2018/04/02/docker-favorites.html" target="_blank" rel="noopener">Spring Boot 2.0(六)：使用 Docker 部署 Spring Boot 开源软件云收藏</a>  </li><li><p><a href="https://blog.csdn.net/jzd1997/article/details/79315919" target="_blank" rel="noopener">利用docker nginx,redis,mysql部署springboot应用集群环境</a></p></li><li><p><a href="https://blog.csdn.net/u012734441/article/details/77832797" target="_blank" rel="noopener">spring cloud 与 docker-compose构建微服务</a></p></li></ul><h2 id="总结">2.4. 总结</h2><ol><li><a href="http://blog.anxpp.com/index.php/archives/1075/" target="_blank" rel="noopener">spring boot 应用发布到 docker 完整版</a>  </li><li><p><a href="https://www.cnblogs.com/kaid/p/7640723.html" target="_blank" rel="noopener">阿里云服务器centos7安装nginx</a></p><blockquote><p>注意：<a href="https://www.cnblogs.com/saneri/p/5391821.html" target="_blank" rel="noopener">编译nginx指定ssl模块</a><br>注意：<a href="http://blog.itblood.com/nginx-emerg-getpwnam-www-failed.html" target="_blank" rel="noopener">nginx: [emerg] getpwnam(“www”) failed错误</a>  </p></blockquote></li><li><p><a href="https://yundun.console.aliyun.com/?spm=5176.2020520001.aliyun_sidebar.20.11f44bd3aPrsJa&amp;p=cas#/cas/download/214817049210895?regionId=" target="_blank" rel="noopener">阿里云官方文档：nginx安装ssl证书</a>  </p></li><li><a href="https://blog.csdn.net/achenyuan/article/details/80509037" target="_blank" rel="noopener">docker-compose部署使用spring测试、开发、生产环境等</a></li><li><a href="https://cloud.tencent.com/developer/article/1061870" target="_blank" rel="noopener">让docker中的mysql启动时自动执行sql文件</a>  </li><li><a href="https://github.com/voocel/docker-lnmp" target="_blank" rel="noopener">docker-lnmp: mysql/nginx/redis/php</a>  </li><li></li></ol><h2 id="mysql数据库备份">2.5. mysql数据库备份</h2><p>参考：<a href="https://www.jianshu.com/p/746db5ceec02" target="_blank" rel="noopener">CentOS 7 MySQL自动备份shell脚本</a></p><h1 id="部署流程">3. 部署流程</h1><h2 id="部署环境">3.1. 部署环境</h2><ul><li>阿里云服务器【centos 7】  </li></ul><h2 id="部署配置">3.2. 部署配置</h2><h3 id="配置Docker-Remote-API">3.2.1. 配置Docker Remote API</h3><p>参考：<a href="http://blog.anxpp.com/index.php/archives/1075/" target="_blank" rel="noopener">spring boot 应用发布到 docker 完整版</a></p><ol><li>pom.xml文件<blockquote><p>添加<code>docker-maven-plugin</code>，使用Docker Remote API 进行远程提交镜像的。  </p></blockquote></li></ol><h4 id="部署遇到问题">3.2.1.1. 部署遇到问题</h4><ol><li><p>配置Docker Remote API  </p><blockquote><p>不用增加 <code>Docker Hub</code> 镜像地址，否则会报错；  </p></blockquote></li><li><p>修改上述配置文件后，使用下面命令重启；  </p><blockquote><p><code>systemctl daemon-reload</code>  </p></blockquote></li><li><p>由于项目架构为SpringBoot的多模块，在子模块中运行下面命令即可：  </p><blockquote><p><code>mvn clean package docker:build</code>  </p></blockquote></li></ol><h2 id="操作流程">3.3. 操作流程</h2><ol><li>项目根目录：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install -Dmaven.test.skip=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>calendar-wx-api目录下：<blockquote><p>执行下面命令后，生成docker镜像，会推送到阿里云服务器</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean <span class="keyword">package</span> -Dmaven.test.skip=<span class="keyword">true</span> docker:build</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-7-8/91690899.jpg" alt=""></p><ol start="3"><li>阿里云服务器启动docker服务【如果未启动】</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><ol start="4"><li><p>下载Docker Java8 运行环境镜像</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">docker pull frolvlad/alpine-oraclejdk8</span><br></pre></td></tr></table></figure></blockquote></li><li><p>阿里云服务器运行docker容器  </p><blockquote><p>-d：让容器后台运行<br>-p：将容器内的端口映射到docker所在系统的端口<br>-t：打开一个伪终端，以便后续可以进入查看控制台 log</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p <span class="number">443</span>:<span class="number">443</span> -t calendar/calendar-wx-api</span><br></pre></td></tr></table></figure><ol start="6"><li>查看docker运行情况  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-7-8/91319982.jpg" alt=""></p><ol start="7"><li>查看docker镜像日志：  <blockquote><p>–since : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志。<br>-f : 表示查看实时日志<br>-t : 查看日志产生的日期<br>-tail=200 : 查看最后的200条日志。<br>sleepy_snyder 容器的名称，并不是镜像的名字</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --since=<span class="string">"2018-07-08"</span> --tail=<span class="number">20</span> sleepy_tesla</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-7-8/21393208.jpg" alt=""></p><ol start="8"><li>删除容器和镜像  <blockquote><p>docker rmi [name]：删除镜像<br>docker rm [name]：删除容器  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-7-8/18055543.jpg" alt=""></p><h2 id="第二种操作流程">3.4. 第二种操作流程</h2><ol><li>copy jar包到linux  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-7-18/88044539.jpg" alt=""></p><ol start="2"><li>在<code>~/calendar</code>目录下 <strong>docker build</strong>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t wechat/calendar:v1 .</span><br></pre></td></tr></table></figure><ol start="3"><li><code>docker images</code>   </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-7-18/20893175.jpg" alt=""></p><ol start="4"><li>运行docker镜像  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p <span class="number">8082</span>:<span class="number">8082</span> wechat/calendar:v1</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 微信小程序学习实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开发拼团功能</title>
      <link href="/work-groupon-start-introduce.html"/>
      <url>/work-groupon-start-introduce.html</url>
      <content type="html"><![CDATA[<p>参考：<a href="http://www.cnblogs.com/jurendage/p/9098368.html" target="_blank" rel="noopener">Java开源生鲜电商平台-团购模块设计与架构</a>；<br>参考：<a href="https://www.kancloud.cn/digest/java-travel/159427" target="_blank" rel="noopener">Java定时方式Timer和TimerTask、Spring、QuartZ、Linux Cron</a>；<br>参考：<a href="https://gitee.com/guinong/FightGroups" target="_blank" rel="noopener">开源项目：FightGroups</a><br>参考：<a href="https://gitee.com/l2iu/tanjor/tree/master/tanjor" target="_blank" rel="noopener">开源N拼开发框架：tanjor</a></p><h1 id="设计思路">1. 设计思路</h1><p>参考：<a href="http://www.woshipm.com/evaluating/650989.html" target="_blank" rel="noopener">深入解析拼团模式及用法</a>  </p><h2 id="拼团模式">1.1. 拼团模式</h2><p>参考：<a href="http://www.pmdaniu.com/rp/detail/35847?page=15" target="_blank" rel="noopener">商城原型设计（包含前后端），拼团微商城+pc后台管理系统</a>  </p><ol><li>活动期间,用户可以通过拼团商品详情,下单发起拼团;   </li><li>用户只有付款成功才算成功发起拼团或者成功参与拼团,创建订单未付款不算有效参与拼团玩法;   </li><li>用户在规定时间内拉满拼团人数,商家就会开始正常发货,   </li><li>如果未能在规定时间内拼团成功,则系统自动触发退款。  </li></ol><h3 id="关键点">1.1.1. 关键点</h3><ol><li>超时未成团自动退款（支付宝、微信接口）  </li><li>未成团前不能发起退款，只有成团后才能发起退款  </li><li>未支付成功不算参团；  </li><li><p>需要注意<strong>超卖</strong>情况，设置好商品数量与人数平衡；   </p><blockquote><p><strong>用缓存</strong>控制并发，不要超卖  </p></blockquote></li><li><p>是否添加拼团支持的城市列表；  </p></li><li>是否设置拼团为新用户； </li><li>检测是否成团或失败：进程监控软件 + curl   </li><li>多线程处理退款、发送消息通知；  <blockquote><p>拼团失败，马上退款，用户不会觉得是假的  </p></blockquote></li></ol><h2 id="实际应用">1.2. 实际应用</h2><ol><li>商家出商品团，当 1 个人购买时 30，5 个人拼团后价格变为 20；   </li><li>消费者参加 5 人商品团，先支付 30，开团成功，然后分享好友，拉好友参团；  </li><li>24 小时内，满 5 人则拼团成功；  </li><li>24 小时内或超出 24 小时，未满 5 人则拼团失败，系统自动退款。  </li></ol><h1 id="数据表设计">2. 数据表设计</h1><h2 id="拼团主表">2.1. 拼团主表</h2><blockquote><p>开团总人数、开团金额、团开始时间、团结束时间<br>总人数、当前参团人数、开团人、参与人等  </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`groups`</span> (</span><br><span class="line">  <span class="string">`group_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">  <span class="string">`group_no`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团号'</span>,</span><br><span class="line">  <span class="string">`group_title`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购标题'</span>,</span><br><span class="line">  <span class="string">`group_area`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购区域(区域ID集合)'</span>,</span><br><span class="line">  <span class="string">`begin_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'开始时间'</span>,</span><br><span class="line">  <span class="string">`end_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'结束时间'</span>,</span><br><span class="line">  <span class="string">`max_num`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最大买家数'</span>,</span><br><span class="line">  <span class="string">`buyer_amt`</span> <span class="built_in">decimal</span>(<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'买家起团金额'</span>,</span><br><span class="line">  <span class="string">`min_amt`</span> <span class="built_in">decimal</span>(<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最低开团金额'</span>,</span><br><span class="line">  <span class="string">`group_status`</span> tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'状态(1发布 -1未发布 2团成 3未团成)'</span>,</span><br><span class="line">  <span class="string">`remarks`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`create_user_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`group_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'团购主表'</span>;</span><br></pre></td></tr></table></figure><h2 id="拼团买家表">2.2. 拼团买家表</h2><blockquote><p>记录哪个买家、哪个团购、团购最终数量、团购价格等等  </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`groups_buyer`</span> (</span><br><span class="line">  <span class="string">`gb_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">  <span class="string">`buyer_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'买家ID'</span>,</span><br><span class="line">  <span class="string">`group_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购ID'</span>,</span><br><span class="line">  <span class="string">`item_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购明细ID'</span>,</span><br><span class="line">  <span class="string">`order_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单ID'</span>,</span><br><span class="line">  <span class="string">`gb_num`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购数量'</span>,</span><br><span class="line">  <span class="string">`gb_price`</span> <span class="built_in">decimal</span>(<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购价格'</span>,</span><br><span class="line">  <span class="string">`gb_amt`</span> <span class="built_in">decimal</span>(<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购金额'</span>,</span><br><span class="line">  <span class="string">`gb_status`</span> tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'状态(1完成 -1取消)'</span>,</span><br><span class="line">  <span class="string">`gb_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`gb_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'团购买家表'</span>;</span><br></pre></td></tr></table></figure><h2 id="拼团商品表">2.3. 拼团商品表</h2><blockquote><p>记录拼团商品具体规格  </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`groups_item`</span> (</span><br><span class="line">  <span class="string">`item_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">  <span class="string">`group_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购ID'</span>,</span><br><span class="line">  <span class="string">`goods_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品ID'</span>,</span><br><span class="line">  <span class="string">`format_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品规格ID'</span>,</span><br><span class="line">  <span class="string">`group_price`</span> <span class="built_in">decimal</span>(<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购价格'</span>,</span><br><span class="line">  <span class="string">`group_num`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'团购数量'</span>,</span><br><span class="line">  <span class="string">`item_status`</span> tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'状态(1在用 -1停用)'</span>,</span><br><span class="line">  <span class="string">`create_user_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`item_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'团购明细表'</span>;</span><br></pre></td></tr></table></figure><h1 id="业务功能">3. 业务功能</h1><h2 id="商家">3.1. 商家</h2><ol><li>查询拼团活动列表   </li><li>查看拼团详情  </li><li>新增或修改拼团信息   </li><li>更新拼团状态（开团/不开团）  </li></ol><h2 id="买家">3.2. 买家</h2><ol><li>拼团活动列表   </li><li>支付下单，开启拼团   </li><li><p>团购定时器  </p><blockquote><p>拼团成功，更新团购状态，推送消息；<br>拼团失败，更新团购状态，退回支付金额（微信，支付宝），推送消息。  </p></blockquote></li><li><p>查看团购详情   </p></li></ol><h1 id="表设计">4. 表设计</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`activity_publish`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`activity_publish`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'活动ID'</span>,</span><br><span class="line">  <span class="string">`activity_number`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'活动编号'</span>,</span><br><span class="line">  <span class="string">`activity_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'活动名称'</span>,</span><br><span class="line">  <span class="string">`register_start_time`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'报名开始时间'</span>,</span><br><span class="line">  <span class="string">`register_end_time`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'报名结束时间'</span>,</span><br><span class="line">  <span class="string">`activity_start_time`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'活动开始时间'</span>,</span><br><span class="line">  <span class="string">`activity_end_time`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'活动结束时间'</span>,</span><br><span class="line">  <span class="string">`limited`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'限制付款时间&lt;分钟&gt;'</span>,</span><br><span class="line">  <span class="string">`activity_mode`</span> tinyint <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'拼团方式 1-普通团 2-阶梯团 3-新增团'</span>,</span><br><span class="line">  <span class="string">`activity_explain`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">COMMENT</span> <span class="string">'活动说明'</span>,</span><br><span class="line">  <span class="string">`min_stock`</span> </span><br><span class="line"></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'活动招商发布表'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (十三)：Hystrix--服务容错</title>
      <link href="/springcloud-hystrix-learning.html"/>
      <url>/springcloud-hystrix-learning.html</url>
      <content type="html"><![CDATA[<h1 id="前言">1. 前言</h1><h2 id="雪崩效应">1.1. 雪崩效应</h2><ol><li><p>雪崩效应：在微服务架构中，通常有多个微服层调用，如果某个服务不可用，导致调用故障，造成整个系统不可用的情况。  </p></li><li><p>比如A、B、C 三个微服务，A 服务调用 B 服务，B 服务调用 C 服务；  </p></li><li>如果 B 服务调用 C 服务由于某种原因失败，B 就会一直重试，<strong>同步等待</strong>会造成资源耗尽，结果 B 服务也不可用；  </li><li>而 A 调用已经不可用的 B，同时也会<strong>同步等待</strong>，最会 A、B、C 都不可用了，导致整个系统都不可用了！  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/89622682.jpg" alt=""></p><h2 id="Spring-Cloud-Hystrix">1.2. Spring Cloud Hystrix</h2><p>参考博客<a href="https://windmt.com/2018/04/15/spring-cloud-4-hystrix/" target="_blank" rel="noopener">服务容错保护 Hystrix【Finchley 版】</a>。  </p><ol><li><p><strong>防雪崩利器</strong>  </p></li><li><p><strong>基于 Netflix 对应的 Hystrix</strong> 实现的</p></li><li><p>微服务提供一切服务容错机制，雪崩防御机制</p></li></ol><h1 id="Hystrix功能">2. Hystrix功能</h1><h2 id="服务降级">2.1. 服务降级</h2><p>生活中常见比如双十一高峰时，显示”服务器开小差了”，秒杀时，显示”请稍后再试”。   </p><ol><li><p>优先核心服务，非核心服务<strong>不可用</strong>或<strong>弱可用</strong>  </p><blockquote><p>比如我们点餐项目，流量突然大量涌入，要保证核心业务商品、订单、支付服务可用；<br>其他比如广告、积分、红包等服务暂时不可用或部分可用。  </p></blockquote></li><li><p><strong>通过<code>HystrixCommand</code>注解指定</strong>  </p></li><li><p><strong><code>fallbackMethod</code>(回退函数)中具体实现降级逻辑</strong>  </p></li></ol><h3 id="异常回退">2.1.1. 异常回退</h3><p>下面主要为<code>order</code>项目中。  </p><ol><li><strong>pom.xml</strong>   <blockquote><p><code>order-server</code>子模块需要引入<code>spring-cloud-starter-netflix-hystrix</code>   </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>OrderApplication</strong>启动类  <blockquote><p>加入注解<code>@EnableHystrix</code>   </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = (<span class="string">"cn.hunter.product.client"</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>HystrixController.java</strong>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductInfoList"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductInfoList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(<span class="string">"http://127.0.0.1:8081/product/listForOrder"</span>,</span><br><span class="line">                Arrays.asList(<span class="string">"157875196366160022"</span>),</span><br><span class="line">                String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"太拥挤了，请稍后再试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>启动 eureka、config、api-gateway、product、order 服务。  </p></li><li><p><strong>访问：<a href="http://localhost:8082/getProductInfoList" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList</a></strong>  </p><blockquote><p>访问成功，返回数据！  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/331310.jpg" alt=""></p><ol start="6"><li>如果停掉<code>product</code>服务，再次访问 5 中 URL：</li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/15140993.jpg" alt=""></p><h3 id="默认回退方法">2.1.2. 默认回退方法</h3><ol><li>在方法上添加注解<code>@DefaultProperties(defaultFallback = &quot;defaultFallback&quot;)</code>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallback"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductInfoList"</span>)</span><br><span class="line"><span class="comment">//    @HystrixCommand(fallbackMethod = "fallback")</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductInfoList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(<span class="string">"http://127.0.0.1:8081/product/listForOrder"</span>,</span><br><span class="line">                Arrays.asList(<span class="string">"157875196366160022"</span>),</span><br><span class="line">                String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"太拥挤了，请稍后再试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">defaultFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"默认提示：太拥挤了，请稍后再试~~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>product</code>服务停止情况下，访问：<a href="http://localhost:8082/getProductInfoList" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList</a>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/89098486.jpg" alt=""></p><h3 id="服务超时时间">2.1.3. 服务超时时间</h3><p>根据具体业务考虑是否配置，当服务要访问外网，比如开户、提现、第三方支付等业务访问时间可能会比较长，需要合理设置。  </p><ol><li><strong>ProductController.java</strong>  <blockquote><p><code>product</code>项目，添加休眠时间，2 秒。  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取商品列表（远程订单服务调用）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productIdList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"listForOrder"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ProductInfo&gt; <span class="title">listForOrder</span><span class="params">(@RequestBody List&lt;String&gt; productIdList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000l</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> productService.findList(productIdList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>启动<code>product</code>服务，访问：<a href="http://localhost:8082/getProductInfoList" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList</a>  <blockquote><p>从下面步骤3可知道，默认超时时间为1秒，所以<code>order</code>服务会执行**回退方法<code></code>。   </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/49406597.jpg" alt=""></p><ol start="3"><li>配置超时时间  <blockquote><p>休眠2秒，我们设置超时时间3秒；<br>配置<code>execution.isolation.thread.timeoutInMilliseconds</code>  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/7051304.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallback"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductInfoList"</span>)</span><br><span class="line"><span class="comment">//    @HystrixCommand(fallbackMethod = "fallback")</span></span><br><span class="line">    <span class="comment">// 超时配置</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"3000"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductInfoList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(<span class="string">"http://127.0.0.1:8081/product/listForOrder"</span>,</span><br><span class="line">                Arrays.asList(<span class="string">"157875196366160022"</span>),</span><br><span class="line">                String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"太拥挤了，请稍后再试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">defaultFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"默认提示：太拥挤了，请稍后再试~~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>重新执行步骤2  <blockquote><p>成功返回数据！  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/92437976.jpg" alt=""></p><h2 id="依赖隔离">2.2. 依赖隔离</h2><p>参考博客<a href="http://blog.didispace.com/spring-cloud-starter-dalston-4-2/" target="_blank" rel="noopener">Spring Cloud构建微服务架构：服务容错保护（Hystrix依赖隔离）【Dalston版】</a>  </p><h3 id="特点">2.2.1. 特点</h3><ol><li><p>线程池隔离  </p><blockquote><p>为每一个<code>hystrixCommand</code>创建一个独立的线程池，这样就算某一个在<code>HystrixCommand</code>包装下的依赖服务出现延迟过高的情况，也只是对该依赖的服务调用产生影响，并不会拖慢其他服务。 </p></blockquote></li><li><p><strong>Hystrix 自动实现了依赖隔离</strong>  </p><blockquote><p>使用<code>HystrixCommand</code>将某个函数包装成 <strong>Hystrix 命令</strong>时，<strong>Hystrix 框架</strong> 就会自动为这个函数实现<strong>依赖隔离</strong>，所以依赖隔离、服务降级在使用时都是一体化实现的。<br>这样利用 Hystrix 实现服务容错保护在编程模型上非常方便。</p></blockquote></li></ol><h2 id="服务熔断">2.3. 服务熔断</h2><p>微服务和分布式中，必须考虑容错，一般有<strong>重试机制</strong>和<strong>断路器模式</strong>。   </p><p><strong>重试机制</strong>：对于预期的短暂故障，可以使用重试解决，第一次不成功，再试一次就成功了。  </p><p>接下来重点介绍<strong>断路器模式</strong>。   </p><h3 id="实战演练">2.3.1. 实战演练</h3><ol><li>去除超时设置，增加<strong>熔断参数配置</strong>   <blockquote><p>添加请求参数<code>number</code>，为偶数时，直接返回成功；为奇数是，请求<code>product</code>服务；<br>因为删除超时配置，而<code>product</code>服务仍然休眠 2 秒，所以，<code>number=奇数</code>时，总是跳转到<strong>回退函数</strong>，<strong>触发降级</strong>。  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallback"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductInfoList"</span>)</span><br><span class="line"><span class="comment">//    @HystrixCommand(fallbackMethod = "fallback")</span></span><br><span class="line">    <span class="comment">// 超时配置</span></span><br><span class="line"><span class="comment">//    @HystrixCommand(commandProperties = &#123;</span></span><br><span class="line"><span class="comment">//            @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "3000")</span></span><br><span class="line"><span class="comment">//    &#125;)</span></span><br><span class="line">    <span class="comment">// 熔断机制</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.enabled"</span>, value = <span class="string">"true"</span>),  <span class="comment">// 启动熔断</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.requestVolumeThreshold"</span>, value = <span class="string">"10"</span>),</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>, value = <span class="string">"10000"</span>),</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.errorThresholdPercentage"</span>, value = <span class="string">"60"</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductInfoList</span><span class="params">(@RequestParam(<span class="string">"number"</span>)</span> Integer number) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果偶数，请求直接返回成功</span></span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则，请求 Product 服务</span></span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(<span class="string">"http://127.0.0.1:8081/product/listForOrder"</span>,</span><br><span class="line">                Arrays.asList(<span class="string">"157875196366160022"</span>),</span><br><span class="line">                String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"太拥挤了，请稍后再试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">defaultFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"默认提示：太拥挤了，请稍后再试~~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>访问：<a href="http://localhost:8082/getProductInfoList?number=1" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList?number=1</a>  <blockquote><p>number=1 时，总是触发降级</p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/13374823.jpg" alt=""></p><ol start="3"><li>访问：<a href="http://localhost:8082/getProductInfoList?number=2" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList?number=2</a>  <blockquote><p>number=2 时，总是返回”success”  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/35952687.jpg" alt=""></p><ol start="4"><li><p>不断刷新访问：<a href="http://localhost:8082/getProductInfoList?number=1" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList?number=1</a>  </p><blockquote><p>根据上面代码设置的<code>@HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;60&quot;)</code>，降级访问<strong>60%</strong>后  </p></blockquote></li><li><p>再访问：<a href="http://localhost:8082/getProductInfoList?number=2" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList?number=2</a></p><blockquote><p>我们发现，number=2 时，也触发了降级  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/11743327.jpg" alt=""></p><h3 id="断路器模式">2.3.2. 断路器模式</h3><h4 id="定义">2.3.2.1. 定义</h4><p>对于长时间无法解决的故障问题，不断重试是无法解决的。<br><strong>断路器模式</strong>是将受保护的服务封装到可以监控的<strong>断路器对象</strong>里面，当故障达到一定的值，断路器就会“跳闸”，断路对象返回错误。  </p><ol><li>断路器模式设计状态机   <blockquote><p>参考博客<a href="http://blog.sina.com.cn/s/blog_72ef7bea0102vvsn.html" target="_blank" rel="noopener">断路器（CircuitBreaker）设计模式</a>  </p></blockquote></li></ol><blockquote><p>断路器三种状态：<strong>Closed(关闭)</strong>、<strong>Open(打开)</strong>、<strong>Half Open(半熔断)</strong>;<br>调用失败累计到达一定域值(或者一定比例)，就会启动熔断机制[open]，此时对服务都直接返回错误；<br>但设计了一个默认的<strong>时钟选项</strong>，到了这个时间后，就会进入<strong>半熔断</strong>状态，允许定量的服务请求，如果调用都成功或一定比例成功，则认为恢复了，就会关闭【close】熔断器；否则又回到【open】状态。</p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/43746997.jpg" alt=""></p><h4 id="重要参数">2.3.2.2. 重要参数</h4><p>从上面实战演示看到，熔断配置的三个重要参数  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(name = <span class="string">"circuitBreaker.requestVolumeThreshold"</span>, value = <span class="string">"10"</span>);</span><br><span class="line">(name = <span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>, value = <span class="string">"10000"</span>);</span><br><span class="line">(name = <span class="string">"circuitBreaker.errorThresholdPercentage"</span>, value = <span class="string">"60"</span>)</span><br></pre></td></tr></table></figure><ol><li><p><strong>CircuitBreaker：断路器</strong>  </p><blockquote><p>Martin Fowler 解释断路器：<a href="https://martinfowler.com/bliki/?CircuitBreaker.html" target="_blank" rel="noopener">https://martinfowler.com/bliki/?CircuitBreaker.html</a><br>原意是电路上的一种开关，比如保险丝，对电路本身来说，是一种保护机制，当电流过大时，如果不跳闸，就会烧毁电器。<br>回到微服务<code>Hystrix</code>中同理，当某个服务单元发生故障（电器短路），通过断路器故障监控（熔断保险丝），直接切断原来主逻辑电路。 就像上面实战内容里，<code>number=2</code>时，不断刷新，一直处于<strong>服务降级</strong>（电器短路）模式，当访问<code>number=1</code>时，也会发生<strong>服务降级</strong>。  </p></blockquote></li><li><p><strong>circuitBreaker.sleepWindowInMilliseconds</strong>  </p><blockquote><p>上一小结提到的<strong>时钟选项</strong>，达到默认的时间后，进入【半熔断】状态；<br>其中的<code>window</code>可以翻译成<strong>时间窗口</strong>，断路器确定是否需要打开统计一些请求和错误数据时，是有一个时间范围的，即<strong>时间窗口</strong>；<br>当断路器打开，对<strong>主逻辑</strong>进行熔断后，<code>Hystrix</code>会启动一个休眠时间窗，在这个时间窗内，<strong>降级逻辑</strong>会成为主逻辑；<br>休眠时间到期，断路器将会进入【半熔断】状态，释放一次请求到原来的<strong>主逻辑</strong>上，如果这次请求正常返回，断路器将进入【关闭】状态，主逻辑恢复，如果请求异常，断路器将继续进入【打开】状态，休眠时间窗重新计时；<br>在实战演练中，我们设定了<code>10000</code>ms，当休眠时间窗结束之后，断路器进入【half open半熔断】状态，尝试熔断请求命令，如果依然失败，断路器继续进入【open打开】状态，如果成功，就进入【closed关闭】状态。  </p></blockquote></li><li><p><strong>circuitBreaker.requestVolumeThreshold</strong>  </p><blockquote><p>设置在滚动时间窗口中，断路器的最小请求数。  </p></blockquote></li><li><p><strong>circuitBreaker.errorThresholdPercentage</strong>  </p><blockquote><p>设置断路器打开，启动服务熔断降级的错误百分比条件，表示在滚动时间窗口中，如果发生10次调用，其中有7次发生异常(70% &gt; 60%)，断路器就会进入【open打开】状态，否则【closed关闭】状态。  </p></blockquote></li></ol><h3 id="hystrix-参数配置文件化">2.3.3. hystrix 参数配置文件化</h3><p>之前都是在 java 方法上添加注解配置，不好管理，我们可以在<code>bootstrap.yml</code>配置文件里添加参数配置！  </p><ol><li><strong>bootstrap.yml</strong>  </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hystrix服务熔断超时配置</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="attr">    default:</span>  <span class="comment"># default：默认，可以指定特定方法key</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          thread:</span></span><br><span class="line"><span class="attr">            timeoutInMillisenconds:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">    getProductInfoList:</span></span><br><span class="line"><span class="attr">          execution:</span></span><br><span class="line"><span class="attr">            isolation:</span></span><br><span class="line"><span class="attr">              thread:</span></span><br><span class="line"><span class="attr">                timeoutInMillisenconds:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>HystrixController.java</strong>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallback"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductInfoList"</span>)</span><br><span class="line"><span class="comment">//    @HystrixCommand(fallbackMethod = "fallback")</span></span><br><span class="line">    <span class="comment">// 超时配置</span></span><br><span class="line"><span class="comment">//    @HystrixCommand(commandProperties = &#123;</span></span><br><span class="line"><span class="comment">//            @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "3000")</span></span><br><span class="line"><span class="comment">//    &#125;)</span></span><br><span class="line">    <span class="comment">// 熔断机制</span></span><br><span class="line">    <span class="comment">/*@HystrixCommand(commandProperties = &#123;</span></span><br><span class="line"><span class="comment">            @HystrixProperty(name = "circuitBreaker.enabled", value = "true"),  // 启动熔断</span></span><br><span class="line"><span class="comment">            @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "10"),</span></span><br><span class="line"><span class="comment">            @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds", value = "10000"),</span></span><br><span class="line"><span class="comment">            @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage", value = "60"),</span></span><br><span class="line"><span class="comment">    &#125;)*/</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductInfoList</span><span class="params">(@RequestParam(<span class="string">"number"</span>)</span> Integer number) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果偶数，请求直接返回成功</span></span><br><span class="line">        <span class="comment">/*if (number % 2 == 0) &#123;</span></span><br><span class="line"><span class="comment">            return "success";</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">// 否则，请求 Product 服务</span></span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(<span class="string">"http://127.0.0.1:8081/product/listForOrder"</span>,</span><br><span class="line">                Arrays.asList(<span class="string">"157875196366160022"</span>),</span><br><span class="line">                String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"太拥挤了，请稍后再试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">defaultFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"默认提示：太拥挤了，请稍后再试~~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>访问： <a href="http://localhost:8082/getProductInfoList?number=1" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList?number=1</a></strong>  <blockquote><p>犹豫<code>product</code>服务里设置休眠 2 秒，所以此处会触发熔断降级，调用<code>defaultFallback()</code>方法。  </p></blockquote></li></ol><h2 id="使用-Feign-Hystrix">2.4. 使用 Feign Hystrix</h2><p>因为熔断只是作用在服务调用这一端，比如<code>order</code>服务调用<code>product</code>服务。我们在<code>order</code>服务中开启 <strong>feign.hystrix</strong>。  </p><h3 id="product-服务">2.4.1. product 服务</h3><ol><li><strong>ProductClient.java</strong>  <blockquote><p>注解 <strong>FeignClient</strong>：添加<code>fallback</code>参数；<br>创建<strong>服务降级回调类</strong>：<strong>ProductClientFallback</strong>；  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient</span>(</span><br><span class="line">        name = <span class="string">"product"</span>,</span><br><span class="line">        fallback = ProductClient.ProductClientFallback.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/product/listForOrder"</span>)</span><br><span class="line">    <span class="function">List&lt;ProductInfoOutput&gt; <span class="title">listForOrder</span><span class="params">(@RequestBody List&lt;String&gt; productIdList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/product/decreaseStock"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decreaseStock</span><span class="params">(@RequestBody List&lt;DecreaseStockInput&gt; decreaseStockInputList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 功能描述: 服务降级回调类</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 作者: luohongquan</span></span><br><span class="line"><span class="comment">     * 日期: 2018/6/17 15:45</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Component</span>  <span class="comment">// 注解不要忘记</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductClientFallback</span> <span class="keyword">implements</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProductClientFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;ProductInfoOutput&gt; <span class="title">listForOrder</span><span class="params">(List&lt;String&gt; productIdList)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decreaseStock</span><span class="params">(List&lt;DecreaseStockInput&gt; decreaseStockInputList)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>mvn clean install -Dmaven.test.skip=true</strong>  <blockquote><p>因为<code>order</code>服务会依赖<code>product</code>的 <strong>feign client</strong>服务模块<code>product-client</code>。  </p></blockquote></li></ol><h3 id="order-服务">2.4.2. order 服务</h3><ol><li><strong>bootstrap.yml</strong>  </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># feign-hystrix的使用</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>OrderApplication.java</strong>  <blockquote><p>添加注解 <strong>@ComponentScan</strong>，否则报错，找不到<code>order</code>服务中的服务降级回调类。  </p></blockquote></li></ol><h3 id="测试">2.4.3. 测试</h3><ol><li><strong>OrderServiceImpl.java</strong>  <blockquote><p>在下面打断点，如果服务降级，执行自定义的回调函数，<strong>productInfoList</strong> 必为 <strong>null</strong>；  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/8215311.jpg" alt=""></p><ol start="2"><li>启动<code>order</code>服务，访问<strong>订单生成</strong>服务；  <blockquote><p>不管<code>product</code>服务启动或停止，都执行了回调，<strong>productInfoList</strong> 为 <strong>null</strong>；  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/83623064.jpg" alt=""></p><ol start="3"><li><strong>bootstrap.yml</strong>  <blockquote><p>注释掉上面的配置，重新启动order服务；<br>此时，<code>product</code>服务依然关闭，就不会执行回调方法。  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/8037604.jpg" alt=""></p><h2 id="Hystrix-监控面板-Hystrix-Dashboard">2.5. Hystrix 监控面板 (Hystrix Dashboard)</h2><p>hystrix的可视化组件！<br>参考博客：<a href="https://windmt.com/2018/04/16/spring-cloud-5-hystrix-dashboard/" target="_blank" rel="noopener">Spring Cloud（五）：Hystrix 监控面板【Finchley 版】</a>。  </p><h3 id="实战演练-1">2.5.1. 实战演练</h3><p><code>order</code>服务中。  </p><ol><li><strong>pom.xml</strong>  <blockquote><p><strong>order-server</strong>；<br>依赖<code>spring-boot-starter-actuator</code>：监控模块以开启监控相关的端点。  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>bootstrap.yml</strong>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">hystrix.stream</span></span><br></pre></td></tr></table></figure></li><li><p><strong>OrderApplication.java</strong>  </p><blockquote><p><strong>启动类</strong>添加注解<code>@EnableHystrixDashboard</code>，启动 Hystrix Dashboard 功能。<br>添加注解<code>@EnableHystrix</code>或<code>@EnableCircuitBreaker</code>开启断路器功能。  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"cn.hunter"</span>)</span><br><span class="line"><span class="comment">// @EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = (<span class="string">"cn.hunter.product.client"</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringCloud-Finchley-RC1-坑">2.5.2. SpringCloud [Finchley.RC1] 坑</h3><ol><li>hystrix dashboard Unable to connect to Command Metric Stream？  </li></ol><p>参考资料：<a href="https://hk.saowen.com/a/62b1a8707b602a4e669bbdcd422079fcaef6b8ec68442d3e278d775e6aa8a20c" target="_blank" rel="noopener">https://hk.saowen.com/a/62b1a8707b602a4e669bbdcd422079fcaef6b8ec68442d3e278d775e6aa8a20c</a>  </p><blockquote><p>Spring Boot 2.0版本需要在<strong>启动类</strong>添加ServletRegistrationBean，因为Spring Boot的默认路径不是<code>/hystrix.stream</code>。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/hystrix.stream"</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1">2.5.3. 测试</h3><p>测试环境恢复到<code>2.3.1</code>节内容，通过监控面板查看熔断状态！  </p><ol><li><p><code>order</code>启动后，访问：<a href="http://localhost:8082/hystrix" target="_blank" rel="noopener">http://localhost:8082/hystrix</a>  </p></li><li><p>Hystrix-Dashboard 设置<code>order</code>对应的监控地址及参数：<a href="http://localhost:8082/hystrix.stream" target="_blank" rel="noopener">http://localhost:8082/hystrix.stream</a>  </p></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/66326109.jpg" alt=""></p><blockquote><p>进入监控页面后，如果一直处于 <strong>loading</strong>状态，需要访问<code>order</code>的服务；<br>比如<a href="http://localhost:8082/getProductInfoList?number=1" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList?number=1</a>、<a href="http://localhost:8082/getProductInfoList?number=2" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList?number=2</a>  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/97963643.jpg" alt=""></p><ol start="3"><li><p>访问：<a href="http://localhost:8082/getProductInfoList?number=1" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList?number=1</a>  </p><blockquote><p>当<code>number=1</code>时，进行服务降级，降级的比例大于 <strong>60%</strong>时，开启熔断；<br>开启熔断后，之前<code>number=2</code>的正常的服务请求此时业务服务降级，调用回调方法。  </p></blockquote></li><li><p>使用 <strong>postman</strong>，设置 100 次请求  </p></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/77415967.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/86749981.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/19746636.jpg" alt=""></p><ol start="5"><li>观察 <strong>Hystrix-Dashboard</strong>  <blockquote><p>因为100次请求，每一次都调用服务降级回调方法，所以最后比例一定会大于 <strong>60%</strong>；<br>此时，断路器 <strong>Circuit</strong> 由<code>closed</code>变为<code>open</code>；<br>访问<a href="http://localhost:8082/getProductInfoList?number=2" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList?number=2</a>，之前正常返回 <strong>success</strong> 发生服务降级，返回了默认降级回调函数响应。  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/19394645.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/71754426.jpg" alt=""></p><ol start="6"><li>过一会后，再次请求<a href="http://localhost:8082/getProductInfoList?number=2" target="_blank" rel="noopener">http://localhost:8082/getProductInfoList?number=2</a>  <blockquote><p><strong>Hystrix-Dashboard</strong>上，因为比例小于 <strong>60%</strong>，Circuit<strong>又变回了 </strong>closed<strong>状态；<br>请求正常，返回 </strong>success**。  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-17/50362083.jpg" alt=""></p><h1 id="参考">3. 参考</h1><ol><li><a href="https://segmentfault.com/a/1190000014763791" target="_blank" rel="noopener">springCloud Finchley 微服务架构从入门到精通【七】断路器 Hystrix(ribbon)</a>  </li></ol>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Hystrix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (十二)：Zuul--服务网关 (2)</title>
      <link href="/springcloud-zuul-learning2.html"/>
      <url>/springcloud-zuul-learning2.html</url>
      <content type="html"><![CDATA[<p>上一篇初步了解并使用了 <strong>Zuul</strong> 的特点和基本功能，本章继续深入学习 <strong>Zuul</strong>的功能。<br>参考博客<a href="https://windmt.com/2018/04/23/spring-cloud-11-zuul-filter/" target="_blank" rel="noopener">服务网关 Zuul（过滤器）【Finchley 版】</a></p><h1 id="Pre-Post-过滤器">1. Pre Post 过滤器</h1><h2 id="实现功能">1.1. 实现功能</h2><ol><li>分析服务网关 <strong>Zuul</strong> 模块，可以看到所有请求都会经过 zuul，然后才到达服务 A、B、C；</li><li>现在对所有请求做<strong>权限校验</strong>，通过 <strong>Zuul</strong>，不必对 A、B、C 都进行校验；  </li><li>所以在 <strong>Zuul</strong>上对所有服务请求做<strong>统一权限校验</strong>。  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-8/74674982.jpg" alt=""></p><h2 id="Pre过滤器">1.2. Pre过滤器</h2><p>实现权限认证。  </p><ol><li><strong>TokenFilter.java</strong>  <blockquote><p>extends<code>ZuulFilter</code>；<br>这里只是简单判断<code>token</code>是否为空，你也可以与数据库对比，更详细的操作。    </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: Zuul 前置过滤器：参数校验</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/6/8 0008 9:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器顺序，数值越小，优先级越高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 减一，自定义的过滤器就会在PRE_DECORATION_FILTER_ORDER过滤器之前执行</span></span><br><span class="line">        <span class="keyword">return</span> PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从url参数里获取，也可以从cookie，header里获取</span></span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">            <span class="comment">// token为空，权限验证不通过</span></span><br><span class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 没有权限标识：401</span></span><br><span class="line">            requestContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>ApiGatewayApplication.java</strong>  <blockquote><p>启动类上加入以下代码；  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TokenFilter <span class="title">tokenFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TokenFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>启动<code>eureka</code>、<code>config</code>、<code>api-gateway</code>、<code>product</code>；  </li><li>访问：<a href="http://localhost:8082/myProduct/product/list" target="_blank" rel="noopener">http://localhost:8082/myProduct/product/list</a>  <blockquote><p>URL 后不加 **token”，报<code>401</code>权限认证失败错误。  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-8/2765235.jpg" alt=""></p><ol start="5"><li>访问：<a href="http://localhost:8082/myProduct/product/list?token=123456" target="_blank" rel="noopener">http://localhost:8082/myProduct/product/list?token=123456</a>  <blockquote><p>URL 后加上 **token”，成功获取数据！  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-8/6583713.jpg" alt=""></p><h2 id="Post-过滤器">1.3. Post 过滤器</h2><p>实现返回 <strong>Response</strong>时，添加自定义信息，比如头部 <strong>Header</strong>。  </p><ol><li><strong>AddResponseHeaderFilter.java</strong>  <blockquote><p>和上面<code>TokenFilter.java</code>一样步骤。  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: Zuul Post过滤器：返回自定义内容</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/6/8 0008 10:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddResponseHeaderFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> POST_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SEND_RESPONSE_FILTER_ORDER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回response头部添加自定义信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletResponse response = requestContext.getResponse();</span><br><span class="line">        response.setHeader(<span class="string">"X-Foo"</span>, UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>ApiGatewayApplication.java</strong>  <blockquote><p>启动类上加入以下代码；  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AddResponseHeaderFilter <span class="title">addResponseHeaderFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AddResponseHeaderFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>访问：<a href="http://localhost:8082/myProduct/product/list?token=123456" target="_blank" rel="noopener">http://localhost:8082/myProduct/product/list?token=123456</a>  <blockquote><p>Response Header 显示自定义头部信息！  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-8/8010409.jpg" alt=""></p><h1 id="Zuul：限流">2. Zuul：限流</h1><h2 id="限流分析">2.1. 限流分析</h2><p>因为所有网络请求都会经过服务网关 <strong>Zuul</strong>，在 <strong>Zuul</strong>上对 <strong>API</strong> 做 <code>限流保护</code>，防止网络攻击。<br>比如某个 API 是发短信的，需要限制客户端请求速率，从而在一定程度上抵御<strong>短信轰炸攻击</strong>，降低损失。   </p><ol><li><strong>时机</strong>：请求被转发之前调用   <blockquote><p><strong>限流保护</strong>功能实在<strong>前置过滤器</strong>中做的；<br>如果前置过滤器有多个操作，<strong>限流</strong>应该放到最前面的地方；<br>比如限流和鉴权，限流应该放在鉴权前面；  </p></blockquote></li></ol><h2 id="限流方案">2.2. 限流方案</h2><p><strong>漏桶</strong>和<strong>令牌桶</strong>算法，详情参考博客(<a href="https://www.cnblogs.com/LBSer/p/4083131.html)。" target="_blank" rel="noopener">https://www.cnblogs.com/LBSer/p/4083131.html)。</a>  </p><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-8/22408360.jpg" alt=""></p><h3 id="Guava-RateLimiter">2.2.1. Guava RateLimiter</h3><ol><li>github源码<a href="https://github.com/google/guava" target="_blank" rel="noopener">guava</a>  </li><li>采用<strong>令牌桶方案</strong>；  </li><li>参考博客：<a href="http://www.itmuch.com/spring-cloud-sum/spring-cloud-ratelimit/" target="_blank" rel="noopener">http://www.itmuch.com/spring-cloud-sum/spring-cloud-ratelimit/</a>  </li><li>参考博客：<a href="https://segmentfault.com/a/1190000012875897" target="_blank" rel="noopener">Guava RateLimiter源码解析</a>  </li></ol><h3 id="spring-cloud-zuul-ratelimit">2.2.2. spring-cloud-zuul-ratelimit</h3><ol><li>该组件并非 <strong>Spring Cloud</strong>官方的，而是个人写的；  </li><li>github 源码<a href="https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit" target="_blank" rel="noopener">spring-cloud-zuul-ratelimit</a>  </li><li>参考博客<a href="https://segmentfault.com/a/1190000012252677" target="_blank" rel="noopener">Zuul：构建高可用网关之多维度限流</a>  </li></ol><h2 id="实战">2.3. 实战</h2><p>使用 <strong>Guava RateLimiter</strong> 简单演示限流功能。  </p><ol><li><p><strong>RateLimitFilter.java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 令牌桶方案：限流</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/6/8 0008 11:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RateLimiter：谷歌开源令牌桶算法</span></span><br><span class="line">    <span class="comment">// 指定每秒100个令牌</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RateLimiter RATE_LIMITER = RateLimiter.create(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// SERVLET_DETECTION_FILTER_ORDER 优先级-3，限流优先级应该最小，所以 -1</span></span><br><span class="line">        <span class="keyword">return</span> SERVLET_DETECTION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 如果没有拿到令牌，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (!RATE_LIMITER.tryAcquire()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RateLimitException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 ab 压测工具进行测试  </p><blockquote><p>可以参考之前博客<a href="https://www.ddebug.cn/seconds-kill-distributed-lock.html">秒杀活动与分布式锁</a>简单上手使用;<br>下面命令为 1 秒钟发送 100 次请求。<br>这里只是简单模拟，测试，是否报异常 </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -t <span class="number">1</span> -c <span class="number">100</span> http:<span class="comment">//localhost:8082/myProduct/product/list?token=123456</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>api-gateway</code>console 上已经打印报错信息：  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-8/55147445.jpg" alt=""></p><h1 id="Zuul：权限校验">3. Zuul：权限校验</h1><ol><li>微服务架构下，多个微服务都需要对访问进行鉴权，每个微服务都需要明确当前访问的用户及其权限；  </li><li>在 <strong>Zuul</strong> 的前置过滤器里实现相关逻辑，是不错的方案   </li><li><p><strong>分布式 Session</strong> 和 <strong>Oauth2</strong>  </p><blockquote><p>在微服务框架中，多个微服务的无状态化，一般考虑的都是上面两种方案；<br>本点餐项目采用的是<strong>分布式 session</strong>，即将用户认证信息储存在共享存储中，且通常由<strong>用户会话</strong>作为 key 来实现简单的分布式 Hash 映射；<br>当用户访问微服务时，用户数据可以从共享储存中获取，用户登录状态是不透明的，同时也是高可用且扩展的方案。  </p></blockquote></li><li><p><strong>Oauth2</strong>  </p><blockquote><p>公司项目就是 <strong>Spring Security</strong> 和 <strong>Oauth2</strong>结合作为鉴权的。  </p></blockquote></li></ol><h2 id="项目实战">3.1. 项目实战</h2><p>下面结合之前学习的点餐项目学习！  </p><h3 id="用户登录功能">3.1.1. 用户登录功能</h3><h4 id="API-文档">3.1.1.1. API 文档</h4><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-8/75180955.jpg" alt=""></p><h4 id="用户表">3.1.1.2. 用户表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_info`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`openid`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'微信openid'</span>,</span><br><span class="line">  <span class="string">`role`</span> tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'1买家2卖家'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="keyword">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="新建-user-项目">3.1.1.3. 新建 user 项目</h4><ol><li>注意添加依赖  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-8/57631951.jpg" alt=""></p><ol start="2"><li>项目多模块化，参考之前博客<a href="https://www.ddebug.cn/springboot-multi-module-startup.html">Spring Cloud 实战 (六)：Spring Boot多模块化</a>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-11/95691334.jpg" alt=""></p><ol start="3"><li><strong>bootstrap.yml</strong>  </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">CONFIG</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="4"><li>远端git仓库：<strong>user-dev.yml</strong>  </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/SpringCloud_Sell?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h4 id="买家-卖家登录">3.1.1.4. 买家/卖家登录</h4><ol><li><strong>LoginController</strong>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卖家端登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> openid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/buyer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">buyer</span><span class="params">(@RequestParam(<span class="string">"openid"</span>)</span> String openid,</span></span><br><span class="line"><span class="function">                          HttpServletResponse response) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. openid 和数据库里的数据进行匹配</span></span><br><span class="line">        UserInfo userInfo = userService.findByOpenid(openid);</span><br><span class="line">        <span class="keyword">if</span> (userInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultVOUtil.error(ResultEnum.LOGIN_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 判断登录用户是否买家角色</span></span><br><span class="line">        <span class="keyword">if</span> (RoleEnum.BUYER.getCode() != userInfo.getRole()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultVOUtil.error(ResultEnum.ROLE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. cookie里设置openid=abc</span></span><br><span class="line">        CookieUtil.set(response, CookieConstant.OPENID, openid, CookieConstant.expire);</span><br><span class="line">        <span class="keyword">return</span> ResultVOUtil.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 买家端登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> openid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/seller"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">seller</span><span class="params">(@RequestParam(<span class="string">"openid"</span>)</span> String openid,</span></span><br><span class="line"><span class="function">                           HttpServletResponse response,</span></span><br><span class="line"><span class="function">                           HttpServletRequest request) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 判断是否已登录</span></span><br><span class="line">        Cookie cookie = CookieUtil.get(request, CookieConstant.TOKEN);</span><br><span class="line">        <span class="comment">// cookie不为空且redis存储token也不为空</span></span><br><span class="line">        <span class="keyword">if</span> (cookie != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                !StringUtils.isEmpty(stringRedisTemplate.opsForValue().get(String.format(RedisConstant.TOKEN_TEMPLATE, cookie.getValue())))) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultVOUtil.success();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. openid 和数据库里的数据进行匹配</span></span><br><span class="line">        UserInfo userInfo = userService.findByOpenid(openid);</span><br><span class="line">        <span class="keyword">if</span> (userInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultVOUtil.error(ResultEnum.LOGIN_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 判断登录用户是否卖家角色</span></span><br><span class="line">        <span class="keyword">if</span> (RoleEnum.SELLER.getCode() != userInfo.getRole()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultVOUtil.error(ResultEnum.ROLE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. redis 设置key=UUID, value=456</span></span><br><span class="line">        String token = UUID.randomUUID().toString();</span><br><span class="line">        Integer expire = CookieConstant.expire;</span><br><span class="line">        stringRedisTemplate.opsForValue()</span><br><span class="line">                .set(String.format(RedisConstant.TOKEN_TEMPLATE, token),</span><br><span class="line">                    openid,</span><br><span class="line">                    expire,</span><br><span class="line">                    TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. cookie里设置openid=abc</span></span><br><span class="line">        CookieUtil.set(response, CookieConstant.TOKEN, token, CookieConstant.expire);</span><br><span class="line">        <span class="keyword">return</span> ResultVOUtil.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现效果">3.2. 实现效果</h2><p>用户登陆后，根据Cookie信息判断是卖家还是买家。  </p><ol><li>买家、买家特征，买家和卖家登录时分别访问哪个服务；   </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  /order/create 只能买家访问(cookie里有openid)</span></span><br><span class="line"><span class="comment"> *  /order/finish 只能卖家访问(cookie里有token，并且对应的redis中值)</span></span><br><span class="line"><span class="comment"> *  /product/list 都可访问</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ol start="2"><li>首先访问<code>api-gateway</code>，再转发到<code>user</code>服务中去。  </li></ol><h2 id="Zuul-敏感头">3.3. Zuul 敏感头</h2><blockquote><p>添加配置<code>sensitive-headers</code>  </p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义路由</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment"># 全部服务忽略敏感头（全部服务都可以传递cookie）</span></span><br><span class="line"><span class="attr">  sensitive-headers:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    myProduct:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/myProduct/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">product</span></span><br><span class="line"><span class="comment">#     sensitiveHeaders:</span></span><br><span class="line">    <span class="comment"># 简介写法</span></span><br><span class="line"><span class="comment">#    product: /myProduct/**</span></span><br><span class="line">  <span class="comment"># 排除某些路由</span></span><br><span class="line"><span class="comment">#  ignored-patterns:</span></span><br><span class="line"><span class="comment">#    - /product/product/list</span></span><br><span class="line"><span class="comment">#    - /myProduct/product/list</span></span><br><span class="line"><span class="comment">#    - /**/product/listForOrder</span></span><br></pre></td></tr></table></figure><h3 id="api-gateway-代码">3.3.1. api-gateway 代码</h3><ol><li>AuthFilter.java  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 权限拦截filter：区分买家和卖家</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/6/8 0008 13:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  /order/create 只能买家访问(cookie里有openid)</span></span><br><span class="line"><span class="comment">         *  /order/finish 只能卖家访问(cookie里有token，并且对应的redis中值)</span></span><br><span class="line"><span class="comment">         *  /product/list 都可访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"/order/order/create"</span>.equals(request.getRequestURI())) &#123;</span><br><span class="line">            Cookie cookie = CookieUtil.get(request, <span class="string">"openid"</span>);</span><br><span class="line">            <span class="keyword">if</span> (cookie == <span class="keyword">null</span> || StringUtils.isEmpty(cookie.getValue())) &#123;</span><br><span class="line">                requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">                requestContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"/order/order/finish"</span>.equals(request.getRequestURI())) &#123;</span><br><span class="line">            Cookie cookie = CookieUtil.get(request, <span class="string">"token"</span>);</span><br><span class="line">            <span class="keyword">if</span> (cookie == <span class="keyword">null</span></span><br><span class="line">                    || StringUtils.isEmpty(cookie.getValue())</span><br><span class="line">                    || StringUtils.isEmpty(stringRedisTemplate.opsForValue().get(String.format(RedisConstant.TOKEN_TEMPLATE, cookie.getValue())))) &#123;</span><br><span class="line">                requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">                requestContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试访问">3.3.2. 测试访问</h3><p>区分买家、卖家靠登录时的 Cookie 信息。<br>买家登录时，Cookie 存储 <code>openid=abc</code>openid 信息；<br>卖家登录时，Cookie 存储 <code>token=xxx</code> token 信息，同时 Redis 存储了先关信息</p><ol><li>访问<strong>买家下单</strong>：<a href="http://localhost:9000/order/order/create" target="_blank" rel="noopener">http://localhost:9000/order/order/create</a>  <blockquote><p>注意在 <strong>Headers</strong> 添加 <strong>Cookie</strong>信息!    </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-10/87100972.jpg" alt=""></p><ol start="2"><li>访问<strong>卖家结单</strong>，先访问卖家登陆：<a href="http://localhost:9000/user/login/seller?openid=xyz" target="_blank" rel="noopener">http://localhost:9000/user/login/seller?openid=xyz</a>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-10/31819995.jpg" alt=""></p><ol start="2"><li>访问<strong>卖家结单</strong>：<a href="http://localhost:8082/order/finish" target="_blank" rel="noopener">http://localhost:8082/order/finish</a>  <blockquote><p>注意在 <strong>Headers</strong> 添加 Cookie 信息！  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-10/79859744.jpg" alt=""></p><h3 id="优化买家-卖家过滤">3.3.3. 优化买家/卖家过滤</h3><p>为了以后扩展性，我们可以分成买家过滤器 <strong>AuthBuyerFilter.java</strong>，卖家过滤器 <strong>AuthSellerFilter.java</strong>。  </p><ol><li><strong>AuthBuyerFilter.java</strong>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthBuyerFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断是否买家下订单链接，如果是，执行下面 run()方法，如果不是，直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"/order/order/create"</span>.equals(request.getRequestURI())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  /order/create 只能买家访问(cookie里有openid)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Cookie cookie = CookieUtil.get(request, <span class="string">"openid"</span>);</span><br><span class="line">        <span class="keyword">if</span> (cookie == <span class="keyword">null</span> || StringUtils.isEmpty(cookie.getValue())) &#123;</span><br><span class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            requestContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>AuthSellerFilter.java</strong>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthSellerFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"/order/order/finish"</span>.equals(request.getRequestURI())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  /order/finish 只能卖家访问(cookie里有token，并且对应的redis中值)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Cookie cookie = CookieUtil.get(request, <span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (cookie == <span class="keyword">null</span></span><br><span class="line">                || StringUtils.isEmpty(cookie.getValue())</span><br><span class="line">                || StringUtils.isEmpty(stringRedisTemplate.opsForValue().get(String.format(RedisConstant.TOKEN_TEMPLATE, cookie.getValue())))) &#123;</span><br><span class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            requestContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Zuul：跨域">4. Zuul：跨域</h1><h2 id="跨域问题">4.1. 跨域问题</h2><ol><li><p>浏览器的 Ajax 是有<strong>同源策略</strong>的，如果违反同源策略，就会产生<strong>跨域</strong>问题；  </p></li><li><p><strong>Zuul</strong> 作为 API 服务网关，可以处理跨域问题，Zuul 的跨域也可以看成 <strong>Spring</strong> 的跨域；  </p></li><li><p>第一种：<strong>在被调用的类或方法上增加<code>@CrossOrigin</code>注解</strong>；  </p><blockquote><p>增加注解，来声明支持跨域；<br>局限性：只支持类或方法，如果应用太多，非常麻烦。  </p></blockquote></li><li><p>第二种：<strong>在 Zuul 里增加<code>CorsFilter</code>过滤器</strong>；  </p><blockquote><p>此方案只增加在 API 网关上，对内部代码没有任何改造，解耦性。  </p></blockquote></li></ol><h2 id="CorsFilter-过滤器">4.2. CorsFilter 过滤器</h2><h3 id="Cors-含义">4.2.1. Cors 含义</h3><p>跨域资源共享！</p><ol><li>C: Cross  </li><li>O: Orign  </li><li>R: Resource</li><li>S: Sharing</li></ol><h3 id="CorsConfig">4.2.2. CorsConfig</h3><p>CorsFilter配置类！  </p><ol><li><strong>CorsConfig.java</strong>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 跨域配置</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/6/10 10:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        <span class="keyword">final</span> CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置是否支持Cookie跨域</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// list存放所有原始域，比如http:www.a.com，http:www.b.com</span></span><br><span class="line">        config.setAllowedOrigins(Arrays.asList(<span class="string">"*"</span>));</span><br><span class="line">        <span class="comment">// 允许所有头</span></span><br><span class="line">        config.setAllowedHeaders(Arrays.asList(<span class="string">"*"</span>));</span><br><span class="line">        <span class="comment">// 允许所有请求方法，比如get/post</span></span><br><span class="line">        config.setAllowedMethods(Arrays.asList(<span class="string">"*"</span>));</span><br><span class="line">        <span class="comment">// 缓存时间，在该时间段内，多次访问不会检查跨域问题</span></span><br><span class="line">        config.setMaxAge(<span class="number">300l</span>); <span class="comment">// 300秒</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// "/**": 对所有路径设置跨域处理</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>跨域问题基本上都是有前端 js 发起，这里就不测试了；  </li><li>处理跨域很多时候可以在 <code>nginx</code>中完成；  </li><li>想深入学习可以参考慕课网免费课程<a href="https://www.imooc.com/learn/947" target="_blank" rel="noopener">ajax跨域完全讲解</a>。  </li></ol>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Zuul </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (十二)：Zuul--服务网关 (1)</title>
      <link href="/springcloud-zuul-learning.html"/>
      <url>/springcloud-zuul-learning.html</url>
      <content type="html"><![CDATA[<p>上一篇学习了 Spring Cloud 组件 <code>Stream</code>和 RabbitMQ 结合异步通知发送消息；本篇介绍另一个组件<code>Zuul</code>：服务网关。  </p><h1 id="服务网关">1. 服务网关</h1><h2 id="为什么需要服务网关">1.1. 为什么需要服务网关</h2><ol><li>假如没有网关服务，启动十几个服务后，客户端需要和这十几个服务分别打交道，显然不现实，需要一个统一的 request 请求入口；  </li><li>充当上面入口的就是<strong>服务网关</strong>，所有请求都会通过它。  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/61016426.jpg" alt=""></p><h2 id="服务网关要素">1.2. 服务网关要素</h2><ol><li><p><strong>稳定性、高可用</strong>  </p><blockquote><p>因为所有请求都要经过服务网关，所以保证 7*24小时都可用，网关瘫痪，系统全挂，致命伤害。  </p></blockquote></li><li><p><strong>性能、并发性</strong>  </p><blockquote><p>所有请求都经过网关，压力巨大。  </p></blockquote></li><li><p><strong>安全性</strong>  </p><blockquote><p>确保服务安全，防止外部恶意访问。  </p></blockquote></li><li><p><strong>扩展性</strong>    </p><blockquote><p>所有请求都经过网关，理论上，网关是处理各种非业务功能的绝佳场所，如<strong>协议转发、防刷、流量管控、日志监控</strong>等等。  </p></blockquote></li></ol><h2 id="常见网关方案">1.3. 常见网关方案</h2><p>第一代 <strong>Zuul</strong> 性能上还不能和 <strong>Nginx</strong> 相比，据说第二代能相比，但还没有具体验证。  </p><ol><li><p><strong>Nginx + Lua</strong>  </p><blockquote><p>性能和高可用是 Nginx 傲视群雄的资本，先天的事件驱动型设计、全异步网络 IO 处理机制、极少的进程间切换以及许多优化设计都使得 Nginx 天生善于处理高并发请求；<br>扩展性上，本身被设计成由多个不同功能、不同层次、不同类型且耦合度极低的模块组成，当对某一个模块修复 bug 或升级时，其他模块不受影响。  </p></blockquote></li><li><p><strong>Kong</strong>  </p><blockquote><p><a href="https://getkong.org/" target="_blank" rel="noopener">Kong</a> 一款商业的 API 管理软件；<br>本身是基于上面 Nginx + Lua 实现的，但配置简单。  </p></blockquote></li><li><p><strong>Tyk</strong>  </p><blockquote><p><a href="https://tyk.io/" target="_blank" rel="noopener">Tyk</a> 是开源的、轻量级的、快速可伸缩的 API 网关；<br>支持配额和速度限制，支持认证和数据分析，支持多用户多组织,还提供全 Restful API;<br>Go 语言开发，Go 是 Google 的亲儿子，在并发编程上具有天然优势，在性能和扩展性上也非常不错。  </p></blockquote></li><li><p><strong>Spring Cloud Zuul</strong>  </p><blockquote><p>Zuul 是 Netflix 出品的一个基于 JVM 路由和服务端的负载均衡器，天生服务于微服务；<br>参考链接<a href="https://blog.csdn.net/xf1195718067/article/details/78637807" target="_blank" rel="noopener">https://blog.csdn.net/xf1195718067/article/details/78637807</a>；  </p></blockquote></li></ol><h3 id="Zuul">1.3.1. Zuul</h3><h3 id="Zuul-的特点">1.3.2. Zuul 的特点</h3><p>Zuul 相比 Nginx 优势不足，但是 Spring Cloud 完整生态构建服务体系的前置网关服务还是不错的选择。  </p><ol><li><p><strong>路由+过滤器 = Zuul</strong>    </p></li><li><p><strong>核心就是一系列的过滤器</strong>  </p><blockquote><p>Servlet 的过滤器 filter 都不陌生，Zuul实现服务网关的核心就是一系列的过滤器；<br>每一个进入 Zuul 的 Http 的请求都会经过这一列过滤器，处理之后，得到响应并返回给客户端； </p></blockquote></li></ol><h3 id="Zuul-的四种过滤器-API">1.3.3. Zuul 的四种过滤器 API</h3><ol><li><p><strong>前置(Pre)</strong>  </p><blockquote><p>典型应用场景：可以<strong>限流</strong>，流量过大时，依据某些规则，可以把请求挡回去，后续逻辑就不再处理了；<br>可以<strong>鉴权</strong>，如果我们有三个服务，如果每个服务都要鉴权一次，非常麻烦，我们可以把鉴权的逻辑写到前置过滤器中；<br>可以<strong>参数校验调整</strong>；等等  </p></blockquote></li><li><p><strong>后置(Post)</strong>  </p><blockquote><p>统计：对象、时间等；<br>日志：记录；  </p></blockquote></li><li><p><strong>路由(Route)</strong>  </p></li><li><strong>错误(Error)</strong>  </li></ol><h3 id="Zuul-架构图">1.3.4. Zuul 架构图</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/78393182.jpg" alt=""></p><h3 id="请求生命周期">1.3.5. 请求生命周期</h3><ol><li>一次 HTTP Request 请求的生命周期;  </li><li>下图中间灰色部分都是 zuul 的各种过滤器，Origin Server 就是我们的服务，比如 <strong>product</strong>、<strong>order</strong>；  </li><li>“custom” filters ：我们可以自定义的过滤器。  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/24258310.jpg" alt=""></p><h3 id="Zuul的高可用">1.3.6. Zuul的高可用</h3><p>所有的请求都要经过 Zuul，所以生产环境中我们都会部署多台 Zuul，以避免<strong>单点故障</strong>。  </p><ol><li><p><strong>多个 Zuul 节点注册到 Eureka Server</strong>  </p><blockquote><p>可以把 Zuul 当成普通服务注册到 Eureka 上；<br>此时 Zuul 的高可用和其他的服务比如之前已经介绍过的 config-server、order 的高可用没有什么区别；<br>微服务系统内部调用时，A 服务可以调用到某个 Zuul 服务，再通过它转发到 B 服务；<br>对于外部调用，我们可以使用下面混搭方式。  </p></blockquote></li><li><p><strong>Nginx 和 Zuul “混搭”方式</strong>  </p><blockquote><p>使用 Nginx 对外暴露一个 URL，Nginx 把请求转发到多个 Zuul服务上；<br>Nginx 继续做负载均衡，从而做到 Nginx 和 Zuul 的取长补短；</p></blockquote></li></ol><h2 id="点餐项目分析">1.4. 点餐项目分析</h2><p>既然上面提到 <strong>Zuul</strong> 性能还不能和 <strong>Nginx</strong> 相比，为什么使用？如何使用呢？</p><h3 id="项目改造">1.4.1. 项目改造</h3><ol><li>灵活使用技术，学会混搭；  </li><li>原来我们的点餐项目是 Nginx 在前，Tomcat 在后，Nginx 做了负载均衡和反向代理；  </li><li>现在我们依然让 Nginx 发挥负载均衡和反向代理优势，后面的 Tomcat 换成 Zuul;  </li><li>而Zuul 发挥自己的优势。  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/99358170.jpg" alt=""></p><h1 id="Zuul-实战">2. Zuul 实战</h1><h2 id="初始化-api-gateway-项目">2.1. 初始化 api-gateway 项目</h2><ol><li><strong>新建<code>api-gateway</code>项目</strong>  <blockquote><p>选择下面三种配置  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/67071377.jpg" alt=""></p><ol start="2"><li><strong>pom.xml</strong>  <blockquote><p>更改 boot、Cloud 版本  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RC1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>ApiGatewayApplication.java</strong>  <blockquote><p>添加注解<code>@EnableZuulProxy</code>  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiGatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ApiGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Zuul-基本功能">2.2. Zuul 基本功能</h2><h3 id="Zuul-转发功能">2.2.1. Zuul 转发功能</h3><p>现在实现转发非常简单，添加依赖和在启动类上添加注解，但是弊端也很明显，第四条必须遵守特定的访问路径规则。  </p><ol><li>docker启动<code>rabbitmq</code>、<code>redis</code>;  </li><li>运行<code>eureka</code>、<code>product</code>、<code>config</code>、<code>order</code>、<code>api-gateway</code>服务； </li><li>测试<code>product</code>get 请求：<a href="http://localhost:8080/product/list" target="_blank" rel="noopener">http://localhost:8080/product/list</a>  <blockquote><p>成功请求数据！  </p></blockquote></li><li>测试<code>api-gateway</code>，请求：<a href="http://localhost:8082/product/product/list" target="_blank" rel="noopener">http://localhost:8082/product/product/list</a>  <blockquote><p>第一个 <strong>product</strong>为注册到 <strong>eureka</strong>上的服务名称！<br>成功请求数据！  </p></blockquote></li></ol><h3 id="自定义路由">2.2.2. 自定义路由</h3><ol><li><strong>bootstrap.yml</strong>  <blockquote><p>serviceId：注册的服务名称  </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义路由</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    myProduct:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/myProduct/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">product</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>再次访问：<a href="http://localhost:8082/myProduct/product/list" target="_blank" rel="noopener">http://localhost:8082/myProduct/product/list</a>  </p><blockquote><p>成功请求数据！<br>发现其实访问默认：<a href="http://localhost:8082/product/product/list" target="_blank" rel="noopener">http://localhost:8082/product/product/list</a> 也是成功的！  </p></blockquote></li><li><p>查看路由规则路径  </p><blockquote><p><code>api-gateway</code>启动时，并执行一次路由转发访问后，打印到 console 上  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/34331428.jpg" alt=""></p><ol start="4"><li>1 中的配置也可以简写成下面形式：  </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义路由</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    product:</span> <span class="string">/myProduct/**</span></span><br></pre></td></tr></table></figure><h3 id="排除路由">2.2.3. 排除路由</h3><p>当我们不想让用户访问<code>product</code>服务的某些接口时，我们可以排除路由。  </p><ol><li><strong>pom.xml</strong>  </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 排除某些路由</span></span><br><span class="line"><span class="attr">  ignored-patterns:</span></span><br><span class="line"><span class="comment">#    - /product/product/list</span></span><br><span class="line"><span class="comment">#    - /myProduct/product/list</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/**/product/listForOrder</span></span><br></pre></td></tr></table></figure><ol start="2"><li>访问：<a href="http://localhost:8082/product/product/list、http://localhost:8082/myProduct/product/list" target="_blank" rel="noopener">http://localhost:8082/product/product/list、http://localhost:8082/myProduct/product/list</a>  <blockquote><p>报<code>404</code>错误，无法访问！  </p></blockquote></li></ol><h2 id="Zuul-传递-Cookie">2.3. Zuul 传递 Cookie</h2><p>我们在开发 <strong>Web</strong> 项目是，经常会使用到 <strong>Cookie</strong>，Cookie 需传递到后端，但是使用 <strong>Zuul</strong>组件后，Cookie是无法传递过去的！  </p><h3 id="测试是否拿到-Cookie">2.3.1. 测试是否拿到  Cookie</h3><ol><li>手动设置 Cookie  <blockquote><p>访问 <a href="http://localhost:8082/myProduct/product/list；" target="_blank" rel="noopener">http://localhost:8082/myProduct/product/list；</a><br>F12下，<code>document.cookie=&#39;openid=abc123456&#39;</code>  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/91069339.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/2591488.jpg" alt=""></p><ol start="2"><li>/product/list 接口上断点  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/5465613.jpg" alt=""></p><ol start="3"><li>重新访问第 1 步中路径，查看后台是否拿到 Cookie 信息  <blockquote><p>发现为空！经过 <strong>Zuul</strong>路由转发后 Cookie 无法传递！  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/84204254.jpg" alt=""></p><h3 id="传递Cookie">2.3.2. 传递Cookie</h3><ol><li><strong>bootstrap.yml</strong>  <blockquote><p>添加<code>sensitiveHeaders</code>  </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义路由</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    myProduct:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/myProduct/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">product</span></span><br><span class="line"><span class="attr">      sensitiveHeaders:</span></span><br></pre></td></tr></table></figure><ol start="2"><li>重新执行上一小节内容  <blockquote><p>成功获取 <strong>Cookie</strong>  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/26717776.jpg" alt=""></p><h3 id="Zuul-动态路由">2.3.3. Zuul 动态路由</h3><p>动态路由即动态配置，之前在 <a href="https://www.ddebug.cn/springcloud-config-center-learning.html">Spring Cloud实战 (九)：config–统一配置中心组件</a>一章中已经讲过。  </p><ol><li><strong>api-gateway-dev.yml</strong>  <blockquote><p>github 远端仓库 <a href="https://github.com/Hunterfish/config-repo" target="_blank" rel="noopener">config-repo</a>新建文件；<br><code>api-gateway</code>项目中<code>bootstrap.yml</code>部分配置文件移到上述新建文件中。  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/76666259.jpg" alt=""></p><ol start="2"><li><strong>ZuulConfig.java</strong>  <blockquote><p>当我们在 git 远端仓库<code>config-repo</code>修改配置文件后，后端也要同时动态修改  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 配置动态注入</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/6/7 0007 16:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"zuul"</span>)</span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulProperties <span class="title">zuulProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulProperties();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>当然，如果你不执行第2步，也可以直接在 <strong>ApiGatewayApplication.java</strong> 中配置   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiGatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ApiGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"zuul"</span>)</span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulProperties <span class="title">zuulProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulProperties();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Zuul </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 基础篇 (二)：Docker 环境下安装 Redis</title>
      <link href="/springcloud-docker-install-redis.html"/>
      <url>/springcloud-docker-install-redis.html</url>
      <content type="html"><![CDATA[<h1 id="Redis">1. Redis</h1><p>在Docker中安装Redis，Docker可以参考<a href="https://www.ddebug.cn/springcloud-docker-devops.html#more">微服务、容器Docker和DevOps</a>。  </p><h2 id="下载">1.1. 下载</h2><ol><li><a href="https://hub.docker.com/_/redis/" target="_blank" rel="noopener">Docker版本官网下载地址</a>   </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/22499339.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/86926513.jpg" alt=""></p><h2 id="安装运行">1.2. 安装运行</h2><ol><li><strong>docker命令：</strong>   </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 6379:6379 redis:4.0.8</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/10579186.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (十一)：Stream--消息驱动组件</title>
      <link href="/springcloud-stream-learning.html"/>
      <url>/springcloud-stream-learning.html</url>
      <content type="html"><![CDATA[<p>上一篇文章主要介绍了消息总线，本篇文章介绍 Spring Cloud 组件<code>Stream</code>，结合点餐项目中<code>订单服务</code>和<code>商品服务</code>的下订单减库存业务，使用<code>RabbitMQ</code>异步通知。  </p><h1 id="Stream-组件简介">1. Stream 组件简介</h1><p>操作消息队列的一种方法，是 Spring Cloud 的一种组件之一，<strong>为微服务应用构建消息驱动能力的框架</strong>。  </p><h2 id="分析">1.1. 分析</h2><ol><li>应用程序通过<code>inputs</code>或者<code>outputs</code>来与<code>Stream</code>中的<code>Binder</code>交互；  </li><li>而<code>Binder</code>来与<code>Middleware</code>中间件交互；  </li><li><code>Binder</code>是<code>Stream</code>的一种抽象概念，是应用与消息中间件的粘合剂（binder中文就是这个意思）；  </li><li>使用<code>Stream</code>最大的方便之处就是：对消息中间件的进一步封装，可以做到代码层面对中间件的无感知，甚至于动态的切换中间件，切换 Topic;  </li><li><code>Stream</code>局限：目前的<code>Binder</code>只支持<code>RabbitMQ</code>和<code>Kafka</code>这两种。  </li></ol><p><img src="1" alt=""></p><h1 id="实战使用">2. 实战使用</h1><p>参考博客<a href="https://blog.csdn.net/mrspirit/article/details/80574164" target="_blank" rel="noopener">Spring Cloud整合RabbitMQ或Kafka消息驱动(二十二)</a>  </p><h2 id="点餐业务中使用-RabbitMQ">2.1. 点餐业务中使用  RabbitMQ</h2><ul><li>在<strong>商品服务</strong>和<strong>订单服务</strong>中使用MQ；  </li><li><strong>商品服务</strong>一旦有库存变化，就会发布消息，<strong>订单服务</strong>接收到消息后，会把库存的数据记录到自己的服务里，这里我们把数据存到<code>redis</code>里；  </li><li>导致库存变化的情形有第一次商品上架、商品卖完补货、下订单时等等；  </li><li>下面演练当<strong>商品服务</strong>扣库存时使用MQ消息。  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-30/23312725.jpg" alt=""></p><h2 id="安装运行-Redis">2.2. 安装运行 Redis</h2><p>参考<a href="">Spring Cloud 基础篇 (二)：Docker 环境下安装 Redis</a></p><h2 id="product">2.3. product</h2><h3 id="product-初始化">2.3.1. product 初始化</h3><blockquote><p>之前学习<code>config</code>、<code>bus</code>组件都是在<strong>订单服务</strong> order 中实现的，现在在<strong>商品服务</strong> product 中添加 <code>config</code>、<code>bus</code>组件。  </p></blockquote><ol><li><strong>pom.xml</strong>  <blockquote><p>product 的 server 子模块  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hunter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>product-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>bootstrap.yml</strong>  <blockquote><p>server 子模块  </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">product</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">CONFIG</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="添加-MQ-消息队列">2.3.2. 添加 MQ 消息队列</h3><ol><li><p><strong>pom.xml</strong>  </p><blockquote><p>上一小节已将添加，<code>spring-cloud-starter-stream-rabbit</code>stream rabbitmq 依赖。  </p></blockquote></li><li><p><strong>ProductServiceImpl.java</strong>  </p><blockquote><p>注入 <strong>AmqpTemplate</strong>;<br>添加消息队列名<code>productInfo</code>;<br>Lambda表达式学习使用！！  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductInfoRepository productInfoRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ProductInfo&gt; <span class="title">findUpAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productInfoRepository.findByProductStatus(ProductStatusEnum.UP.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ProductInfo&gt; <span class="title">findList</span><span class="params">(List&lt;String&gt; productIdList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productInfoRepository.findByProductIdIn(productIdList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decreaseStock</span><span class="params">(List&lt;DecreaseStockInput&gt; decreaseStockInputList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;ProductInfo&gt; productInfoList = decreaseStockProcess(decreaseStockInputList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送mq消息：扣库存</span></span><br><span class="line">        List&lt;ProductInfoOutput&gt; productInfoOutputList = productInfoList.stream().map(e -&gt; &#123;</span><br><span class="line">            ProductInfoOutput output = <span class="keyword">new</span> ProductInfoOutput();</span><br><span class="line">            BeanUtils.copyProperties(e, output);</span><br><span class="line">            <span class="keyword">return</span> output;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"productInfo"</span>, JsonUtil.toJson(productInfoOutputList));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ProductInfo&gt; <span class="title">decreaseStockProcess</span><span class="params">(List&lt;DecreaseStockInput&gt; DecreaseStockInputList)</span> </span>&#123;</span><br><span class="line">        List&lt;ProductInfo&gt; productInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (DecreaseStockInput cartDTO : DecreaseStockInputList) &#123;</span><br><span class="line">            Optional&lt;ProductInfo&gt; productInfoOptional = productInfoRepository.findById(cartDTO.getProductId());</span><br><span class="line">            <span class="comment">// 判断商品是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (!productInfoOptional.isPresent()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ProductException(ResultEnum.PRODUCT_NOT_EXIST);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断商品库存是否足够</span></span><br><span class="line">            ProductInfo productInfo = productInfoOptional.get();</span><br><span class="line">            Integer result = productInfo.getProductStock() - cartDTO.getProductQuantity();</span><br><span class="line">            <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ProductException(ResultEnum.PRODUCT_STOCK_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">            productInfo.setProductStock(result);</span><br><span class="line">            productInfoRepository.save(productInfo);</span><br><span class="line">            productInfoList.add(productInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> productInfoList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="order">2.4. order</h2><ol><li><strong>pom.xml</strong>  <blockquote><p>server子模块引入 redis 依赖<code>spring-boot-starter-data-redis</code>  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>order-dev.yml</strong>  <blockquote><p>github 远端<code>config-server</code>git 仓库添加redis配置信息    </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/SpringCloud_Sell?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">jpa:</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol><li><strong>ProductInfoReceiver.java</strong>  <blockquote><p>接收商品服务 mq 消息；  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductInfoReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRODUCT_STOCK_TEMPLATE = <span class="string">"product_stock_%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queuesToDeclare = <span class="meta">@Queue</span>(<span class="string">"productInfo"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// message =&gt; ProductInfoOutput</span></span><br><span class="line">        List&lt;ProductInfoOutput&gt; productInfoOutputList = (List&lt;ProductInfoOutput&gt;)JsonUtil.fromJson(message,</span><br><span class="line">                <span class="keyword">new</span> TypeReference&lt;List&lt;ProductInfoOutput&gt;&gt;() &#123;&#125;);</span><br><span class="line">        log.info(<span class="string">"从队列【&#123;&#125;】接收到的消息：&#123;&#125;"</span>, <span class="string">"productInfo"</span>, productInfoOutputList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消息存储到redis中</span></span><br><span class="line">        <span class="keyword">for</span> (ProductInfoOutput productInfoOutput : productInfoOutputList) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(String.format(PRODUCT_STOCK_TEMPLATE, productInfoOutput.getProductId()),</span><br><span class="line">                    String.valueOf(productInfoOutput.getProductStock()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试">2.5. 测试</h2><ol><li><p>docker 运行<code>rabbitmq</code>、<code>redis</code></p></li><li><p>运行<code>eureka</code>、<code>config</code>、<code>product</code>、<code>order</code>服务；  </p></li><li><p><code>postman</code>发送<strong>减库存</strong> post 请求  </p></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/51640506.jpg" alt=""></p><ol start="4"><li>登陆 RabbitMQ 控制面板 <a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/22385442.jpg" alt=""></p><ol start="5"><li><code>order</code>控制台打印输出信息    </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">07.500</span>  INFO <span class="number">12052</span> --- [cTaskExecutor-<span class="number">1</span>] c.h.order.message.ProductInfoReceiver    : 从队列【productInfo】接收到的消息：[ProductInfoOutput(productId=<span class="number">157875196366160022</span>, productName=皮蛋粥, productPrice=<span class="number">0.01</span>, productStock=<span class="number">26</span>, productDescription=好吃的皮蛋粥, productIcon=<span class="comment">//fuss10.elemecdn.com/0/49/65d10ef215d3c770ebb2b5ea962a7jpeg.jpeg, productStatus=0, categoryType=1)]</span></span><br></pre></td></tr></table></figure><ol start="6"><li>Redis 存储库存数据  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-7/18484580.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 基础篇 (一)：Docker 环境下安装 RabbitMQ</title>
      <link href="/springcloud-docker-install-rabbitmq.html"/>
      <url>/springcloud-docker-install-rabbitmq.html</url>
      <content type="html"><![CDATA[<h1 id="RabbitMQ">1. RabbitMQ</h1><p>在Docker中安装RabbitMQ，Docker可以参考<a href="https://www.ddebug.cn/springcloud-docker-devops.html#more">微服务、容器Docker和DevOps</a>。  </p><h2 id="下载">1.1. 下载</h2><ol><li><a href="https://hub.docker.com/_/rabbitmq/" target="_blank" rel="noopener">Docker版本官网下载地址</a>  </li><li><strong>注意事项</strong><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-31/84358853.jpg" alt=""></li></ol><h2 id="安装运行">1.2. 安装运行</h2><ol><li><strong>docker命令：</strong> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --hostname my-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3.7.5-management</span><br></pre></td></tr></table></figure></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-31/38308950.jpg" alt=""></p><ol start="2"><li><strong>docker ps查看</strong>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-6/95321892.jpg" alt=""></p><ol start="3"><li>访问管理界面<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-31/13026009.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (十)：bus--消息总线组件</title>
      <link href="/springcloud-bus-learning.html"/>
      <url>/springcloud-bus-learning.html</url>
      <content type="html"><![CDATA[<h1 id="Spring-Cloud-Bus动态刷新配置">1. Spring Cloud Bus动态刷新配置</h1><h2 id="原理分析">1.1. 原理分析</h2><p>参考博客<a href="https://windmt.com/2018/04/19/spring-cloud-9-config-eureka-bus/" target="_blank" rel="noopener">配置中心(消息总线)【Finchley 版】</a>  </p><ol><li><strong>config-server</strong> 从远端git拉取配置文件存到本地，同时提供对外的服务；  </li><li><strong>order</strong> 服务启动时，访问 <strong>config-server</strong>，读取配置；  </li><li><strong>order</strong> 启动后，在修改 <strong>config-server</strong> 配置，order 读取过的配置不会变了；  </li><li><strong>config-server</strong> 会通知 <strong>order</strong> 服务更新配置文件，通过<code>rabbitmq</code>消息队列传递信息；    </li><li>Spring Cloud 微服务中使用 <code>SpringCloud Bus</code> 消息总线组件操作消息队列；    </li><li><strong>config-server</strong> 使用 <code>Bus</code> 组件后，对外提供一个Http接口 <code>/bus-refresh</code>；  </li><li><strong>远端git</strong> 访问该接口，<strong>config-server</strong> 就会把更新配置信息发送到mq中；  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/30523127.jpg" alt=""></p><h2 id="实战操作">1.2. 实战操作</h2><h3 id="服务端-config-server">1.2.1. 服务端 config-server</h3><ol><li><strong>pom.xml</strong>  <blockquote><p>引入bus依赖<code>spring-cloud-bus</code><br>下面4个依赖是必须的  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-bus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>application.yml</strong>   <blockquote><p>暴露<strong>bus-refresh</strong>接口  </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/ddebug/config-repos</span></span><br><span class="line"><span class="attr">          username:</span> <span class="string">ddebug</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">lhq19931201</span></span><br><span class="line">          <span class="comment"># 拉取远程git端配置文件到本地位置</span></span><br><span class="line"><span class="attr">          basedir:</span> <span class="attr">E:\basedir</span></span><br><span class="line"><span class="attr">    bus:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      trace:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">bus-refresh</span></span><br></pre></td></tr></table></figure><h3 id="客户端-Order服务">1.2.2. 客户端-Order服务</h3><ol><li><strong>install 【product】 服务</strong>  <blockquote><p>因为 <strong>order</strong> 依赖了 <strong>product</strong> 子模块 <strong>product-client</strong><br>不要忘了修改 <strong>product</strong> <code>springboot</code>、<code>springcloud</code>版本  </p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Dmaven.test.skip=true clean install</span><br></pre></td></tr></table></figure><ol start="2"><li>pom.xml【server子模块】  <blockquote><p>引入bus依赖 <code>spring-cloud-bus</code><br>前五个是必须的  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-bus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>application.yml</strong>  <blockquote><p>在服务端 <strong>config</strong> 和客户端 <strong>order</strong> 都暴露了<code>bus-refresh</code>端口  </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">order</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    bus:</span></span><br><span class="line"><span class="attr">      trace:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">bus-refresh</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>bootstrap.yml</strong>  </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">order</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">      lable:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span>   <span class="comment"># 开启config服务发现支持</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">config-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>EnvController.java</strong>  <blockquote><p>添加注解 <code>@RefreshScope</code><br>测试获取从服务端 <strong>config</strong> 获取远端仓库 <strong>config-repos</strong> 配置文件  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/env"</span>)</span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnvController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;env&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/print"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> env;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试">1.2.3. 测试</h3><p>首先启动docker中的rabbitmq，参考之前博客<a href="https://www.ddebug.cn/springcloud-rabbitmq-async-message.html#more">Spring Cloud 实战 (七)：使用RabbitMQ实现服务间异步消息调用</a>    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --hostname my-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3.7.5-management</span><br></pre></td></tr></table></figure><ol><li><strong>启动服务</strong>  <blockquote><p>分别启动 <strong>eureka</strong>、<strong>config</strong>、和两个 <strong>order</strong>  </p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 打包 order</span><br><span class="line">mvn clean package -Dmaven.test.skip=true</span><br><span class="line">java -jar order-server-0.0.1-SNAPSHOT.jar --server.port=8081</span><br><span class="line">java -jar order-server-0.0.1-SNAPSHOT.jar --server.port=8082</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Rabbit中心 <a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a></strong>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/92111033.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/79806051.jpg" alt=""></p><ol start="3"><li><strong>访问</strong><a href="htp://localhost:8081/env/print" target="_blank" rel="noopener">htp://localhost:8081/env/print</a>、<a href="http://localhost:9081/env/print" target="_blank" rel="noopener">http://localhost:9081/env/print</a>    <blockquote><p>返回内容都是dev  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/72735464.jpg" alt=""></p><ol start="4"><li><p>git 仓库 <code>config-repos</code> order-dev.yml 修改 <code>env: dev2</code>  </p></li><li><p>执行<code>curl -X POST http://localhost:8888/actuator/bus-refresh</code>  </p></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/1104392.jpg" alt=""></p><ol start="6"><li>再次访问 3 中的链接，返回 dev2  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/29048362.jpg" alt=""></p><ol start="7"><li>同时config、order的控制台console产生了刷新接口相应的日志  </li></ol><h3 id="RefreshScope-进阶">1.2.4. @RefreshScope 进阶</h3><p>上面我们获取远端 git 仓库配置文件都是在 <strong>controller</strong> 中添加注解 <code>@RefreshScope</code> ，我们也可以专门写一个配置类，独立起来  </p><ol><li><strong>order-dev.yml</strong> 添加配置  <blockquote><p>远端 git 仓库 <code>config-repos</code>  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/98084809.jpg" alt=""></p><ol start="2"><li><strong>order</strong> 新建 <strong>GirlConfig.java</strong>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"girl"</span>)</span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>order</strong> 新建 <strong>GirlController.java</strong>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GirlConfig girlConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/girl/print"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name:"</span> + girlConfig.getName() + <span class="string">" age:"</span> + girlConfig.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>重启 order</strong>  <blockquote><p>访问<a href="http://localhost:8081/girl/print" target="_blank" rel="noopener">http://localhost:8081/girl/print</a>  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/94067207.jpg" alt=""></p><h2 id="WebHooks">1.3. WebHooks</h2><p>上面我们改完配置，都是在命令行执行<code>curl -X POST http://localhost:8888/actuator/bus-refresh</code>，然后重新自动获取配置。<br>我们可以使用<strong>码云</strong>或<strong>github</strong>的WebHooks，当执行push操作后，会自动执行刷新命令。  </p><ol><li><p>远端 git 仓库<strong>码云</strong>替换成 <strong>github</strong>  </p><blockquote><p>使用码云失败，可能有 bug，github 成功的  </p></blockquote></li><li><p>更改<code>config</code>中远端 git 地址  </p><blockquote><p>换成github的  </p></blockquote></li><li><p>内网穿透地址：<a href="http://springcloud.ngrok.xiaomiqiu.cn/" target="_blank" rel="noopener">http://springcloud.ngrok.xiaomiqiu.cn/</a>  </p><blockquote><p>WebHooks 设置链接不能使用 localhost 了，必须使用外网能访问的域名；<br>可以使用<a href="http://ngrok.ciqiuwl.cn/" target="_blank" rel="noopener">小米球ngrok</a>，能固定域名，而且免费！<br>映射端口为服务端<strong>config</strong>的8888端口  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/98832397.jpg" alt=""></p><ol start="4"><li>测试访问内网映射地址<a href="http://springcloud.ngrok.xiaomiqiu.cn/order-dev.yml" target="_blank" rel="noopener">http://springcloud.ngrok.xiaomiqiu.cn/order-dev.yml</a>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/38848557.jpg" alt=""></p><ol start="4"><li><strong>github</strong> WebHooks 设置  <blockquote><p>访问地址最后添加<code>monitor</code></p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/87396767.jpg" alt="">  </p><ol start="5"><li>重启各服务后，我们修改 github 仓库 <code>config-repo</code><blockquote><p>修改 order-dev.yml 中 girl 的 age  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/2934818.jpg" alt=""></p><ol start="6"><li>重新访问客户端 <strong>order</strong>：<a href="http://localhost:8081/girl/print" target="_blank" rel="noopener">http://localhost:8081/girl/print</a>  <blockquote><p>此时，不需要执行<code>curl -X POST http://localhost:8888/actuator/bus-refresh</code></p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-5/65870750.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (九)：config--统一配置中心组件</title>
      <link href="/springcloud-config-center-learning.html"/>
      <url>/springcloud-config-center-learning.html</url>
      <content type="html"><![CDATA[<h1 id="前言">1. 前言</h1><p>参考博客<a href="https://www.jianshu.com/p/55e92b06a7fd" target="_blank" rel="noopener">Spring Cloud - Config统一配置管理</a>  </p><h2 id="为什么需要统一配置中心">1.1. 为什么需要统一配置中心</h2><ol><li><p><strong>不方便维护</strong>  </p><blockquote><p>解决多个开发人员对配置文件修改，冲突不利于维护  </p></blockquote></li><li><p><strong>配置内容安全与权限</strong>  </p><blockquote><p>主要是针对线上配置来说。<br>一个公司线上项目的配置文件不会对开发人员公开，特别是敏感内容比如数据库密码等等，只有管理者或运维才能知道；  </p></blockquote></li><li><p><strong>更新配置项目需要重启</strong>  </p><blockquote><p>线上更新文案或限制，比如短信验证码一天错误限制，可能需要修改；<br>SpringCloud config组件能做到  </p></blockquote></li></ol><h2 id="统一配置中心架构">1.2. 统一配置中心架构</h2><ol><li>统一配置中心可以作为项目的单独的一个微服务，也包含了server端和client端；  </li><li>server端：配置文件为了方便管理，放到远端git上用于版本控制。  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/43489584.jpg" alt=""></p><h1 id="实战config-server服务">2. 实战config-server服务</h1><p><a href="https://gitee.com/ddebug/config-repo" target="_blank" rel="noopener">个人码云私有项目地址</a>  </p><h2 id="统一版本">2.1. 统一版本</h2><p>一开始使用SpringBoot【2.0.0.M3】、SpringCloud【Finchley.M2】经常出现错误，无法查询远传git配置文件信息；  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以统一SpringBoot和SpringCloud版本，以免以后太多坑！！  </p><blockquote><p>eureka、config、order、product、都修改下面新版本  </p></blockquote><table><thead><tr><th>依赖</th><th>旧版本</th><th>新版本  </th></tr></thead><tbody><tr><td>Spring Boot</td><td>2.0.0.M3</td><td>2.0.1.RELEASE    </td></tr><tr><td>Spring Cloud</td><td>Finchley.M2</td><td>Finchley.RC1  </td></tr></tbody></table><h2 id="config-server端">2.2. config-server端</h2><h3 id="注意事项">2.2.1. 注意事项</h3><ol><li><strong>创建注意事项</strong>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/2191390.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/71443228.jpg" alt=""></p><ol start="2"><li><strong>版本号</strong>  <blockquote><p>修改为上面版本号  </p></blockquote></li></ol><h3 id="初始化为Eureka-Client">2.2.2. 初始化为Eureka-Client</h3><ol><li><strong>pom.xml</strong>  <blockquote><p>引入<code>spring-cloud-starter-netflix-eureka-client</code>依赖  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>ConfigApplication.java</strong>   <blockquote><p>SpringCloud【Finchley.RC1】版本已经不需要注解<code>@EnableDiscoveryClient</code>  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>application.yml</strong>  </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span> </span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>启动eureka，启动config，访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a></strong>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/41307372.jpg" alt=""></p><h3 id="初始化成Config-Server">2.2.3. 初始化成Config-Server</h3><ol><li><strong>pom.xml</strong>  <blockquote><p>引入依赖<code>spring-cloud-config-server</code>  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>ConfigApplication.java</strong>   </p><blockquote><p>在<strong>上一节基础上</strong>添加注解<code>@@EnableConfigServer</code>  </p></blockquote></li><li><p><strong>新建远程git仓库</strong>   </p><blockquote><p>可以在码云上创建<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/18705545.jpg" alt=""></p></blockquote></li><li><p><strong>application.yml</strong>   </p><blockquote><p>配置远程仓库地址  </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/ddebug/config-repo</span></span><br><span class="line"><span class="attr">          username:</span> <span class="string">ddebug</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">********</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>重新启动项目，访问<a href="http://localhost:8080/order-a.yml" target="_blank" rel="noopener">http://localhost:8080/order-a.yml</a></strong>   <blockquote><p>下小节讲解上述访问URL如何定义的！！   </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/15155589.jpg" alt=""></p><h3 id="配置中心访问url路径规则">2.2.4. 配置中心访问url路径规则</h3><ol><li><strong>当config项目启动后，控制台中心，你可以看到</strong>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/11667827.jpg" alt="">  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/&#123;name&#125;-&#123;profiles&#125;.properties</span></span><br><span class="line"><span class="string">/&#123;name&#125;-&#123;profiles&#125;.yml</span> <span class="string">||</span> <span class="string">/&#123;name&#125;-&#123;profiles&#125;.yaml</span></span><br><span class="line"><span class="string">/&#123;name&#125;/&#123;profiles:.*[^-].*&#125;</span></span><br><span class="line"><span class="string">/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.yml</span> <span class="string">||</span> <span class="string">/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.yaml</span></span><br><span class="line"><span class="string">/&#123;name&#125;/&#123;profiles&#125;/&#123;label:.*&#125;</span></span><br><span class="line"><span class="string">/&#123;name&#125;-&#123;profiles&#125;.json</span></span><br><span class="line"><span class="string">/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.properties</span></span><br><span class="line"><span class="string">/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.json</span></span><br><span class="line"><span class="string">/&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/**</span></span><br><span class="line"><span class="string">/&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/**</span></span><br></pre></td></tr></table></figure><blockquote><p><code>{name}</code>：通常使用微服务名称，对应Git仓库中文件名的前缀；<br><code>{profile}</code>：对应{name}-后面的dev、pro、test等；<br><code>{label}</code>：对应Git仓库的分支名，默认为master。  </p></blockquote><ol start="2"><li><strong>访问</strong><a href="http://localhost:8080/order-a.properties" target="_blank" rel="noopener">http://localhost:8080/order-a.properties</a>、<a href="http://localhost:8080/order-a.json" target="_blank" rel="noopener">http://localhost:8080/order-a.json</a>  <blockquote><p>发现返回相应格式的配置文件  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/68979852.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/6924783.jpg" alt=""></p><ol start="3"><li><strong>远程git仓库<a href="https://gitee.com/ddebug/config-repos" target="_blank" rel="noopener">config-repos</a>新建order-dev.yml、order-test.yml</strong>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/71702856.jpg" alt=""></p><ol start="4"><li><p><strong>访问</strong><a href="http://localhost:8080/order-dev.yml" target="_blank" rel="noopener">http://localhost:8080/order-dev.yml</a>、<a href="http://localhost:8080/order-test.yml" target="_blank" rel="noopener">http://localhost:8080/order-test.yml</a>   </p></li><li><p><strong>创建release分支进行访问配置文件</strong><a href="http://localhost:8080/release/order-dev.yml" target="_blank" rel="noopener">http://localhost:8080/release/order-dev.yml</a>     </p></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/89288736.jpg" alt=""></p><blockquote><p>访问<a href="http://localhost:8080/release/order-dev.yml" target="_blank" rel="noopener">http://localhost:8080/release/order-dev.yml</a><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/12228473.jpg" alt=""></p></blockquote><ol start="6"><li><strong>常用方式</strong>   <blockquote><p>看需求，都可以，经常使用下面两种格式了    </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/&#123;name&#125;-&#123;profiles&#125;.properties</span></span><br><span class="line"><span class="string">/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.yml</span></span><br></pre></td></tr></table></figure><h3 id="远程配置文件存储位置">2.2.5. 远程配置文件存储位置</h3><p>统一配置中心会把远端git配置文件拉取到本地git中，拉倒哪了呢？  </p><ol><li><strong>console控制台</strong>  <blockquote><p>可以看到，拉到某一个目录中</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">31</span> <span class="number">11</span>:<span class="number">44</span>:<span class="number">28.629</span>  INFO <span class="number">4268</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">7</span>] o.s.c.c.s.e.NativeEnvironmentRepository  : Adding property source: file:/C:/Users/ADMINI~<span class="number">1</span>/AppData/Local/Temp/config-repo-<span class="number">7525068817470639949</span>/order-dev.yml</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">31</span> <span class="number">11</span>:<span class="number">44</span>:<span class="number">28.629</span>  INFO <span class="number">4268</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">7</span>] o.s.c.c.s.e.NativeEnvironmentRepository  : Adding property source: file:/C:/Users/ADMINI~<span class="number">1</span>/AppData/Local/Temp/config-repo-<span class="number">7525068817470639949</span>/order.yml</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>application.yml</strong>添加位置配置   <blockquote><p>出于项目安全，特别是线上，配置文件放到指定目录;<br>添加配置<code>basedir</code>  </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/ddebug/config-repo</span></span><br><span class="line"><span class="attr">          username:</span> <span class="string">ddebug</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">***********</span></span><br><span class="line">          <span class="comment"># 配置到项目下，也可以配置到其他路径</span></span><br><span class="line"><span class="attr">          basedir:</span> <span class="attr">E:\springcloudservice\config\basedir</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>重新访问<a href="http://localhost:8080/release/order-dev.yml" target="_blank" rel="noopener">http://localhost:8080/release/order-dev.yml</a></strong>   </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/88213574.jpg" alt=""></p><h2 id="config-client端：order">2.3. config-client端：order</h2><h3 id="order初始化为config-client">2.3.1. order初始化为config-client</h3><ol><li><strong>pom.xml</strong>   <blockquote><p>server子模块pom.xml引入依赖<code>spring-cloud-starter-config</code><br>因为<strong>order</strong>即是Eureka-client，也是Config-Client，下面依赖都不可少  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>application.yml</strong>  </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">order</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>bootstrap.yml</strong>  <blockquote><p><strong>特别注意</strong>：与 Spring Cloud Config 相关的属性必须配置在 bootstrap.yml 中，config 部分内容才能被正确加载。因为 config 的相关配置会先于 application.yml，而 bootstrap.yml 的加载也是先于 application.yml。  </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">order</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">      lable:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span>   <span class="comment"># 开启config服务发现支持</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">config</span>   <span class="comment"># config：Config-Server端服务名  </span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>OrderApplication.java</strong>   <blockquote><p>删除注解<code>@EnableDiscoveryClient</code>  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = (<span class="string">"cn.hunter.product.client"</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>EnvController.java</strong>  <blockquote><p>测试是否从config中获取配置文件的配置信息  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/env"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnvController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;env&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/print"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> env;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>访问<a href="http://localhost:8080/env/print" target="_blank" rel="noopener">http://localhost:8080/env/print</a></strong>   <blockquote><p>启动eureka、config、order服务<br>测试修改order的bootstrap.yml<code>profile</code>为<code>test</code>，测试能够获取    </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/50923784.jpg" alt=""></p><h3 id="配置中心config高可用">2.3.2. 配置中心config高可用</h3><ol><li><p><strong>config</strong> 配置中心微服务启动多个实例<code>-Dserver.port=9002</code><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/73732896.jpg" alt=""></p></li><li><p><strong>多次启动 order</strong> 微服务  </p><blockquote><p>可以发现每一次启动可能会从不同地址的config-server读取配置文件  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/8165937.jpg" alt=""></p><h3 id="总结配置文件">2.3.3. 总结配置文件</h3><h4 id="config-server">2.3.3.1. config-server</h4><ul><li>application.yml  </li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/ddebug/config-repos</span></span><br><span class="line"><span class="attr">          username:</span> <span class="string">ddebug</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">lhq19931201</span></span><br><span class="line">          <span class="comment"># 拉取远程git端配置文件到本地位置</span></span><br><span class="line"><span class="attr">          basedir:</span> <span class="attr">E:\springcloudservice\config\basedir</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure><h4 id="order">2.3.3.2. order</h4><ul><li>bootstrap.yml  <blockquote><p>注册中心配置在这里因为默认端口8761，如果修改为其他端口，无法从配置中心服务<strong>config</strong>读取远端git配置文件；  </p></blockquote></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/ddebug/config-repos</span></span><br><span class="line"><span class="attr">          username:</span> <span class="string">ddebug</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">lhq19931201</span></span><br><span class="line"><span class="attr">          basedir:</span> <span class="attr">E:\springcloudservice\config\basedir</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure><h4 id="远端gitconfig-repos配置文件">2.3.3.3. 远端gitconfig-repos配置文件</h4><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-1/68597127.jpg" alt=""></p><ul><li><p>order.yml  </p><blockquote><p>可以不配置，也可以添加dev、test等相同配置  </p></blockquote></li><li><p>order-dev.yml  </p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">order</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/SpringCloud_Sell?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="string">dev</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (八)：微服务、容器Docker和DevOps</title>
      <link href="/springcloud-docker-devops.html"/>
      <url>/springcloud-docker-devops.html</url>
      <content type="html"><![CDATA[<h1 id="前言">1. 前言</h1><h2 id="微服务和容器：天生一对">1.1. 微服务和容器：天生一对</h2><ol><li><p>使用容器从系统环境开始，自底至上打包应用  </p><blockquote><p>解决了程序应用在我的环境中正常，在你的环境里就异常了  </p></blockquote></li><li><p>docker轻量级，对资源的有效隔离和管理，符合微服务理念  </p><blockquote><p>做到进程隔离，资源管理  </p></blockquote></li><li><p>可复用，版本化  </p><blockquote><p>通过Docker镜像交付环境，利用强大的tag机制指定镜像版本，这样就可以版本化整个微服务环境  </p></blockquote></li></ol><h2 id="Microservice-Docker-Devops">1.2. Microservice/Docker/Devops</h2><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-31/14118347.jpg" alt=""></p><blockquote><p>微服务之前产生的交互相当复杂，服务拆分过后，每个服务都要独立部署，简而言之，就是可以随时随地升级服务版本；  </p></blockquote><blockquote><p>因此<strong>自动化运维</strong>提升交互速度才是真正玩转微服务重要环节；  </p></blockquote><blockquote><p>微服务、Docker、Devops相辅相成，微服务架构是核心，Docker、Devops是工具、手段！！  </p></blockquote><h1 id="Docker">2. Docker</h1><h2 id="Docker安装">2.1. Docker安装</h2><p><a href="https://www.docker.com/community-edition" target="_blank" rel="noopener">安装地址</a>  </p><h3 id="Linux阿里云">2.1.1. Linux阿里云</h3><h4 id="阿里云服务器参数">2.1.1.1. 阿里云服务器参数</h4><ul><li>CPU： 1核  </li><li>内存： 2 GB  </li><li>实例类型： I/O优化  </li><li>操作系统： CentOS 7.4 64位  </li></ul><h4 id="安装">2.1.1.2. 安装</h4><p>参考<a href="https://segmentfault.com/a/1190000012924580" target="_blank" rel="noopener">从零开始学习 Docker</a>  </p><blockquote><p>使用阿里云官方文档<a href="https://help.aliyun.com/document_detail/60742.html?spm=5176.11065259.1996646101.searchclickresult.3335232c6fvZbt" target="_blank" rel="noopener">安装Docker</a>  </p></blockquote><blockquote><p>注意一定要安装<strong>阿里云加速器</strong>。  </p></blockquote><h3 id="Windows">2.1.2. Windows</h3><blockquote><p>尽量不要再Windows环境下学习使用！！  </p></blockquote><blockquote><p>参考上面安装连接，下载windows版本，目前docker只支持win10；  </p></blockquote><blockquote><p>注意配置Docker镜像加速器。  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-31/51997639.jpg" alt=""></p><h2 id="Docker学习">2.2. Docker学习</h2><p>参考<a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">阮一峰 Docker入门教程</a>  </p>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Docker </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (七)：使用RabbitMQ实现服务间异步消息调用</title>
      <link href="/springcloud-rabbitmq-async-message.html"/>
      <url>/springcloud-rabbitmq-async-message.html</url>
      <content type="html"><![CDATA[<h1 id="同步-异步">1. 同步/异步</h1><p>多模块化后的<strong>order</strong>订单服务和<strong>product</strong>商品服务之间的通信是同步的，订单会调用商品的扣库存远程服务。<br>而异步：<strong>客户端请求不会阻塞进程，服务端的响应可以是非即时的</strong>。  </p><blockquote><p>http最常见的方式是同步，http也是支持异步调用的  </p></blockquote><h2 id="异步常见形态">1.1. 异步常见形态</h2><h3 id="一对一交互">1.1.1. 一对一交互</h3><ol><li><p><strong>通知</strong>  </p><blockquote><p>单向请求，你对她放电，她对你绝缘。。  </p></blockquote></li><li><p><strong>请求/异步响应</strong>  </p><blockquote><p>客户端发送请求到服务端，服务端异步响应请求，客户端不会阻塞，而且被设计成响应不会立刻送达  </p></blockquote></li></ol><h3 id="一对多交互">1.1.2. 一对多交互</h3><ol><li><strong>消息</strong>  <blockquote><p>利用消息可以实现一对多形态的交互，比如<code>发布/订阅</code>模式下，客户端发送消息通知，被0个或多个感兴趣的服务消费；<br>再比如客户端发送消息请求，等待服务发回的响应。  </p></blockquote></li></ol><h2 id="MQ-应用场景">1.2. MQ 应用场景</h2><ol><li><p><strong>异步处理</strong>  </p><blockquote><p>比如用户注册后，调用短信服务和积分服务分别执行发短信和加积分操作，注册信息写入数据库后，通过异步消息让短信服务和积分服务去做他们的事，提升用户体验。  </p></blockquote></li><li><p><strong>流量削峰</strong>  </p><blockquote><p>常见的比如<strong>秒杀</strong>场景，秒杀活动由于流量过大，导致流量暴增，甚至导致应用挂掉，为了解决这种问题，一般会在应用前端加上消息队列，从而控制活动人数；<br>假如消息队列长度超过最大数量，可以直接拒绝用户请求，提示超出人数信息，或跳转相应的提示页面；  </p></blockquote></li><li><p><strong>日志处理</strong>  </p><blockquote><p>最典型的就是<strong>Kafka</strong>，<strong>Kafka</strong>消息队列一开始设计就是用于日志处理，大数据应用频繁，通过日志采集定时写入<strong>Kafka</strong>队列，然后消息队列对日志进行接收、储存和转发  </p></blockquote></li><li><p>应用解耦  </p><blockquote><p>比如用户下单后，订单服务需要通知商品系统，我们之前做的是订单服务需要调用商品服务的接口，订单服务和商品服务是<strong>耦合</strong>的；<br>下面我们会使用 <strong>MQ</strong> 消息队列，用户下单后，订单服务完成持久化处理，将消息写入消息队列，返回用户订单下单成功，商品服务订阅下单消息，采用推/拉方式获取下单信息，商品系统根据下单信息进行商品库存的操作；<br>如果下单时，商品服务不能正常工作了，并不会影响正常下单，因为下单后，订单服务写入消息队列后，就不在关心后续操作，这样就实现订单服务和商品服务的应用解耦了。  </p></blockquote></li></ol><h2 id="RabbitMQ初步使用">1.3. RabbitMQ初步使用</h2><h3 id="消息中间件的选择">1.3.1. 消息中间件的选择</h3><ul><li><strong>RabbitMQ</strong>  </li><li><strong>Kafka</strong>  </li><li><strong>ActiveMQ</strong>   </li></ul><h3 id="RabbitMQ安装运行">1.3.2. RabbitMQ安装运行</h3><p>参考博客<a href=""></a>  </p><h3 id="项目实战">1.3.3. 项目实战</h3><h4 id="场景分析">1.3.3.1. 场景分析</h4><ol><li>订单服务可以同时处理<strong>数码商品</strong>、<strong>水果商品</strong>两种订单；  </li><li>订单服务根据不同的商品类型发送不同的<code>mq</code>消息，相对应的，<strong>数码供应商</strong>只关心数码产品订单，<strong>水果供应商</strong>也是一样；  </li><li>就是<code>rabbitmq</code>的消息分组！  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-6/46186534.jpg" alt=""></p><h4 id="代码">1.3.3.2. 代码</h4><ol><li><strong>pom.xml【server子模块】</strong>  <blockquote><p>上一章中已经添加过了，rabbitmq依赖<code>spring-cloud-stream-binder-rabbit</code><br>其实是 spring cloud 的 <code>stream</code>组件，将在下章中介绍  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-bus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>bootstrap.yml</strong>  <blockquote><p>添加 rabbitmq 配置<br>如果你的 rabbitmq 默认启动，没有修改配置，下面的配置信息不用添加，Spring Cloud 默认使用 RabbitMQ  </p></blockquote></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">order</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      lable:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span>   <span class="comment"># 开启config服务发现支持</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>MqReceiver.java</strong>  <blockquote><p><strong>order</strong>服务中新建接受 MQ 消息的类;<br>注解<code>@RabbitListener</code><br>关键字<code>exchange</code><br>关键字<code>key</code><br>关键字<code>value</code>  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 需要手动在rabbitmq控制台上新建队列 @RabbitListener(queues = "myQueue")</span></span><br><span class="line">    <span class="comment">// 2. 自动创建队列 @RabbitListener(queuesToDeclare = @Queue("myQueue"))</span></span><br><span class="line">    <span class="comment">// 3. 自动创建，Exchange和queue绑定</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(<span class="string">"myQueue"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(<span class="string">"myExchange"</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"MqReceiver: &#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数码供应商服务  接受消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(<span class="string">"myOrder"</span>),</span><br><span class="line">            key = <span class="string">"computer"</span>,</span><br><span class="line">            value = <span class="meta">@Queue</span>(<span class="string">"computerOrder"</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processComputer</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"MqReceiver: &#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水果供应商服务  接受消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(<span class="string">"myOrder"</span>),</span><br><span class="line">            key = <span class="string">"fruit"</span>,</span><br><span class="line">            value = <span class="meta">@Queue</span>(<span class="string">"fruitOrder"</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processFruit</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"MqReceiver: &#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>MqServerTest.java</strong>  <blockquote><p>测试类，MQ服务端发送消息<br>注入<code>AmqpTemplate</code>  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqServerTest</span> <span class="keyword">extends</span> <span class="title">OrderApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"myQueue"</span>, <span class="string">"now: "</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"myOrder"</span>, <span class="string">"fruit"</span>, <span class="string">"now: "</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>启动 eureka、config、order</strong>  <blockquote><p>运行测试类<code>MqServerTest.java</code>的 <strong>sendOrder()</strong> 方法<br>console控制台打印<code>fruit</code>发送的队列消息    </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">06</span>-<span class="number">06</span> <span class="number">13</span>:<span class="number">28</span>:<span class="number">00.618</span>  INFO <span class="number">4192</span> --- [cTaskExecutor-<span class="number">1</span>] cn.hunter.order.message.MqReceiver       : fruit receive: now: Wed Jun <span class="number">06</span> <span class="number">13</span>:<span class="number">28</span>:<span class="number">00</span> CST <span class="number">2018</span></span><br></pre></td></tr></table></figure><ol start="6"><li><strong>RabbitMQ 控制面板</strong>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-6/28043517.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-6-6/7823441.jpg" alt=""></p><h2 id="点餐项目分析">1.4. 点餐项目分析</h2><ol><li><strong>用户服务</strong>  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-30/10741821.jpg" alt=""></p><blockquote><p><strong>用户服务</strong>在用户登录时，会调用<strong>短信服务</strong>给用户发短信；登录操作可能会调用<strong>积分服务</strong>给用户加积分；等等调用其他服务。  </p></blockquote><blockquote><p>如果上面都采用同步通信机制，服务之间耦合过大，用户登录过程需要多个服务同时响应成功才能成功，造成不好的用户体验；  </p></blockquote><blockquote><p>我们可以通过消息队列解决上面问题。  </p></blockquote><ol start="2"><li><strong>本项目订单/商品服务</strong>   </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-30/23312725.jpg" alt=""></p><blockquote><p><strong>订单服务</strong>在扣库存前先调用<strong>商品服务</strong>查询商品信息接口，之后再调用减库存接口进行减库存操作；  </p></blockquote><blockquote><p>如果我们改造成：<strong>商品服务</strong>在更改库存后发布消息【库存变化】，<strong>订单服务</strong>订阅此消息，获取商品的具体信息，比如可购买商品的个数、商品ID等；<br><strong>订单服务</strong>在下单时，不会去<strong>商品服务</strong>调用查询商品信息接口，而是在本服务中查询了；  </p></blockquote><blockquote><p>然后<strong>订单服务</strong>在扣库存时，发布消息【扣库存】，<strong>商品服务</strong>订阅此消息，读取消息后，减少对应商品的库存量；  </p></blockquote><blockquote><p>支付成功/失败也会对库存有影响：具体看业务设计，比如设置30分钟后如果未支付，由<strong>支付服务</strong>发布消息，<strong>商品服务</strong>和<strong>订单服务</strong>同时订阅此消息，<br>就能够保证数据的最终一致性。  </p></blockquote><blockquote><p>再通俗讲，比如<strong>用户服务</strong>购买商品后，业务上还要给用户加积分，发短信，此时，<strong>订单服务</strong>不需要修改，<strong>短信服务</strong>和<strong>积分服务</strong>只要也订阅了消息，<br>相应的积分、短信就可以实现。 </p></blockquote><h1 id="订单-商品同步改为异步消息调用">2. 订单/商品同步改为异步消息调用</h1>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows cmd常用命令总结</title>
      <link href="/windows-cmd-summary.html"/>
      <url>/windows-cmd-summary.html</url>
      <content type="html"><![CDATA[<h1 id="端口占用">1. 端口占用</h1><p>参考：<a href="https://blog.csdn.net/hu_wen/article/details/53783726" target="_blank" rel="noopener">Windows查看所有的端口及端口对应的程序</a>  </p><ol><li>Windows下查看所有端口  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><ol start="2"><li>查询指定的端口占用的PID号   </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano|findstr &quot;8080&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>查询PID对应的进程  <blockquote><p>如果上面查询的PID号为”233”  </p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr &quot;233&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>杀死进程  </li></ol><blockquote><p>我们也可以在任务管理器中  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /f /t /im 程序名</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 总结大全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (六)：Spring Boot多模块化</title>
      <link href="/springboot-multi-module-startup.html"/>
      <url>/springboot-multi-module-startup.html</url>
      <content type="html"><![CDATA[<h1 id="spring-Boot-多模块">1. spring Boot 多模块</h1><h2 id="前言">1.1. 前言</h2><p>去总公司参加推介会，无聊没事做，又因为总公司电脑配置垃圾，环境都没有配置，所以谢谢博客！<br>最近学习sprincloud微服务实战，过程需要spring boot项目多模块化，趁机总结一波！  </p><p>参考慕课网免费视频： <a href="https://www.imooc.com/video/16354" target="_blank" rel="noopener">Spring Boot多模块构建项目</a>  </p><h2 id="为什么">1.2. 为什么</h2><p>在传统的项目主结构中，我们的java代码由于不同的模块执行不同的职责，在这种情形下我们讲<br>这些模块拆分成更小的单元，并赋予单独的使命。  </p><h2 id="如何做">1.3. 如何做</h2><p>本质上还是利用maven的特性：模块化！  </p><h3 id="重构">1.3.1. 重构</h3><ol><li><p>调整主（父）工程类型（<packaging>）  </packaging></p><blockquote><p>一开始项目是单独的<strong>jar</strong>工程，包含了代码和依赖，打包形式是jar形式，我们要更改为聚合工程<strong>pom</strong>形式。  </p></blockquote></li><li><p>创建子模块工程（<module>）  </module></p></li></ol><ul><li>模型层： model(实体类)  </li><li>持久层： persistence (dao层)  </li><li>表示层： web  (controller)  </li></ul><ol start="3"><li>子模块依赖管理（<dependencymanagement>）  <blockquote><p>调整模块之间的依赖关系：模型层model是工程最底层的子模块，被持久层和web层双依赖。  </p></blockquote></dependencymanagement></li></ol><h2 id="实战拆分">1.4. 实战拆分</h2><h3 id="修改成pom聚合工程">1.4.1. 修改成pom聚合工程</h3><ul><li>pom.xml  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hunter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改成 pom 聚合工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="构建表示层web">1.4.2. 构建表示层web</h3><ol><li>新建module   <blockquote><p>新建时，可以不用选择具体类型   </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/72119483.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/23020680.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/84235608.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/56915207.jpg" alt=""></p><ol start="2"><li><p>项目结构图<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/14455286.jpg" alt="">  </p></li><li><p>主工程pom.xml文件变化<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/67854836.jpg" alt=""></p></li><li><p>主工程代码移动到相应子模块中   </p><blockquote><p>移动成功后，可以删除掉主工程的src目录了<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/9615337.jpg" alt=""></p></blockquote></li></ol><h3 id="构建-persistence-和-model-子模块">1.4.3. 构建 persistence 和 model 子模块</h3><p>参考构建web子模块！！<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/71295242.jpg" alt=""></p><h3 id="解决子模块之间的依赖">1.4.4. 解决子模块之间的依赖</h3><blockquote><p>web依赖于persistentce，persistence依赖于model   </p></blockquote><ol><li><p>修改 persistence pom.xml文件  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- persistence 增加 model 子模块依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hunter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改 web pom.xml文件   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web 依赖于 persistence --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- persistence 依赖于 model --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web 增加 persistence 子模块依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hunter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>persistence<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="测试">1.4.5. 测试</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/38972138.jpg" alt=""></p><h1 id="项目打包">2. 项目打包</h1><h2 id="打包方式">2.1. 打包方式</h2><ul><li><strong>jar包</strong>   </li><li><strong>war包</strong>   </li></ul><h3 id="jar包">2.1.1. jar包</h3><ol><li><p>主工程pom.xml文件添加启动类配置：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加启动类配置，否则打包时提示找不到--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>cn.hunter.DemoApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>上面的<strong>build配置信息</strong>放到web子模块的pom.xml中   </p><blockquote><p>因为web子模块已经成为了主模块，拥有启动类<strong>DemoApplication.java</strong>  </p></blockquote></li><li><p>安装依赖子模块的jar包到本地maven仓库   </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Dmaven.test.skip=<span class="keyword">true</span> -U clean install</span><br></pre></td></tr></table></figure><ol start="4"><li>构建打包命令：  <blockquote><p>-u: 更新第三方包   </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Dmaven.test.skip -u clean <span class="keyword">package</span></span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/41532244.jpg" alt=""></p><ol start="4"><li>jar包启动命令：  </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure><h3 id="war包">2.1.2. war包</h3><ol><li>packaging值调整成war  <blockquote><p>web子模块pom.xml文件中，packaging值默认为<strong>jar</strong>   </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/67423211.jpg" alt=""></p><ol start="2"><li>web模块新增webapp/WEB-INF/web.xml   <blockquote><p>war包maven标准目录  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/18227634.jpg" alt=""></p><ol start="3"><li>打包命令：  <blockquote><p>和jar一样  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Dmaven.test.skip -u clean <span class="keyword">package</span></span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-26/21019712.jpg" alt=""></p><ol start="4"><li>war包启动命令   <blockquote><p>在spring boot中，war包可以和jar包一样，通过下面命令行作为可执行jar包使用；<br>放在tomcat、jetty容器中运行  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.war</span><br></pre></td></tr></table></figure><h1 id="Spring-Boot运行方式">3. Spring Boot运行方式</h1><ul><li><strong>IDEA方式</strong>    </li><li><strong>JAR/WAR 方式</strong>   </li><li><strong>Maven插件方式</strong>   </li></ul><blockquote><p>如果你是开发环境，会使用Idea方式；<br>如果你是在线上生产环境，会使用Jar/war方式（脚本命令运行）；<br>如果你是开发环境，同时没有图形化操作界面，可以使用Maven插件方式。  </p></blockquote><h2 id="启动过程">3.1. 启动过程</h2><ol><li>安装persistence、model子模块依赖   <blockquote><p>在工程主目录下  </p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Dmaven.test.skip -u clean install</span><br></pre></td></tr></table></figure><ul><li>启动工程   <blockquote><p>在web子模块目录下   </p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure><h1 id="Spring-Cloud点餐项目多模块化">4. Spring Cloud点餐项目多模块化</h1><blockquote><p>重点是暴露远程服务的接口定义在客户端Product，比如Order服务调用Product服务的查询商品、减库存服务。<br>这么做的好处是，自己定义的接口，暴露出去给别人用，便于使用和修改，如果后面还有支付系统需要使用Product的服务，不需要重新再支付系统中再写一遍了！！  </p></blockquote><h2 id="Product服务">4.1. Product服务</h2><h3 id="多模块化分析">4.1.1. 多模块化分析</h3><ul><li><strong>product-server</strong>： 所有业务逻辑  </li><li><strong>product-clent</strong>： 对外暴露的接口  </li><li><strong>product-common</strong>： 公用的对象（被外部服务调用，也会被内部其他模块使用）  </li></ul><h3 id="多模块依赖关系">4.1.2. 多模块依赖关系</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-30/51260546.jpg" alt=""></p><h3 id="效果">4.1.3. 效果</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-30/84154162.jpg" alt=""></p><h2 id="Order服务">4.2. Order服务</h2><p>和Product服务一样，不在分析  </p><h2 id="注意事项">4.3. 注意事项</h2><h3 id="server子模块">4.3.1. server子模块</h3><p><strong>ProductApplication.java</strong>、<strong>OrderApplication.java</strong>要放在<strong>server</strong>子模块中！！  </p><ol><li><p>启动类<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-30/6652656.jpg" alt=""></p></li><li><p>server.pom  </p><blockquote><p><strong>build</strong>配置文件从主项目中移到server.pom中  </p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入依赖子模块common">4.3.2. 引入依赖子模块common</h3><blockquote><p>product-common子模块被内部其他模块<strong>product-client</strong>使用;<br>也可能被外部服务<strong>order</strong>的内部子模块<strong>order-server</strong>使用； </p></blockquote><ol><li><p>首先在<strong>product</strong>、<strong>order</strong>主pom.xml文件中引入：<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-30/82243249.jpg" alt=""></p></li><li><p>内部模块<strong>product-client</strong>使用：<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-30/75110005.jpg" alt=""></p></li><li><p>外部项目服务<strong>order</strong>使用：  </p></li></ol><blockquote><p>和内部使用一样，但首先把<strong>product</strong>子模块<strong>client</strong>、<strong>common</strong>安装到本地仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Dmaven.skip.test=true -U clean install</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在工作学习中遇到的优秀网址总结</title>
      <link href="/excellent-learning-website-summary.html"/>
      <url>/excellent-learning-website-summary.html</url>
      <content type="html"><![CDATA[<h1 id="前端">1. 前端</h1><h2 id="模板">1.1. 模板</h2><p>1、<a href="http://www.ymjihe.com/dedecms" target="_blank" rel="noopener">织梦模板网站-源码集合</a><br>2、<a href="http://www.templatesy.com/" target="_blank" rel="noopener">网站首页模板-模板世界</a>  </p>]]></content>
      
      <categories>
          
          <category> 总结大全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WDCP面板+织梦模板构建网站</title>
      <link href="/wdcp-dede-edit-company-home-page.html"/>
      <url>/wdcp-dede-edit-company-home-page.html</url>
      <content type="html"><![CDATA[<h1 id="前言">1. 前言</h1><h2 id="需求">1.1. 需求</h2><p>最近公司官网首页要重新编辑，要求可以后台编辑发布公司新闻，在老大帮助下，使用织梦模板来改造一下公司官网。  </p><h2 id="准备">1.2. 准备</h2><h3 id="阿里云linux虚拟机">1.2.1. 阿里云linux虚拟机</h3><blockquote><p>由于工作上下班电脑来回配置比较麻烦，所以使用云虚拟机来练习，这里注意需要<strong>域名</strong>，如果是本地的话，修改hosts文件就行了  </p></blockquote><h3 id="WDCP云虚拟机管理面板">1.2.2. WDCP云虚拟机管理面板</h3><ul><li><a href="https://www.wdlinux.cn/wdcp/install.html" target="_blank" rel="noopener">官网资料</a>   </li></ul><h3 id="织梦模板">1.2.3. 织梦模板</h3><ul><li><a href="http://www.ymjihe.com/dedecms" target="_blank" rel="noopener">织梦模板网站-源码集合</a>  </li></ul><h1 id="wdcp安装与织梦模板安装">2. wdcp安装与织梦模板安装</h1><h2 id="安装">2.1. 安装</h2><p>参考<strong><a href="https://jingyan.baidu.com/article/b87fe19e6cea8d521935684e.html" target="_blank" rel="noopener">WDCP织梦模板安装教程</a></strong>链接，进行安装配置。  </p><blockquote><p>wdcp安装时间有点长，大概20分钟左右。请注意！    </p></blockquote><h2 id="访问页面">2.2. 访问页面</h2><h3 id="wdcp">2.2.1. wdcp</h3><ul><li><p>登陆地址：<code>http://your-ip-address:8080/login</code></p></li><li><p>登陆界面<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-25/25606871.jpg" alt=""></p></li><li>站点列表<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-25/68981775.jpg" alt=""></li></ul><h3 id="织梦后台">2.2.2. 织梦后台</h3><ul><li><p>登录地址：<code>http://xxx.xxx.cn/dede</code></p></li><li><p>登陆界面<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-25/36011085.jpg" alt=""></p></li><li><p>首页<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-25/72384695.jpg" alt=""></p></li></ul><h3 id="官网首页">2.2.3. 官网首页</h3><ul><li><p>登陆地址：wdcp站点域名<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-25/93943860.jpg" alt=""></p></li><li><p>首页效果<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-25/54238446.jpg" alt=""></p></li></ul><h1 id="修改模板">3. 修改模板</h1><h2 id="修改样式图片">3.1. 修改样式图片</h2><blockquote><p>【附件管理】中修改：<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-25/43868336.jpg" alt=""></p></blockquote><h2 id="修改网站模板">3.2. 修改网站模板</h2><blockquote><p>【模板管理】默认模板管理修改首页头部、尾部、关于、联系等模板  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-25/49825835.jpg" alt=""></p><h2 id="修改系统参数">3.3. 修改系统参数</h2><blockquote><p>织梦模板中统一配置的参数比如网站地址、版权信息、备案号、邮箱、qq、电话、地址等信息  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-25/56603264.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-25/80849037.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>总结Windows下各种开发软件安装配置</title>
      <link href="/windows-softwares-install-summary.html"/>
      <url>/windows-softwares-install-summary.html</url>
      <content type="html"><![CDATA[<h1 id="nginx">1. nginx</h1><p>参考博客：<a href="https://www.cnblogs.com/saysmy/p/6609796.html" target="_blank" rel="noopener">windows下nginx的安装及使用方法入门</a></p>]]></content>
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速创建Vue简单项目</title>
      <link href="/vue-project-fast-create.html"/>
      <url>/vue-project-fast-create.html</url>
      <content type="html"><![CDATA[<h1 id="前言">1. 前言</h1><h2 id="需求">1.1. 需求</h2><p>工作中经常遇到html5单页面项目的需求，所以学习了一下Vue，因为经常忘记，造成反复查询资料，再次总结一下Vue项目快速创建！  </p><h2 id="运行">1.2. 运行</h2><p>我已经上传到码云上了：<a href="https://gitee.com/ddebug/my_vue" target="_blank" rel="noopener">my-vue</a>   </p><p>参考<a href="http://www.ddebug.cn/app-share-page-vue-vant.html">移动端app分享html5页面跳转到app中</a>  </p><h3 id="直接运行">1.2.1. 直接运行</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone "xxxx"</span><br><span class="line">npm i</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="变成自己的">1.2.2. 变成自己的</h3><blockquote><p>删除上面博客引用的以下内容即可  </p></blockquote><ul><li><p>package.json<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/2047295.jpg" alt=""></p></li><li><p>Vue组件页面<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/7360608.jpg" alt=""></p></li><li><p>开发/生产环境接口地址<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/91189189.jpg" alt=""></p></li></ul><h2 id="Vue特点">1.3. Vue特点</h2><p>1、 <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue官方地址</a><br>2、 前后端分离的开发思想，调用后端提供的JSON接口，没有任何耦合；<br>3、 开发环境完全分离，开发完成后可以分别部署到两个不同的服务器运行。</p><h2 id="参考资料">1.4. 参考资料</h2><blockquote><p>参考的博客非常丰富，基础环境Node.js等搭建、Vue项目初始化流程都有    </p></blockquote><p>1、 <a href="https://blog.csdn.net/fungleo/article/details/53171052" target="_blank" rel="noopener">Vue2+VueRouter2+webpack 构建项目实战</a><br>2、 <a href="https://www.jianshu.com/p/87a4fe7bf0b1" target="_blank" rel="noopener">Vue2项目构建心得</a><br>3、 <a href="https://segmentfault.com/a/1190000009275424" target="_blank" rel="noopener">手摸手，带你用vue撸后台系列</a>  </p><h1 id="Vue项目快速创建">2. Vue项目快速创建</h1><h2 id="初始化项目">2.1. 初始化项目</h2><h3 id="建立前端文件夹">2.1.1. 建立前端文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir my_vue</span><br></pre></td></tr></table></figure><h3 id="初始化Vue项目">2.1.2. 初始化Vue项目</h3><ul><li>cnpm安装  </li></ul><blockquote><p>淘宝源，国内比较快  </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vant <span class="comment">--save --registry=https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><ul><li>全局安装vue-cli Vue脚手架   </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vue-cli -g</span><br></pre></td></tr></table></figure><ul><li>初始化vue项目  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd my_vue</span><br><span class="line">vue init webpack</span><br><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/53561962.jpg" alt=""></p><ul><li>测试是否初始化成功  <blockquote><p>在浏览器中输入<strong><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></strong>进行测试  </p></blockquote></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/10422759.jpg" alt=""></p><h3 id="配置生产环境和发布环境的接口地址">2.1.3. 配置生产环境和发布环境的接口地址</h3><blockquote><p>config/目录下  </p></blockquote><p>参考链接：<a href="https://blog.csdn.net/sxy1847589546/article/details/79290288" target="_blank" rel="noopener">https://blog.csdn.net/sxy1847589546/article/details/79290288</a></p><ul><li><p>项目结构图<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/99117323.jpg" alt=""></p></li><li><p>dev.env.js  </p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> prodEnv = <span class="built_in">require</span>(<span class="string">'./prod.env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">  BASE_API: <span class="string">'"http://test.ldd158.com/api/v1"'</span>   <span class="comment">// 开发环境路径</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>prod.env.js  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"production"'</span>,</span><br><span class="line">  BASE_API: <span class="string">'"http://api.ldd158.com/api/v1"'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装公用axios工具">2.1.4. 封装公用axios工具</h3><ul><li>安装axios  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> axios -D</span><br></pre></td></tr></table></figure><ul><li><p>项目结构图：<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/56402245.jpg" alt=""></p></li><li><p>source/api/request.js添加如下内容：  </p><blockquote><p>根据自己项目定义的接口格式来修改内容  </p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.BASE_API,  <span class="comment">// 开发/生产环境url</span></span><br><span class="line">  timeout: <span class="number">5</span> * <span class="number">1000</span> <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面的注释为通过response自定义code来标示请求状态，当code返回如下情况为权限有问题，登出并返回到登录页</span></span><br><span class="line"><span class="comment">     * 如通过xmlhttprequest 状态码标识 逻辑可写在下面error中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> res = response.data;</span><br><span class="line">    <span class="comment">//console.log(res);</span></span><br><span class="line">    <span class="comment">/*if (res.code !== 0) &#123;</span></span><br><span class="line"><span class="comment">      Message(&#123;</span></span><br><span class="line"><span class="comment">        message: res.message,</span></span><br><span class="line"><span class="comment">        type: 'info',</span></span><br><span class="line"><span class="comment">        duration: 2 * 1000</span></span><br><span class="line"><span class="comment">      &#125;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = error.response;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><ul><li>api.js  <blockquote><p>此处写vue页面中需要使用的接口  </p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'./request'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试参考</span></span><br><span class="line"><span class="comment">/*export const getRedDetail = (id) =&gt; request.get('/user/findByMobile', &#123;params: &#123;id: id&#125;&#125;)</span></span><br><span class="line"><span class="comment">export const doPayConfirm = (params) =&gt; request.post('/pay/qrPay/qrPay', params)</span></span><br><span class="line"><span class="comment">export const register = (mobile, spreadMobile) =&gt; request('/user/register', &#123;method: 'post', params: &#123;mobile: mobile, spreadMobile: spreadMobile&#125;&#125;)</span></span><br><span class="line"><span class="comment">export const findByMobile = (mobile) =&gt; request.get('/user/findByMobile', &#123;params: &#123;mobile: mobile&#125;&#125;)</span></span><br><span class="line"><span class="comment">export const sendCode = (mobile) =&gt; request('/sms/sendCode', &#123;method: 'post', params: &#123;mobile: mobile, type: 1&#125;&#125;)</span></span><br><span class="line"><span class="comment">export const verifyCode = (mobile, code) =&gt; request('/sms/verify', &#123;method: 'post', params: &#123;mobile: mobile, code: code, type: 1&#125;&#125;)*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> goodsDetail = <span class="function">(<span class="params">goodsId</span>) =&gt;</span> request.get(<span class="string">'/life/goods/detail'</span>, &#123;<span class="attr">params</span>: &#123;<span class="attr">goodsId</span>: goodsId&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由设置">2.1.5. 路由设置</h3><ul><li><p>项目结构图<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/49789087.jpg" alt=""></p></li><li><p>_import_development.js  </p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">file</span> =&gt;</span> <span class="built_in">require</span>(<span class="string">'@/views/'</span> + file + <span class="string">'.vue'</span>).default; <span class="comment">// vue-loader at least v13.0.0+</span></span><br></pre></td></tr></table></figure><ul><li>_import_production.js  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">file</span> =&gt;</span> () =&gt; <span class="keyword">import</span>(<span class="string">'@/views/'</span> + file + <span class="string">'.vue'</span>);</span><br></pre></td></tr></table></figure><ul><li>index.js  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _import = <span class="built_in">require</span>(<span class="string">'./_import_'</span> + process.env.NODE_ENV);</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRouterMap = [</span><br><span class="line">  <span class="comment">// 样式</span></span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">'/goods'</span>, <span class="attr">name</span>: <span class="string">'商品详情'</span>, <span class="attr">component</span>: _import(<span class="string">'goods/GoodsDetail'</span>), <span class="attr">meta</span>: &#123;<span class="attr">title</span>: <span class="string">'商品详情'</span>&#125;&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: constantRouterMap</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 路由发生变化修改页面title */</span></span><br><span class="line">  <span class="keyword">if</span> (to.meta.title) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端app分享html5页面跳转到app中</title>
      <link href="/app-share-page-vue-vant.html"/>
      <url>/app-share-page-vue-vant.html</url>
      <content type="html"><![CDATA[<h1 id="前言">1. 前言</h1><h2 id="任务需求">1.1. 任务需求</h2><blockquote><p>因为我是java后端，app没有涉入，我的工作就是开发一个页面，并进行跳转  </p></blockquote><ul><li>点击分享链接跳转到商品详情页面（手机浏览器）  </li><li>点击商品详情页部分按钮跳转到手机端该应用（安装）或注册页面（未安装）  </li><li>跳转到app时，把商品ID复制到手机端剪切板，由app端获取跳转到具体商品  </li></ul><h2 id="知识点">1.2. 知识点</h2><ul><li>Vue  </li><li>vant <a href="https://www.youzanyun.com/zanui/vant#/zh-CN/intro" target="_blank" rel="noopener">轻量、可靠的移动端 Vue 组件库</a>  </li></ul><h2 id="参考资料">1.3. 参考资料</h2><ul><li><a href="http://jspang.com/2018/04/15/vuekoa/#01" target="_blank" rel="noopener">Vue.js+Koa2移动电商实战视频教程</a>  <blockquote><p>免费1-5节足够了  </p></blockquote></li><li><a href="https://www.cnblogs.com/lyre/p/6169028.html" target="_blank" rel="noopener">h5页面唤起app(iOS和Android),没有安装则跳转下载页面</a>  </li></ul><h2 id="运行项目">1.4. 运行项目</h2><h3 id="项目地址">1.4.1. 项目地址</h3><blockquote><p>码云项目地址：<a href="https://gitee.com/ddebug/my_vue" target="_blank" rel="noopener">my_vue</a>  </p></blockquote><h3 id="效果展示">1.4.2. 效果展示</h3><ul><li><p>app分享商品链接<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/99281777.jpg" alt=""></p></li><li><p>在手机端浏览器内点击，跳转到商品详情页<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/38867480.jpg" alt=""></p></li><li><p>跳转到手机端app应用或注册页面  </p><blockquote><p>点击下方店铺、加入购物车、立即购买，如果手机端有该app，跳转进入；如果没有，跳转到注册页面<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/92716597.jpg" alt=""></p></blockquote></li></ul><h1 id="开发流程">2. 开发流程</h1><h2 id="创建Vue项目并初始化">2.1. 创建Vue项目并初始化</h2><p>参考我的博客：<a href="http://www.ddebug.cn/vue-project-fast-create.html">快速创建Vue简单项目</a></p><h2 id="使用Vant">2.2. 使用Vant</h2><h3 id="安装Vant">2.2.1. 安装Vant</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i vant -S # 简写形式</span><br><span class="line">npm <span class="keyword">install</span> vant <span class="comment">--save # 完整写法</span></span><br></pre></td></tr></table></figure><h3 id="引入Vant">2.2.2. 引入Vant</h3><ul><li>安装babel-plugin-import  <blockquote><p>按需引入组建模块，Vue项目组件库的主流引入方法  </p></blockquote></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-plugin-import -D  # 简写</span><br><span class="line">npm <span class="keyword">install</span> babel-<span class="keyword">plugin</span>-<span class="keyword">import</span> <span class="comment">--save-dev    # 完整写法</span></span><br></pre></td></tr></table></figure><ul><li>.baberlrc中配置plugins(插件)  </li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"plugins": [</span><br><span class="line">    "transform-vue-jsx", </span><br><span class="line">    "transform-runtime",</span><br><span class="line">    [<span class="string">"import"</span>,&#123;<span class="attr">"libraryName"</span>:<span class="string">"vant"</span>,<span class="attr">"style"</span>:<span class="literal">true</span>&#125;]</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><ul><li>按需使用Vant组件  <blockquote><p>设置好.babelrc后，就可以按需引入Vant框架。<br>比如现在我们引入一个Button组件，在src/main.js里加入下面的代码：  </p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Button, Row, Col, Swipe, SwipeItem , Lazyload, Popup, NavBar,Sku,Icon,Panel, Cell, CellGroup,</span><br><span class="line">  GoodsAction, GoodsActionBigBtn, GoodsActionMiniBtn, RadioGroup, Radio ,Stepper &#125; <span class="keyword">from</span> <span class="string">'vant'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Button).use(Row).use(Col).use(Swipe).use(SwipeItem).use(Lazyload).use(Popup).use(NavBar).use(Sku).use(Icon)</span><br><span class="line">  .use(GoodsAction).use(GoodsActionBigBtn).use(GoodsActionMiniBtn).use(Panel).use(Cell).use(CellGroup).use(RadioGroup)</span><br><span class="line">  .use(Radio).use(Stepper)</span><br></pre></td></tr></table></figure><ul><li>在需要的组件页面中加入Button  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-button type=&quot;primary&quot;&gt;主要按钮&lt;/van-button&gt;</span><br></pre></td></tr></table></figure><h2 id="剪切板clipboard">2.3. 剪切板clipboard</h2><blockquote><p>点击按钮实现复制功能，主要时转到app应用中传递商品ID  </p></blockquote><h3 id="引入clipboard-js">2.3.1. 引入clipboard.js</h3><ul><li>安装  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> clipboard <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h2 id="vue-awesome-swiper滑动插件">2.4. vue-awesome-swiper滑动插件</h2><p>参考博客：<a href="https://www.jianshu.com/p/fece694a6959" target="_blank" rel="noopener">使用vue-awesome-swiper滑块插件</a>  </p><ul><li>安装swiper  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vue-awesome-swiper <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h2 id="测试接口">2.5. 测试接口</h2><p>可以在<a href="https://www.easy-mock.com" target="_blank" rel="noopener">Easy Mock</a>自定义获取商品详情信息的接口。  </p><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/52977910.jpg" alt=""></p><ul><li>json数据参考：  </li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"data"</span>: &#123;        </span><br><span class="line">    <span class="attr">"barCode"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"contentList"</span>: [            &#123;                </span><br><span class="line">      <span class="attr">"content"</span>: <span class="string">"https://static.wdh158.com/61d464d0-1548-45e8-8df2-667e36ee66ec.png"</span>,</span><br><span class="line">                      <span class="attr">"goodsId"</span>: <span class="number">130</span>,</span><br><span class="line">                      <span class="attr">"id"</span>: <span class="number">2978</span>,</span><br><span class="line">                      <span class="attr">"orders"</span>: <span class="number">0</span>,</span><br><span class="line">                      <span class="attr">"type"</span>: <span class="number">2</span>            </span><br><span class="line">    &#125;,              &#123;                </span><br><span class="line">      <span class="attr">"content"</span>: <span class="string">"https://static.wdh158.com/9b3213b0-d85c-4d12-9983-72149b4fa96c.png"</span>,</span><br><span class="line">                      <span class="attr">"goodsId"</span>: <span class="number">130</span>,</span><br><span class="line">                      <span class="attr">"id"</span>: <span class="number">2979</span>,</span><br><span class="line">                      <span class="attr">"orders"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"type"</span>: <span class="number">2</span>            </span><br><span class="line">    &#125;,              &#123;                </span><br><span class="line">      <span class="attr">"content"</span>: <span class="string">"https://static.wdh158.com/upload/20180225/fc8e2e19ab1941deaa3de1e5bd68c5de.jpg"</span>,</span><br><span class="line">                      <span class="attr">"goodsId"</span>: <span class="number">130</span>,</span><br><span class="line">                      <span class="attr">"id"</span>: <span class="number">2988</span>,</span><br><span class="line">                      <span class="attr">"orders"</span>: <span class="number">2</span>,</span><br><span class="line">                      <span class="attr">"type"</span>: <span class="number">2</span>            </span><br><span class="line">    &#125;        ],</span><br><span class="line">            <span class="attr">"cover"</span>: <span class="string">"https://static.wdh158.com/a196ca7f-269e-42f8-b650-874aad573560mmexport1519527875279.jpg"</span>,</span><br><span class="line">            <span class="attr">"deduction"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"goodId"</span>: <span class="number">130</span>,</span><br><span class="line">            <span class="attr">"imageList"</span>: [            &#123;                </span><br><span class="line">      <span class="attr">"goods_id"</span>: <span class="number">0</span>,</span><br><span class="line">                      <span class="attr">"id"</span>: <span class="number">2125</span>,</span><br><span class="line">                      <span class="attr">"orders"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"source"</span>: <span class="string">"https://static.wdh158.com/a196ca7f-269e-42f8-b650-874aad573560mmexport1519527875279.jpg"</span>,</span><br><span class="line">                      <span class="attr">"thumb_nail"</span>: <span class="string">""</span>,</span><br><span class="line">                      <span class="attr">"title"</span>: <span class="string">"https://static.wdh158.com/a196ca7f-269e-42f8-b650-874aad573560mmexport1519527875279.jpg"</span>,</span><br><span class="line">                      <span class="attr">"type"</span>: <span class="number">1</span>            </span><br><span class="line">    &#125;,              &#123;                </span><br><span class="line">      <span class="attr">"goods_id"</span>: <span class="number">0</span>,</span><br><span class="line">                      <span class="attr">"id"</span>: <span class="number">2126</span>,</span><br><span class="line">                      <span class="attr">"orders"</span>: <span class="number">2</span>,</span><br><span class="line">                      <span class="attr">"source"</span>: <span class="string">"https://static.wdh158.com/fb489355-c1fb-4858-b393-578b3ce28ed3mmexport1519527876761.jpg"</span>,</span><br><span class="line">                      <span class="attr">"thumb_nail"</span>: <span class="string">""</span>,</span><br><span class="line">                      <span class="attr">"title"</span>: <span class="string">"https://static.wdh158.com/a196ca7f-269e-42f8-b650-874aad573560mmexport1519527875279.jpg"</span>,</span><br><span class="line">                      <span class="attr">"type"</span>: <span class="number">1</span>            </span><br><span class="line">    &#125;,              &#123;                </span><br><span class="line">      <span class="attr">"goods_id"</span>: <span class="number">0</span>,</span><br><span class="line">                      <span class="attr">"id"</span>: <span class="number">2127</span>,</span><br><span class="line">                      <span class="attr">"orders"</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">"source"</span>: <span class="string">"https://static.wdh158.com/d154011c-b61b-48ad-89c7-0f0d028e528bmmexport1519527878772.jpg"</span>,</span><br><span class="line">                      <span class="attr">"thumb_nail"</span>: <span class="string">""</span>,</span><br><span class="line">                      <span class="attr">"title"</span>: <span class="string">"https://static.wdh158.com/a196ca7f-269e-42f8-b650-874aad573560mmexport1519527875279.jpg"</span>,</span><br><span class="line">                      <span class="attr">"type"</span>: <span class="number">1</span>            </span><br><span class="line">    &#125;,              &#123;                </span><br><span class="line">      <span class="attr">"goods_id"</span>: <span class="number">0</span>,</span><br><span class="line">                      <span class="attr">"id"</span>: <span class="number">2134</span>,</span><br><span class="line">                      <span class="attr">"orders"</span>: <span class="number">4</span>,</span><br><span class="line">                      <span class="attr">"source"</span>: <span class="string">"https://static.wdh158.com/upload/20180225/1185961bafbc48e19fdde8db639e4a9b.jpg"</span>,</span><br><span class="line">                      <span class="attr">"thumb_nail"</span>: <span class="string">""</span>,</span><br><span class="line">                      <span class="attr">"title"</span>: <span class="string">"https://static.wdh158.com/a196ca7f-269e-42f8-b650-874aad573560mmexport1519527875279.jpg"</span>,</span><br><span class="line">                      <span class="attr">"type"</span>: <span class="number">1</span>            </span><br><span class="line">    &#125;        ],</span><br><span class="line">            <span class="attr">"millId"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"神州亮剑去油王500g×3瓶"</span>,</span><br><span class="line">            <span class="attr">"parameterList"</span>: [            &#123;                </span><br><span class="line">      <span class="attr">"cost"</span>: <span class="number">25</span>,</span><br><span class="line">                      <span class="attr">"deduction"</span>: <span class="number">0</span>,</span><br><span class="line">                      <span class="attr">"fen"</span>: <span class="number">0</span>,</span><br><span class="line">                      <span class="attr">"goodsId"</span>: <span class="number">130</span>,</span><br><span class="line">                      <span class="attr">"id"</span>: <span class="number">410</span>,</span><br><span class="line">                      <span class="attr">"name"</span>: <span class="string">"500g/桶 3桶/组"</span>,</span><br><span class="line">                      <span class="attr">"orders"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"price"</span>: <span class="number">36</span>,</span><br><span class="line">                      <span class="attr">"stock"</span>: <span class="number">904</span>,</span><br><span class="line">                      <span class="attr">"type"</span>: <span class="number">0</span>            </span><br><span class="line">    &#125;        ],</span><br><span class="line">            <span class="attr">"price"</span>: <span class="number">36</span>,</span><br><span class="line">            <span class="attr">"saleCount"</span>: <span class="number">103</span>,</span><br><span class="line">            <span class="attr">"supplierName"</span>: <span class="string">"廊坊市芮芙利化工有限责任公司"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"volume"</span>: <span class="number">81</span>    </span><br><span class="line">  &#125;,</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"成功"</span>,</span><br><span class="line">      <span class="attr">"success"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vant </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (五)：Ribbon--负载均衡器</title>
      <link href="/springcloud-ribbon-learning.html"/>
      <url>/springcloud-ribbon-learning.html</url>
      <content type="html"><![CDATA[<h1 id="Ribbon简介">1. Ribbon简介</h1><p>之前在<a href="https://www.ddebug.cn/springcloud-eureka-learning.html">Spring Cloud Eureka–服务注册发现</a>一文中学习过服务端发现和客户端发现的两种服务注册发现方式。<br>Eureka属于客户端发现。Eureka的负载均衡是软负载，也就是客户端会向服务器（Eureka Server）拉取已注册的可用的服务信息，然后根据负载均衡策略命中哪台机器发送服务请求。整个过程都是在客户端完成，并不需要服务器（Eureka Server）参与。<br>SpringCloud的<strong>客户端负载均衡</strong>就是<strong>Ribbon</strong>组件，它是基于<strong>Netflix Ribbon</strong>组件实现的，通过SpringCloud的封装，可以轻松的面向服务的Rest模板请求，自动转化为客户端负载均衡服务调用。  </p><h2 id="Ribbon应用">1.1. Ribbon应用</h2><blockquote><p>Spring Cloud在结合了Ribbon的负载均衡实现中，封装增加了HttpClient和OkHttp两种请求端实现，默认使用了Ribbon对Eureka服务发现的负载均衡client。  </p></blockquote><ul><li><p><strong>RestTemplate</strong><br>在<a href="https://www.ddebug.cn/springcloud-feign-learning.html">Spring Cloud Feign–应用通信</a> 一文中我们介绍了服务间通信RestTemplate的三种使用方式；<br>通过添加@LoadBalanced注解或者直接@AutoWired注入LoadBalancerClient，其实就是试用了Ribbon的组件；  </p><blockquote><p>添加@LoadBalanced注解后，Ribbon会通过LoadBalancerClient自动的帮助你基于某种规则，比如简单的轮询、随机连接等去连接目标服务，从而很容易使用Ribbon实现服务的负载均衡算法。</p></blockquote></li><li><p><strong>Feign</strong>  </p></li><li><strong>Zuul</strong>  </li></ul><h2 id="Ribbon核心">1.2. Ribbon核心</h2><p>Ribbon实现负载均衡，核心有三点：  </p><ul><li><p><strong>服务发现</strong>  </p><blockquote><p>发现依赖服务的列表，通俗讲，依据服务的名字，把该服务所有的实例都找出来  </p></blockquote></li><li><p><strong>服务选择规则</strong>  </p><blockquote><p>依据规则策略（轮询、随机），如何从多个服务找到有效的服务  </p></blockquote></li><li><p><strong>服务监听</strong>  </p><blockquote><p>检测失效的服务，做到高效剔除  </p></blockquote></li></ul><h2 id="Ribbon主要组件">1.3. Ribbon主要组件</h2><blockquote><p>整体流程：首先通过ServerList来获取所有的可用服务列表，然后通过ServerListFilter过滤掉一部分地址，最后剩下的地址中通过IRule选择一个实例作为最终目标结果。</p></blockquote><ul><li><strong>ServerList</strong>  </li><li><strong>Rule</strong>  </li><li><strong>ServerListFilter</strong>  </li></ul><h1 id="源码分析">2. 源码分析</h1><p><a href="https://blog.csdn.net/forezp/article/details/74820899" target="_blank" rel="noopener">深入理解Ribbon之源码解析</a>  </p>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Ribbon </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (四)：Feign--应用通信</title>
      <link href="/springcloud-feign-learning.html"/>
      <url>/springcloud-feign-learning.html</url>
      <content type="html"><![CDATA[<h1 id="应用间通信方式">1. 应用间通信方式</h1><blockquote><p>主要有两种: HTTP, RPC  </p></blockquote><h2 id="HTTP">1.1. HTTP</h2><p>代表：<strong>Spring Cloud</strong>。  </p><blockquote><p>SpringCloud目标是微服务架构下的一站式解决方案。<br>SpringCloud微服务架构下，微服务之间使用<strong>HTTP RESTful</strong>方式进行通信，RESTful本身轻量、易用、适用性强，可以很容易的跨语言、跨平台。    </p></blockquote><h2 id="RPC">1.2. RPC</h2><p>代表：<strong>Dubbo</strong>  </p><blockquote><p>Dubbo本身就是一个基于RPC的框架，基于Dubbo开发的应用还是要依赖周边的平台与生态。相比其他的RPC框架，Dubbo在服务治理集成上非常完善，不仅提供了<strong>服务注册发现</strong>，<strong>负载均衡</strong>，<strong>路由</strong>等面向<strong>分布式系统</strong>的基础能力，还涉及了面向开发测试阶段<strong>MOCK</strong>等机制，同时也提供了服务治理的可监控可视化平台。    </p></blockquote><h1 id="Spring-Cloud-RESTful调用方式">2. Spring Cloud RESTful调用方式</h1><h2 id="RestTemplate">2.1. RestTemplate</h2><p>RestTemplate是一个Http客户端，功能和Java框架中的HttpClient差不多，用法更简单。<br>下面使用订单服务调用商品服务演示RestTemplate的三种使用方式。  </p><h3 id="第一种：直接使用restTemplate-url写死">2.1.1. 第一种：直接使用restTemplate, url写死</h3><blockquote><p>不知道对方ip，这种方式写死Url，非常不好。  </p></blockquote><ul><li><p>product服务：ServerController.java  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试服务</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/msg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this is product' msg"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>order服务：ClientController.java   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用远程服务</span></span><br><span class="line">        <span class="comment">// 1. 第一种方式（直接使用restTemplate, url写死）</span></span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        String response = restTemplate.getForObject(<span class="string">"http://localhost:8080/msg"</span>, String.class);</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">"response=&#123;&#125;"</span>, response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二种方式：loadBalancerClient">2.1.2. 第二种方式：loadBalancerClient</h3><blockquote><p>利用loadBalancerClient通过应用名称获取url（ip地址和端口），然后在使用restTemplate    </p></blockquote><ul><li>order服务：ClientController.java   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用远程服务</span></span><br><span class="line">        <span class="comment">// 2. 第二种方式（利用loadBalancerClient通过应用名称获取url，然后在使用restTemplate）</span></span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancerClient.choose(<span class="string">"PRODUCT"</span>);</span><br><span class="line">        String url = String.format(<span class="string">"http://%s:%s"</span>, serviceInstance.getHost(), serviceInstance.getPort()) + <span class="string">"/msg"</span>;</span><br><span class="line">        String response = restTemplate.getForObject(url, String.class);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"response=&#123;&#125;"</span>, response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第三种方式">2.1.3. 第三种方式</h3><blockquote><p>利用@LoadBalanced，可在restTemplate里使用应用名称”PRODUCT”  </p></blockquote><ul><li><p>创建RestTemplate配置类：  </p><blockquote><p>重点注解<strong>@LoadBalanced</strong>   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>order服务：ClientController.java  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用远程服务       </span></span><br><span class="line">        <span class="comment">// 3. 第三种方式（利用@LoadBalanced，可在restTemplate里使用应用名称"PRODUCT"）</span></span><br><span class="line">        String response = restTemplate.getForObject(<span class="string">"http://PRODUCT/msg"</span>, String.class);</span><br><span class="line">        log.info(<span class="string">"response=&#123;&#125;"</span>, response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="测试">2.1.4. 测试</h3><blockquote><p>启动order、product服务，访问地址<code>http://localhost:8081/getProductMsg</code>，成功调用远程服务Product。<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-21/11377641.jpg" alt=""></p></blockquote><h2 id="Feign">2.2. Feign</h2><p>在学习Feign之前，首先学习一下<a href="">Spring Cloud负载均衡器Ribbion</a>。  </p><h3 id="引入Feign">2.2.1. 引入Feign</h3><blockquote><p>order项目中引入feign  </p></blockquote><ul><li><p>pom.xml：添加依赖  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>OrderApplication.java：启动类添加注解<strong>EnableFeignClients</strong>开启Feign    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="定义调用的接口">2.2.2. 定义调用的接口</h3><blockquote><p>看似和服务端Product的接口类似，只是在<strong>客户端</strong>声明了你需要调用的<strong>服务端</strong>的方法的接口<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-21/47328269.jpg" alt=""></p></blockquote><ul><li>ProductClient.java  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 调用远程服务的接口列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/msg"</span>)</span><br><span class="line">    <span class="function">String <span class="title">productMsg</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="调用接口">2.2.3. 调用接口</h3><ul><li>ClientFeignController.java  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: Feign调用远程服务Product</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductClient productClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductMsgByFeign"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String response = productClient.productMsg();</span><br><span class="line">        log.info(<span class="string">"response=&#123;&#125;"</span>, response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Feign特点">2.3. Feign特点</h2><p><strong>Feign内部使用了Ribbion负载均衡</strong>，从上面实战测试可以总结一下几点：  </p><ul><li><p><strong>声名式REST客户端（伪RPC）</strong>   </p><blockquote><p>感觉是在用RPC，完全感觉不到这是远程方法，更感知不到这是一个Http请求，但Feign本质还是Http客户端，通过Feign把Http远程调用对开发者完全透明，得到<strong>与调用本地方法</strong>一致的编码体验。  </p></blockquote></li><li><p><strong>采用基于接口的注解</strong>  </p><blockquote><p>定义接口(ProductClient)，在接口里添加注解  </p></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (三)：微信点餐业务服务拆分</title>
      <link href="/wechat-ordering-service-split.html"/>
      <url>/wechat-ordering-service-split.html</url>
      <content type="html"><![CDATA[<h1 id="点餐业务服务拆分">1. 点餐业务服务拆分</h1><h2 id="服务拆分方式">1.1. 服务拆分方式</h2><h3 id="第一种">1.1.1. 第一种</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/2485616.jpg" alt=""></p><ul><li><p>手机端（买家端）  </p><blockquote><p>基于Node.js的Vue买家端appUI放到nginx里，作为一个边缘服务  </p></blockquote></li><li><p>PC端（卖家端）  </p><blockquote><p>基于Freemarker的网页传统CMS管理中心，作为另外一个边缘服务  </p></blockquote></li></ul><h3 id="第二种">1.1.2. 第二种</h3><blockquote><p>按照业务划分<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/13179126.jpg" alt=""></p></blockquote><h3 id="点餐项目拆分">1.1.3. 点餐项目拆分</h3><ol><li>上面两种方式都不合适  <blockquote><p>如果点餐项目自己的小店，Boss是我，开发是我，运维是我，自己上线；如果微服务拆分，反而没必要，增加部署难度；<br>如果属于IT公司的点餐项目，服务增长迅速，具有充足的前后端开发人员，可以依据业务分成小组，一个小组对应一个微服务；  </p></blockquote></li></ol><h2 id="服务拆分方法论">1.2. 服务拆分方法论</h2><h3 id="扩展立方模型（Scale-Cube）">1.2.1. 扩展立方模型（Scale Cube）</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/95279509.jpg" alt=""></p><ul><li><p>X轴 —— 水平复制  </p><blockquote><p>通过副本扩展，将应用程序水平复制，通过负载均衡运行多个完全就一样的副本的方式，来实现应用程序的伸缩性，提高应用程序的容量和可用度；  </p></blockquote></li><li><p>Z轴 —— 数据分区  </p><blockquote><p>每个服务器负责一个数据子集，每个服务器运行的代码是一样的；  </p></blockquote></li><li><p>Y轴 —— 功能解耦  </p><blockquote><p>将不同的职责模块分成不同的功能服务  </p></blockquote></li></ul><h3 id="如何拆分数据">1.2.2. 如何拆分数据</h3><ul><li><p>每个微服务都有单独的数据存储  </p><blockquote><p>微服务间共享一个数据存储，将紧密耦合。比如更改一个微服务中的数据库的表结构，可能导致另外一个微服务出现问题。<br>拥有自己的数据库后，要避免访问别的服务的数据库；<br>一个服务所拥有的数据，只能通过这个服务提供的API接口来访问，服务之间都是有隔离的；  </p></blockquote></li><li><p>依据服务特点选择不同结构的数据库类型  </p><blockquote><p>比如node.js开发的前置服务，主要是展示类型的数据，类型丰富，对事务要求不高，可以考虑使用NoSql的Mongo数据库；<br>比如专门做搜索类型的服务，可以考虑使用<strong>Elasticsearch</strong>即ES这样的存储；<br>对事务要求较高的比如订单、商品等，优先考虑支持事务的关系型数据库如<strong>MySQL</strong>;  </p></blockquote></li><li><p>针对边界设计API（视频教程4-12未完待续补充）  </p><blockquote><p>比如用户服务，拥有自己的数据库，包含了完整的用户信息：密码、用户名、状态、登陆时间、注册时间等；<br>对内部的其他服务暴露API接口，其他服务可以通过接口的方式查询自己关心的用户信息；支付服务关心用户的状态(是否被锁定，是否被冻结，用户的渠道等等)；积分的服务关心用户的注册操作时间等；</p></blockquote></li></ul><h3 id="如何拆分功能">1.2.3. 如何拆分功能</h3><ul><li><p><strong>单一职责，松耦合、高内聚</strong>  </p><blockquote><p>单一职责：每个服务只负责业务功能中一个单独的部分；<br>松耦合：服务之间耦合度低，修改一个服务不会导致另外一个服务修改；<br>高内聚：服务内部相关的服务都聚在一个服务之中，而不是分散在不同的服务之中；  </p></blockquote></li><li><p><strong>关注点分离</strong>  </p><blockquote><p>按职责：给我们的服务进行分类。比如按业务领域划分的服务，职责比较单一，比如订单、支付、商品等等；<br>按通用性：与业务无关的基础的通用的组件。比如消息服务、用户服务；<br>按粒度级别：微服务的粒度不是越小越好，根据业务的发展、规模具体分析。  </p></blockquote></li></ul><h3 id="服务和数据的关系">1.2.4. 服务和数据的关系</h3><h4 id="先考虑业务功能，再考虑数据">1.2.4.1. 先考虑业务功能，再考虑数据</h4><h4 id="无状态服务">1.2.4.2. 无状态服务</h4><blockquote><p>状态：如果一个数据需要被多个服务共享，才能完成一个请求，就可以成为状态；<br>依赖这个状态的服务称为有状态服务；<br>微服务中并不是说不允许存在有状态服务，而是把有状态的服务改变为无状态的服务。  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/67053361.jpg" alt=""></p><blockquote><p>比如上图显示的以前学习的点餐系统在本地内存中建立的数据缓存–session缓存，在现在的微服务架构中，迁移到分布式缓存中；<br>让业务服务变成一个无状态的计算节点；<br>迁移后，后端业务服务就可以按需动态伸缩，在运行时动态增删节点，不用再考虑缓存数据如何同步的问题。  </p></blockquote><h2 id="点餐业务服务拆分分析">1.3. 点餐业务服务拆分分析</h2><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/31223826.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud学习过程中遇到问题总结</title>
      <link href="/springcloud-learning-questions.html"/>
      <url>/springcloud-learning-questions.html</url>
      <content type="html"><![CDATA[<h1 id="遇到解决问题">1. 遇到解决问题</h1><h2 id="Process-finished-with-exit-code-0">1.1. Process finished with exit code 0</h2><blockquote><p>启动新建Eureka-client客户端项目时，自动结束了项目  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.656</span>  INFO <span class="number">13796</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Single vip registry refresh property : <span class="keyword">null</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.656</span>  INFO <span class="number">13796</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Force full registry fetch : <span class="keyword">false</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.656</span>  INFO <span class="number">13796</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Application is <span class="keyword">null</span> : <span class="keyword">false</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.656</span>  INFO <span class="number">13796</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Registered Applications size is zero : <span class="keyword">true</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.656</span>  INFO <span class="number">13796</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Application version is -<span class="number">1</span>: <span class="keyword">true</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.656</span>  INFO <span class="number">13796</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.978</span>  INFO <span class="number">13796</span> --- [           main] com.netflix.discovery.DiscoveryClient    : The response status is <span class="number">200</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.983</span>  INFO <span class="number">13796</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Starting heartbeat executor: renew interval is: <span class="number">30</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.987</span>  INFO <span class="number">13796</span> --- [           main] c.n.discovery.InstanceInfoReplicator     : InstanceInfoReplicator onDemand update allowed rate per min is <span class="number">4</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.992</span>  INFO <span class="number">13796</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp <span class="number">1526194127990</span> with initial instances count: <span class="number">1</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.996</span>  INFO <span class="number">13796</span> --- [           main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application client with eureka with status UP</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.996</span>  INFO <span class="number">13796</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=<span class="number">1526194127996</span>, current=UP, previous=STARTING]</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">47.999</span>  INFO <span class="number">13796</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_CLIENT/localhost:client:<span class="number">8090</span>: registering service...</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.014</span>  INFO <span class="number">13796</span> --- [           main] com.hunter.client.ClientApplication      : Started ClientApplication in <span class="number">8.655</span> seconds (JVM running <span class="keyword">for</span> <span class="number">12.228</span>)</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.017</span>  INFO <span class="number">13796</span> --- [      Thread-<span class="number">37</span>] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@<span class="number">5</span>b478eab: startup date [Sun May <span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">43</span> CST <span class="number">2018</span>]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@<span class="number">2140</span>de63</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.019</span>  INFO <span class="number">13796</span> --- [      Thread-<span class="number">37</span>] o.s.c.n.e.s.EurekaServiceRegistry        : Unregistering application client with eureka with status DOWN</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.019</span>  WARN <span class="number">13796</span> --- [      Thread-<span class="number">37</span>] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=<span class="number">1526194128019</span>, current=DOWN, previous=UP]</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.021</span>  INFO <span class="number">13796</span> --- [      Thread-<span class="number">37</span>] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase <span class="number">0</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.025</span>  INFO <span class="number">13796</span> --- [      Thread-<span class="number">37</span>] com.netflix.discovery.DiscoveryClient    : Shutting down DiscoveryClient ...</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.069</span>  INFO <span class="number">13796</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_CLIENT/localhost:client:<span class="number">8090</span> - registration status: <span class="number">204</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.070</span>  INFO <span class="number">13796</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_CLIENT/localhost:client:<span class="number">8090</span>: registering service...</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.074</span>  INFO <span class="number">13796</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_CLIENT/localhost:client:<span class="number">8090</span> - registration status: <span class="number">204</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.075</span>  INFO <span class="number">13796</span> --- [      Thread-<span class="number">37</span>] com.netflix.discovery.DiscoveryClient    : Unregistering ...</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.081</span>  INFO <span class="number">13796</span> --- [      Thread-<span class="number">37</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_CLIENT/localhost:client:<span class="number">8090</span> - deregister  status: <span class="number">200</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.091</span>  INFO <span class="number">13796</span> --- [      Thread-<span class="number">37</span>] com.netflix.discovery.DiscoveryClient    : Completed shut down of DiscoveryClient</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.092</span>  INFO <span class="number">13796</span> --- [      Thread-<span class="number">37</span>] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48.092</span>  INFO <span class="number">13796</span> --- [      Thread-<span class="number">37</span>] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans</span><br><span class="line">Disconnected from the target VM, address: <span class="string">'127.0.0.1:60152'</span>, transport: <span class="string">'socket'</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>解决方案：<a href="https://blog.csdn.net/qq920447939/article/details/80189347" target="_blank" rel="noopener">原参考链接</a></li><li>pom.xml文件添加依赖: <strong>spring-boot-starter-web</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web应用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (二)：Eureka--服务注册发现</title>
      <link href="/springcloud-eureka-learning.html"/>
      <url>/springcloud-eureka-learning.html</url>
      <content type="html"><![CDATA[<h1 id="了解服务注册发现">1. 了解服务注册发现</h1><p>参考博客<a href="https://www.cnblogs.com/woshimrf/p/springclout-eureka.html" target="_blank" rel="noopener">SpringCloud学习1-服务注册与发现(Eureka)</a>  </p><h2 id="分布式系统中为什么需要服务发现？">1.1. 分布式系统中为什么需要服务发现？</h2><ol><li><p>只有两个服务，他们都有自己的地址   </p><blockquote><p>此时如果A服务调用B服务，只需在A服务中配置B服务地址<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/86609379.jpg" alt=""></p></blockquote></li><li><p>分布式服务，单节点A如何寻找多节点的服务B   </p><blockquote><p>当B节点不多的时候，我们可以把所有的节点B的地址全都配置在A中<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/17463888.jpg" alt=""></p></blockquote></li><li><p>在2的基础上，B服务节点有100个甚至更多  </p><blockquote><p>此时就不能使用上面的方法，把所有的B服务的地址全部配置在A服务中了。<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/28706408.jpg" alt=""></p></blockquote></li><li><p>而且现在云服务时代，B服务数量有可能不停动态变化：  </p><blockquote><p>当流量小时，B服务数量减少； 当流量大时，就需要更多的B服务；<br>而且B服务也有可能随时挂掉。  </p></blockquote></li></ol><h2 id="引入注册中心">1.2. 引入注册中心</h2><h3 id="分析">1.2.1. 分析</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/28338490.jpg" alt=""></p><ol><li>B启动时，就把自己地址上报到注册中心；  </li><li>A如果调用B服务，就去注册中心获取B服务的地址信息即可  </li><li>因此，分布式系统中，服务注册中心是最重要的基础部分  <blockquote><p>随时都应该处于提供服务的状态，无论是Eureka还是其他相同功能的组件，承担分布式系统中的注册中心都应该是高可用的，也都是基本采用集群的解决方案；  </p></blockquote></li></ol><h3 id="服务发现的两种方式">1.2.2. 服务发现的两种方式</h3><ol><li><p><strong>客户端发现</strong>：A直接去注册中心查询B服务信息<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/28338490.jpg" alt=""></p><blockquote><p>A从注册中心拿到一堆B服务的地址，通过轮询、随机、哈希等等（就是负载均衡机制）从众多可用的B服务挑选一个，通过ip地址找到一个B服务；<br>这种就是<strong>客户端发现</strong>，是由A发起的。  </p></blockquote></li><li><p><strong>服务端发现</strong><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-14/7650221.jpg" alt=""></p><blockquote><p>增加<strong>代理</strong>，帮A从众多可用的B中挑选一个出来  </p></blockquote></li></ol><h4 id="客户端发现">1.2.2.1. 客户端发现</h4><ul><li><strong>Eureka</strong>  </li></ul><h4 id="服务端发现">1.2.2.2. 服务端发现</h4><ul><li><p><strong>Nginx</strong>  </p><blockquote><p>Nginx不仅可以作为Http反向代理服务器和负载均衡器；<br>也可以作为服务发现的负载均衡器  </p></blockquote></li><li><p><strong>zookeeper</strong>  </p><blockquote><p>作为Dubbo的注册中心  </p></blockquote></li><li><p><strong>Kubernetes</strong>  </p></li></ul><h2 id="微服务异构">1.3. 微服务异构</h2><h3 id="异构特点">1.3.1. 异构特点</h3><ul><li>不同语言  <blockquote><p>各个服务间可以用不同的开发语言实现  </p></blockquote></li></ul><p>*不同类型的数据库  </p><blockquote><p>每个服务根据需要选择适合自己的数据库  </p></blockquote><h3 id="SpringCloud的服务调用方式">1.3.2. SpringCloud的服务调用方式</h3><blockquote><p>Spring Cloud是一个强大的微服务框架，但它是纯java的；<br>但微服务落地时，特别是越大的微服务系统，遇到的非java部分也是99%以上了，因为每种语言都有自己的优势；<br>针对不同的语言，如何实现轻量级的通信呢？  </p></blockquote><ul><li><strong>RESTapi接口</strong>  <blockquote><p>比较流行的还有RPC<br>Eureka支持将非java语言实现的服务纳入到自己的服务治理体系中来，只需要其他语言自己实现Eureka client的客户端程序；<br>比如Node.js的eureka-js-client  </p></blockquote></li></ul><h1 id="Spring-Cloud-Eureka简介">2. Spring Cloud Eureka简介</h1><p>基于Netflix Eureka做了二次封装  </p><h2 id="Eureka-两个组件">2.1. Eureka 两个组件</h2><ol><li><p>Eureka Server 注册中心  </p><blockquote><p>Eureka服务端供服务注册的服务器;<br>系统其它微服务使用Eureka客户端连接到注册中心，并维持心跳连接，监控系统各个微服务是否正常运行  </p></blockquote></li><li><p>Eureka Client 服务注册  </p><blockquote><p>Eureka客户端用来简化客户端与服务的交互；<br>作为轮询负载均衡器，并提供服务的故障切换功能。  </p></blockquote></li></ol><h1 id="Eureka-Server高可用">3. Eureka Server高可用</h1><blockquote><p>生产环境一定要高可用（大于等于2个Server节点）；<br>开发环境使用一个就可以了  </p></blockquote><h2 id="单点">3.1. 单点</h2><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/22118683.jpg" alt=""></p><h2 id="双节点">3.2. 双节点</h2><blockquote><p>实现Server节点的相互注册<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/61755903.jpg" alt=""></p></blockquote><h3 id="idea启动两个实例">3.2.1. idea启动两个实例</h3><ul><li><p>修改Run/debug configurations<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/78385075.jpg" alt=""></p></li><li><p>application.yml  </p><blockquote><p>注释掉端口配置  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 开发环境配置，生产环境不要配置（不显示警告)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka</span></span><br><span class="line"><span class="comment">#server:</span></span><br><span class="line"><span class="comment">#  port: 8761</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>启动8761时，修改注册地址为8762<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/77448070.jpg" alt=""></p></li><li><p>启动8762时，修改注册地址为8761<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/84789552.jpg" alt=""></p></li><li><p>client端，注册地址为8761，启动<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/413485.jpg" alt=""></p></li><li><p>浏览器访问Eureka server 8761和8762  </p><blockquote><p>会发现此时两个注册中心都注册了client服务  </p></blockquote></li></ul><h3 id="测试高可用">3.2.2. 测试高可用</h3><ol><li>停止注册中心8761，发现8762上依然以后client服务；  </li><li>在1的基础上停止client服务，发现8762上依然有client服务，这是由于心跳机制缓存；  </li><li>重启client服务，发现8762上client服务消失，因为client的application.yml中只配置了8761；  </li><li>我们可以在client的application.yml中配置两个注册中心地址：  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8762/eureka/,http://localhost:8762/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">client</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="三节点：两两注册">3.3. 三节点：两两注册</h2><blockquote><p>本质上和双节点是一样的，Eureka Server之间互相注册，client客户端注册所有服务注册中心地址<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/29622199.jpg" alt=""></p></blockquote><h3 id="Eureka-Server配置">3.3.1. Eureka Server配置</h3><blockquote><p>application.yml注册地址端口号  </p></blockquote><ul><li>8761 ==&gt; 8762,8763  </li><li>8762 ==&gt; 8761,8763</li><li>8763 ==&gt; 8761,8762  </li></ul><h3 id="Eureka-Client配置">3.3.2. Eureka Client配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8762/eureka/,</span> <span class="attr">http://localhost:8762/eureka/,</span> <span class="attr">http://localhost:8762/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">client</span></span><br></pre></td></tr></table></figure><h1 id="Eureka总结">4. Eureka总结</h1><ul><li><p><strong>@EnableEurekaServer @EnableEurekaClient</strong>  </p><blockquote><p>这两个注解分别启动Server和client；<br>Eureka Server会提供服务注册功能，各个服务节点启动后会在Eureka Server中注册，这样就有了所有服务节点的注册信息。  </p></blockquote></li><li><p><strong>心跳检测</strong>  </p><blockquote><p>如果在系统运行期间，某个服务节点挂掉，也就是在规定的时间内没有发送心跳信号；<br>这个时候就会被Eureka Server自动剔除掉  </p></blockquote></li><li><p><strong>健康检查</strong>  </p></li><li><p><strong>负载均衡</strong>  </p><blockquote><p>如果某个服务的流量增加，你只需要增加相应的服务节点即可  </p></blockquote></li><li><p><strong>Eureka的高可用</strong>  </p><blockquote><p>生产上建议至少两台以上，不要单台  </p></blockquote></li><li><p><strong>分布式系统中，服务注册中心是最重要的基础部分</strong>  </p></li></ul>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 实战 (一)：初识微服务架构与Spring Cloud</title>
      <link href="/springcloud-microservices-learning-action.html"/>
      <url>/springcloud-microservices-learning-action.html</url>
      <content type="html"><![CDATA[<p>学习期间参考了大神博客：</p><ol><li><a href="https://segmentfault.com/blog/spring-cloud" target="_blank" rel="noopener">springCloud Finchley 从入门到精通实战系列</a>  </li><li><a href="https://windmt.com/tags/Spring-Cloud/page/2/" target="_blank" rel="noopener">Spring Cloud 学习 【Finchley版】</a>  </li><li><a href="https://www.jianshu.com/p/c52b1089ea92" target="_blank" rel="noopener">Spring Cloud 2 Finchley.M9 概览</a>  </li></ol><h1 id="微服务架构简介">1. 微服务架构简介</h1><blockquote><p>微服务是一种架构风格，她不是某种组件或某种框架；比如我们熟悉的RESTful，也是一种架构风格；<br>架构风格即没有强制性，没有绝对标准的答案，是一种建议，可以有不同细节的实现。  </p></blockquote><h2 id="官方定义">1.1. 官方定义</h2><blockquote><p>In short, the microservice architectural style is an approach to developing a single application as <strong>a suite of small services</strong>,<br>each <strong>running in its own process</strong> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <strong>built<br>around business capabilities</strong> and <strong>independently deployable</strong> by fully automated deployment machinery. There is <strong>a bare minimum of centralized<br>management of these servicesJ</strong>, which may be written in different programming languages and use different data storage technologies.  </p></blockquote><h3 id="官方定义重点">1.1.1. 官方定义重点</h3><ul><li><p>一系列微小的服务共同组成  </p><blockquote><p>对应传统的单体应用：一个服务  </p></blockquote></li><li><p>跑在自己的进程里  </p><blockquote><p>任何一个微服务，都有自己的独立进程，互不干扰  </p></blockquote></li><li><p>每个服务为独立的业务开发  </p><blockquote><p>微服务要围绕业务围绕领域模型建造：服务拆分  </p></blockquote></li><li><p>独立部署  </p></li><li><p>分布式的管理  </p><blockquote><p>对应传统的集中式管理  </p></blockquote></li></ul><h2 id="传统架构">1.2. 传统架构</h2><h3 id="点餐系统涉及的架构形态">1.2.1. 点餐系统涉及的架构形态</h3><p>点击回顾之前的<a href="https://www.ddebug.cn/springboot-wechat-ordering-project-summary.html#more">SpringBoot微信点餐系统</a>  </p><ul><li><p>单体架构  </p><blockquote><p>一个工程构建之后是一个war包  </p></blockquote></li><li><p>基于Ajax的前后端分离  </p></li><li><p>分布式（水平扩展 &amp; 服务拆分）  </p></li></ul><h3 id="单体架构">1.2.2. 单体架构</h3><h4 id="以点餐系统为例">1.2.2.1. 以点餐系统为例</h4><p>下图显示点餐系统卖家端业务:  </p><ol><li><p>传统的CMS后台管理系统  </p><blockquote><p>包含了商品、订单、类目三种服务，这三种服务对应了三种业务逻辑代码，可以把它看成整体就是单体架构的应用；  </p></blockquote></li><li><p>所有应用打包成一个war/jar包，整体上没有外部依赖  </p><blockquote><p>这里外部依赖不是指pom.xml文件里的各种dependency，意思是订单依赖商品服务，但此时是一个整体，整合到一个war包里了  </p></blockquote></li><li><p>部署在一个Web容器里  </p><blockquote><p>比如Tomcat, 包含了Dao层，Service层，UI等所有逻辑；<br>当然不一定是Tomcat，我们使用的Spring Boot实现的内部默认实现的Tomcat容器也可以改成Jetty等其他web容器, 这里暂且不表  </p></blockquote></li><li><p>共用一个DB数据库</p></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/53165413.jpg" alt=""></p><h4 id="单体架构优点">1.2.2.2. 单体架构优点</h4><ul><li><p>容易测试  </p><blockquote><p>在本地就可以启动完整的项目，不需要外部依赖  </p></blockquote></li><li><p>容易部署  </p><blockquote><p>直接打成一个完整的War包，放到Tomcat等web容器中就可以运行  </p></blockquote></li></ul><h4 id="单体架构缺点">1.2.2.3. 单体架构缺点</h4><ul><li><p>开发效率低  </p><blockquote><p>所有开发人员在一个项目里改代码，提交代码时可能等待或造成代码冲突  </p></blockquote></li><li><p>代码维护难  </p></li><li><p>部署不灵活  </p><blockquote><p>跟容易部署是两个概念，是指部署时间比较长，有任何代码的小修改必须重新部署整个项目  </p></blockquote></li><li><p>稳定性不高  </p><blockquote><p>所有业务代码写到一个项目，一个微不足道的小问题可能让整个系统挂掉，牵一发而动全身！  </p></blockquote></li><li><p>扩展性不够  </p><blockquote><p>无法满足高并发情况下的业务需求；<br>比如买家们都只看不买的情况比较多，商品服务应对的流量大一些，订单服务应对的流量相反就小一些，<br>此时单体架构很难做到，因为商品订单服务都在一个整体中，运行也在一个war包里运行；<br>而微服务很容易做到，因为商品和订单服务独立开来，可以将商品服务部署10台服务器，订单服务部署5台服务器。  </p></blockquote></li></ul><h3 id="基于Ajax的前后端分离">1.2.3. 基于Ajax的前后端分离</h3><p>这种开发模式可以称为SPA(Single Page Application 单页面应用)<br>参考<a href="https://github.com/lifesinger/blog/issues/184" target="_blank" rel="noopener">Web研发模式演变</a><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/68979207.jpg" alt=""></p><h4 id="点餐服务的前后端分离">1.2.3.1. 点餐服务的前后端分离</h4><p>下图显示的是买家端： </p><ol><li>SpringBoot后端服务可以多个  <blockquote><p>因为项目里我们使用Redis实现了Session共享，从而使springBoot服务支持水平扩展（集群部署）<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/53634998.jpg" alt=""></p></blockquote></li></ol><h3 id="分布式架构">1.2.4. 分布式架构</h3><blockquote><p>旨在支持应用程序和服务的开发，可以利用物理架构由<strong>多个自治的处理元素</strong>，<strong>不共享主内存</strong>，但<strong>通过网络发送消息合作</strong>。  </p></blockquote><p>需要理解：微服务必然是分布式的！  </p><ul><li><p>多个自治的处理元素  </p><blockquote><p>即多节点，分布式系统是多节点的，集群也是多节点的<br>分布式：一个厨房有炒菜和洗菜，互不干扰。<br>集群：一个厨房炒菜有5个人  </p></blockquote></li><li><p>通过网络发送消息合作  </p><blockquote><p>比如通过http、RESTful接口、RPC等，放到微服务中同样适用； </p></blockquote></li></ul><h2 id="微服务架构">1.3. 微服务架构</h2><h3 id="一个简单的微服务架构图">1.3.1. 一个简单的微服务架构图</h3><blockquote><p>后端、前端、服务注册发现都是可以集群化的<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/45578133.jpg" alt=""></p></blockquote><ol><li><p>服务注册发现  </p><blockquote><p>微服务内部相互通信；<br>服务提供方注册服务，把自己的地址信息暴露出来；<br>服务调用方才能发现需要的服务。  </p></blockquote></li><li><p>服务网关(Service Gateway)  </p><blockquote><p>外界访问微服务，比如手机、浏览器，通过前端路由（服务网关组件）使自己的服务暴露出去；<br>服务网关是连接内外的大门，有一下作用：  </p><ol><li>对外屏蔽后台服务的细节，后台升级或修改，对外用户是无感知的  </li><li>路由功能：将外部的请求反向路由的内部的某个具体的微服务  </li><li>限流和容错：所有的请求都会经过网关，可以控制流量，监控和打印日志  </li><li>微服务安全性：网关可以对请求进行控制，比如用户的认证、授权、反爬虫等等。  </li></ol></blockquote></li><li><p>后端通用服务(也称中间层服务Middle Tier Service)  </p><blockquote><p>后端服务启动时，会将地址信息注册到服务注册表中；<br>前端服务通过查询注册表就可以发现并调用后端服务。  </p></blockquote></li><li><p>前端服务(也称边缘服务Edge Service)  </p><blockquote><p>主要作用：对后端服务作必要的<strong>聚合和裁剪</strong>后暴露给外部不同的设备。<br><strong>聚合</strong>：对多个api调用逻辑进行聚合，从而减少客户端的请求数。比如客户端调用用户基本信息和收获地址两个接口api，前端服务可以合二为一，作为一<br>个接口提供出去，客户端只需调用前端服务的一个接口就可以了；<br><strong>裁剪</strong>：根据不同的需求返回不同的数据。比如PC端和手机端访问同一个api商品详情接口，返回的内容详细程度可能不一样，大家熟知的淘宝就是这样；<br>又或者PC端我们需要返回Html，手机端需要返回JSON报文，这时需要前端服务裁剪工作了。  </p></blockquote></li></ol><h3 id="微服务化点餐项目">1.3.2. 微服务化点餐项目</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-13/12903115.jpg" alt=""></p><ol><li>Vue Web App —&gt; 前端服务  </li><li>SpringBoot后端服务 —&gt; 后端通用服务  </li></ol><h3 id="微服务”配方”">1.3.3. 微服务”配方”</h3><h4 id="阿里系">1.3.3.1. 阿里系</h4><ol><li>Dubbo：核心，服务治理  </li><li>Zookeeper：服务注册中心  </li><li>SpringMVC or SpringBoot  </li><li>….  </li></ol><h4 id="Spring-Cloud">1.3.3.2. Spring Cloud</h4><ol><li>Spring Cloud Netflix Eureka  </li><li>SpringBoot  </li><li>….  </li></ol><h1 id="Spring-Cloud简介">2. Spring Cloud简介</h1><ol><li><p>Spring Cloud是一个开发工具集  </p><blockquote><p>利用Spring Boot的开发便利<br>Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。</p></blockquote></li><li><p>Spring Cloud包含了多个子项目  </p><blockquote><p>主要是基于对Netflix开源组件的进一步封装<br>Spring Cloud包含了多个子项目（针对分布式系统中涉及的多个不同开源产品），比如：Spring Cloud Config、Spring Cloud Netflix、Spring Cloud0 CloudFoundry、Spring Cloud AWS、Spring Cloud Security、Spring Cloud Commons、Spring Cloud Zookeeper、Spring Cloud CLI等项目  </p></blockquote></li></ol>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot微信点餐项目本地运行</title>
      <link href="/springboot-wechat-ordering-local-running.html"/>
      <url>/springboot-wechat-ordering-local-running.html</url>
      <content type="html"><![CDATA[<h1 id="准备工作">1. 准备工作</h1><p>本项目我使用的是阿里云服务器，没有使用本地虚拟机，不过基本是一样的  </p><h2 id="阿里云服务器基本信息">1.1. 阿里云服务器基本信息</h2><ul><li>CPU： 1核  </li><li>内存： 2 GB  </li><li>实例类型： I/O优化  </li><li>操作系统： CentOS 7.4 64位  </li></ul><h2 id="环境准备">1.2. 环境准备</h2><ul><li><a href="https://gitee.com/ddebug/sell.git" target="_blank" rel="noopener">后端项目地址</a>  </li><li><a href="https://gitee.com/ddebug/sell_buyer_ui" target="_blank" rel="noopener">买家端前端地址</a>  </li><li><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">微信公众测试账号</a>  </li><li><a href="https://www.ddebug.cn/aliyun-install-redis-summary.html">阿里云安装redis</a>  </li><li><a href="https://www.ddebug.cn/aliyun-install-mysql-summary.html">阿里云安装mysql</a></li><li><a href="https://www.ddebug.cn/aliyun-install-nexus-summary.html">阿里云搭建私服</a></li></ul><h2 id="工具">1.3. 工具</h2><ul><li>IDEA <a href="http://idea.lanyus.com/" target="_blank" rel="noopener">激活地址</a>  </li><li>Xshell  </li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html" target="_blank" rel="noopener">微信Web开发者工具</a>    </li><li><a href="http://ngrok.ciqiuwl.cn/" target="_blank" rel="noopener">小米球ngrok</a>  <blockquote><p>主要是免费，可以固定域名  </p></blockquote></li></ul><h1 id="本地运行">2. 本地运行</h1><h2 id="修改配置">2.1. 修改配置</h2><h3 id="application-dev-yml">2.1.1. application.dev.yml</h3><ul><li>mysql  </li><li>redis  </li><li>wechat公众平台测试账号ID和秘钥  </li><li>支付商户号和开放平台需要企业资质，暂时不测试  </li><li>templatedId: 微信推送消息模板ID  </li><li>projectUrl: 设置自己内网穿透的域名  </li></ul><h3 id="nginx-cnf配置">2.1.2. nginx.cnf配置</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/12733950.jpg" alt=""></p><ul><li>Server.name  sell.ddebug.cn  <blockquote><p>我这里由于是阿里云服务器，使用了已经备案过的域名添加解析;<br>如果本地虚拟机，可以自定义，同时修改主机hosts文件添加解析 </p></blockquote></li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/8826006.jpg" alt=""></p><ul><li><p>proxy_pass  <a href="http://hunterfish.ngrok.xiaomiqiu.cn" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn</a>  </p><blockquote><p>本地后端项目启动后，用nginx代理床头内网生成的域名，是阿里云或虚拟机中的前端项目通过nginx代理调用后端本地启动的接口  </p></blockquote></li><li><p>root  /opt/data/wwwroot/sell  </p><blockquote><p>买家端前端项目打包后存放目录  </p></blockquote></li></ul><h3 id="微信测试账号配置">2.1.3. 微信测试账号配置</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/21701607.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/3970488.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/80793861.jpg" alt=""></p><h2 id="买家端前端测试">2.2. 买家端前端测试</h2><h3 id="运行测试-有微信测试账号">2.2.1. 运行测试(有微信测试账号)</h3><ul><li><p>启动后端项目  </p></li><li><p>微信web开发者工具中输入：<a href="http://sell.ddebug.cn" target="_blank" rel="noopener">http://sell.ddebug.cn</a>  </p></li><li><p>跳转到微信授权<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/60890277.jpg" alt=""></p></li><li><p>同时后台打印了微信授权信息openid<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/74526378.jpg" alt=""></p></li><li><p>授权成功，跳转页面<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/23484113.jpg" alt=""></p></li><li><p>同时生成Cookie<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/27750359.jpg" alt=""></p></li><li><p>因为支付商户号需要企业资质，所以没有测试  </p></li></ul><h3 id="运行测试-没有微信测试账号">2.2.2. 运行测试(没有微信测试账号)</h3><ul><li>启动后端项目  </li><li>浏览器中输入并访问： <a href="http://sell.ddebug.cn/#/order" target="_blank" rel="noopener">http://sell.ddebug.cn/#/order</a>  </li><li>浏览器console中手动设置cookie(可以自定义): <strong>document.cookie=”openid=abc123”</strong><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/75375552.jpg" alt=""></li><li>再访问： <a href="http://sell.ddebug.cn" target="_blank" rel="noopener">http://sell.ddebug.cn</a><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/75947108.jpg" alt=""></li></ul><h2 id="卖家端前端测试">2.3. 卖家端前端测试</h2><blockquote><p>卖家端前端就是卖家管理商品订单分类的后台中心，使用微信开放平台账号的微信扫一扫登陆功能  </p></blockquote><blockquote><p>由于微信开放平台需要企业资质才能申请，所以这里只是自定义设置openid来模拟登陆，实际上代码已经完善，如果你有开放账号，直接修改application.xml  </p></blockquote><ul><li>浏览器访问： <a href="http://hunterfish.ngrok.xiaomiqiu.cn/sell/" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/sell/</a>  </li><li><p>console设置cookie(可以自定义): <strong>document.cookie=”token=abc123”</strong><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/19972825.jpg" alt=""></p></li><li><p>浏览器访问： <a href="http://hunterfish.ngrok.xiaomiqiu.cn/sell/seller/order/list" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/sell/seller/order/list</a><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/53997991.jpg" alt=""></p></li></ul>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot微信点餐项目学习总结</title>
      <link href="/springboot-wechat-ordering-project-summary.html"/>
      <url>/springboot-wechat-ordering-project-summary.html</url>
      <content type="html"><![CDATA[<h1 id="项目总结">1. 项目总结</h1><h2 id="卖家端">1.1. 卖家端</h2><p>后台基于Spring Boot 前端基于freemarker模板引擎的卖家商品订单管理后台  </p><h2 id="买家端">1.2. 买家端</h2><p>基于Vue.js构建的前后端分离的买家订餐平台  </p><h1 id="博客目录">2. 博客目录</h1><p>* </p>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决阿里云服务器Linux异常文件下载</title>
      <link href="/aliyun-solve-exception-file-download.html"/>
      <url>/aliyun-solve-exception-file-download.html</url>
      <content type="html"><![CDATA[<h1 id="阿里云服务器参数">1. 阿里云服务器参数</h1><ul><li>CPU： 1核 </li><li>内存： 2 GB </li><li>实例类型： I/O优化 </li><li>操作系统： CentOS 7.4 64位  </li></ul><h1 id="异常情况">2. 异常情况</h1><ul><li>进程异常行为-Linux异常文件下载  </li><li>谷歌后，应该是通过redis获取了root权限，上传了病毒  </li><li>会大量占用cpu资源，造成服务器卡顿  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/47499542.jpg" alt=""> </p><h1 id="解决方法">3. 解决方法</h1><blockquote><p>参考<a href="https://blog.csdn.net/yucdsn/article/details/79847869" target="_blank" rel="noopener">博客1</a>, <a href="https://www.cnblogs.com/killall007/p/8877294.html" target="_blank" rel="noopener">博客2</a>  </p></blockquote>]]></content>
      
      <categories>
          
          <category> 阿里云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 阿里云服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot微信点餐前端后端项目运行部署到阿里云服务器</title>
      <link href="/springboot-wechat-ordering-deploy-aliyun.html"/>
      <url>/springboot-wechat-ordering-deploy-aliyun.html</url>
      <content type="html"><![CDATA[<h1 id="后端运行部署">1. 后端运行部署</h1><h2 id="项目介绍">1.1. 项目介绍</h2><blockquote><p>Spring Boot项目  </p></blockquote><ul><li><p>点击<a href="https://gitee.com/ddebug/sell.git" target="_blank" rel="noopener">项目地址</a>下载项目到本地     </p></li><li><p>本地手动下载pom.xml依赖  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call mvn -f pom.xml dependency:copy-dependencies</span><br></pre></td></tr></table></figure></li></ul><h2 id="项目部署">1.2. 项目部署</h2><blockquote><p>下面的几种方式其实现在都已经过时了，以后总结docer部署项目的相关知识  </p></blockquote><h3 id="Tomcat">1.2.1. Tomcat</h3><blockquote><p>打好包后，放到tomcat某个目录中，启动tomcat </p></blockquote><h3 id="java-jar">1.2.2. java -jar</h3><blockquote><p>推荐使用此java框架方法  </p></blockquote><ol><li>进入项目主目录  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><ol start="2"><li>target下jar包<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/70520653.jpg" alt=""><blockquote><p>可以更改jar包名字, 修改pom.xml文件，然后重新执行上面打包命令：  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/74412635.jpg" alt=""></p><ol start="3"><li><p>copy到服务器  </p><blockquote><p>可以参考博客<a href="https://www.ddebug.cn/common-centos7-commands.html">常用CentOS7命令</a>  </p></blockquote></li><li><p>运行  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sell.jar</span><br></pre></td></tr></table></figure></li><li><p>指定端口和运行环境  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Dserver.port=8080 -Dspring.profiles.active=prod sell.jar</span><br></pre></td></tr></table></figure></li><li><p>后台运行  </p></li></ol><blockquote><p>启动后，会在sell.jar同目录下生成日志文件  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar sell.jar &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"># 停止进程</span><br><span class="line">kill -9 进程数</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/50729385.jpg" alt=""></p><ol start="7"><li>脚本运行  </li></ol><blockquote><p>新建文件start.sh  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">nohup java -jar sell.jar &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><blockquote><p>启动：bash start.sh  </p></blockquote><h3 id="centos7下可以新建服务service启动">1.2.3. centos7下可以新建服务service启动</h3><ol><li>新建sell.service  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/systemd/system</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/83976316.jpg" alt=""></p><ol start="2"><li>vim sell.service<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/56882885.jpg" alt=""></li><li>systemctl daemon-reload: 修改文件后，重启配置</li><li>systemctl start sell：启动服务  </li><li>systemctl stop sell: 停止服务  </li><li>systemctl enable sell: 开机启动  </li><li>systemctl disable sell: 停止开机启动  </li></ol><h2 id="运行测试">1.3. 运行测试</h2><ol><li>访问项目接口，成功显示数据   </li></ol><blockquote><p>URL：<a href="http://47.98.***.**:8080/sell/buyer/product/list" target="_blank" rel="noopener">http://47.98.***.**:8080/sell/buyer/product/list</a>  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/87579972.jpg" alt=""></p><h1 id="前端运行部署">2. 前端运行部署</h1><h2 id="项目介绍-1">2.1. 项目介绍</h2><blockquote><p>Spring Boot微信点餐项目的前端是参考慕课网视频<a href="https://coding.imooc.com/class/74.html" target="_blank" rel="noopener">vue.js高仿饿了么外卖App</a>,<br>我抽取了服务器中前端项目上传到自己的码云上，并修改了部分自己后端项目的配置。  </p></blockquote><ol><li>搭建环境参考博客[]  </li><li>点击<a href="https://gitee.com/ddebug/sell_buyer_ui" target="_blank" rel="noopener">项目地址</a>下载项目到本地  </li></ol><h2 id="项目运行">2.2. 项目运行</h2><blockquote><p>本地运行  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">## 若上述不行则采取下面命令</span><br><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install</span><br><span class="line"></span><br><span class="line"># 本地开发 开启服务</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="项目部署-1">2.3. 项目部署</h2><h3 id="构建静态文件">2.3.1. 构建静态文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 构建生成环境</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><blockquote><p>生成dist目录  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/65663777.jpg" alt=""></p><h3 id="上传到阿里云服务器">2.3.2. 上传到阿里云服务器</h3><ol><li>参考<a href="https://blog.csdn.net/sherry_chan/article/details/79055211" target="_blank" rel="noopener">如何部署vue前端项目到阿里云服务器上</a>  </li><li>参考<a href="https://blog.csdn.net/qq_26026975/article/details/75331779" target="_blank" rel="noopener">nginx+vue.js实现前后端分离</a>  </li><li>copy上节生成的dist目录下的内容上传到云服务指定位置  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/83119425.jpg" alt=""></p><ol start="4"><li>修改nginx配置   </li></ol><blockquote><p>修改nginx配置 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/35267061.jpg" alt=""></p><blockquote><p>由于我用的是阿里云服务器，配置已备案二级域名，并在阿里云控制台配置解析  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/14153152.jpg" alt=""></p><blockquote><p>如果是本地虚拟机，可以修改本地hosts文件完成映射即可<br>修改后重启nginx: <strong>nginx -s reload</strong>  </p></blockquote>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云服务器 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的idea使用总结</title>
      <link href="/my-idea-summary.html"/>
      <url>/my-idea-summary.html</url>
      <content type="html"><![CDATA[<p>参考<a href="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/" target="_blank" rel="noopener">IntelliJ IDEA 使用教程</a>  </p><h1 id="序列化插件">1. 序列化插件</h1><h2 id="效果">1.1. 效果</h2><ul><li>Ctrl+Shift+s：生成序列化ID <strong>serialVersionUID</strong>  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/30770183.jpg" alt="图片"></p><h2 id="idea插件安装">1.2. idea插件安装</h2><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/97346624.jpg" alt="图片"></p><h2 id="插件设置快捷键">1.3. 插件设置快捷键</h2><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/66397016.jpg" alt="图片"></p><h1 id="IDEA终端Terminal">2. IDEA终端Terminal</h1><p>参考<a href="https://segmentfault.com/a/1190000012717033" target="_blank" rel="noopener">修改 Idea 终端 Terminal 为 GitBash 或 Cmder</a>; 修改为gitbash比较好，Cmder存在中文乱码问题  </p><h1 id="常用快捷键">3. 常用快捷键</h1><ol><li><a href="https://blog.csdn.net/linsongbin1/article/details/80211919" target="_blank" rel="noopener">Intellij IDEA神器居然还有这些小技巧</a>  </li></ol><h1 id="git-忽略已提交文件">4. git 忽略已提交文件</h1><p>一次项目<code>target</code>文件竟然提交到git仓库里，idea自动生成的.gitignore文件可能没有忽略掉target文件。</p><ol><li>新增下面文件  </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">target/</span><br><span class="line">*.war</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar</span><br><span class="line">*.tar.gz</span><br></pre></td></tr></table></figure><ol start="2"><li><p><code>git rm -rf --cached .</code>  </p><blockquote><p>把本地缓存删除（改变成未track状态）  </p></blockquote></li><li><p><code>git add .</code>  </p></li><li><code>git commit -m &quot;update .gitignore&quot;</code>  </li></ol><h1 id="翻译插件">5. 翻译插件</h1><p>github: <a href="https://github.com/YiiGuxing/TranslationPlugin" target="_blank" rel="noopener">TranslationPlugin</a>  </p><h1 id="mybatis插件">6. mybatis插件</h1><p><code>mybatis-plus2.92</code>: 链接: <a href="https://pan.baidu.com/s/1uydTqyurhDSe7g72Te9HdQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1uydTqyurhDSe7g72Te9HdQ</a> 提取码: w355 </p>]]></content>
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>了解并使用Redis缓存</title>
      <link href="/use-redis-cache.html"/>
      <url>/use-redis-cache.html</url>
      <content type="html"><![CDATA[<h1 id="Redis缓存">1. Redis缓存</h1><h2 id="特点">1.1. 特点</h2><blockquote><p>大流量场景环境下，有效提高数据读取速度；  </p></blockquote><ul><li>命中  <blockquote><p>用户从cache中获取数据，取到后返回  </p></blockquote></li><li>失效  <blockquote><p>缓存时间到时  </p></blockquote></li><li>更新  <blockquote><p>应用程序把数据存到数据库中，再放到缓存中  </p></blockquote></li></ul><h2 id="准备">1.2. 准备</h2><ul><li>Spring Boot微信点餐项目  </li><li>项目启动参考<xxxxxxxxxxxxxx>  </xxxxxxxxxxxxxx></li></ul><h2 id="学习点">1.3. 学习点</h2><ol><li>@EnableCaching、@Cacheable、@CachePut、@CacheEvict  </li><li>相关对象实现序列化  </li><li>使用缓存要结合业务场景，避免滥用  </li></ol><h1 id="如何优雅的使用缓存">2. 如何优雅的使用缓存</h1><h2 id="常规使用">2.1. 常规使用</h2><h3 id="代码内容">2.1.1. 代码内容</h3><blockquote><p>实体类和页面展示类需要实现序列化，可参考<a href="https://www.ddebug.cn/my-idea-summary.html">我的idea使用总结</a>  </p></blockquote><ul><li>SellApplication.java   </li></ul><blockquote><p>项目启动类添加注解 <strong>@EnableCaching</strong>  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SellApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BuyerProductController.java  </li></ul><blockquote><p>在商品列表接口上添加注解 <strong>@Cacheable</strong>  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"product"</span>, key = <span class="string">"123"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 查询所有上架的商品</span></span><br><span class="line">        List&lt;ProductInfo&gt; productInfoList = productService.findUpAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 查询类目（一次性查询）</span></span><br><span class="line">        <span class="comment">// 传统方法</span></span><br><span class="line"><span class="comment">//        List&lt;Integer&gt; categoryTypeList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        for (ProductInfo productInfo : productInfoList) &#123;</span></span><br><span class="line"><span class="comment">//            categoryTypeList.add(productInfo.getCategoryType());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 精简方法（Java8，lambda）</span></span><br><span class="line">        List&lt;Integer&gt; categoryTypeList = productInfoList.stream()</span><br><span class="line">                .map(e -&gt; e.getCategoryType())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        List&lt;ProductCategory&gt; productCategoryList = categoryService.findByCategoryTypeIn(categoryTypeList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 数据拼装</span></span><br><span class="line">        List&lt;ProductVO&gt; productVOList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ProductCategory productCategory : productCategoryList) &#123;</span><br><span class="line">            ProductVO productVO = <span class="keyword">new</span> ProductVO();</span><br><span class="line">            productVO.setCategoryType(productCategory.getCategoryType());</span><br><span class="line">            productVO.setCategoryName(productCategory.getCategoryName());</span><br><span class="line"></span><br><span class="line">            List&lt;ProductInfoVO&gt; productInfoVOList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (ProductInfo productInfo : productInfoList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (productInfo.getCategoryType().equals(productCategory.getCategoryType())) &#123;</span><br><span class="line">                    ProductInfoVO productInfoVO = <span class="keyword">new</span> ProductInfoVO();</span><br><span class="line">                    BeanUtils.copyProperties(productInfo, productInfoVO);</span><br><span class="line">                    productInfoVOList.add(productInfoVO);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            productVO.setProductInfoVOList(productInfoVOList);</span><br><span class="line">            productVOList.add(productVO);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultVOUtil.success(productVOList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="效果演示">2.1.2. 效果演示</h3><ul><li>启动项目  </li></ul><blockquote><p>在controller接口中打断点，访问：<br><a href="http://hunterfish.ngrok.xiaomiqiu.cn/sell/buyer/product/list" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/sell/buyer/product/list</a>    </p></blockquote><blockquote><p>访问后，会在断点处停止；    </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/11466847.jpg" alt=""></p><ul><li>再次访问上面链接  </li></ul><blockquote><p>发现不会经过断点，测试已经从redis缓存中获取数据了  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/66300248.jpg" alt=""></p><h3 id="问题">2.1.3. 问题</h3><blockquote><p>当我们修改商品数据保存到数据库后，再次访问，发现redis缓存数据没有变化  </p></blockquote><h2 id="缓存内容更新时">2.2. 缓存内容更新时</h2><blockquote><p>当我们查询数据已经更新（数据库），同时也要<strong>更新缓存数据</strong>  </p></blockquote><ul><li>SellerProductController.java  </li></ul><blockquote><p>保存/更新接口：save()添加注解 <strong>@CachePut</strong> 或者 <strong>@CacheEvict</strong>  </p></blockquote><blockquote><p>因为此处更新数据的接口缓存的是<strong>ModelAndView</strong>，并不是查询接口的ResultVO，所以此处使用<strong>@CacheEvict</strong>删除缓存，在查询接口时重新生成缓存，而不是更新。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="comment">// @CachePut(cacheNames = "product", key = "123")  // 更新缓存</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"product"</span>, key= <span class="string">"123"</span>) <span class="comment">// 删除缓存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save</span><span class="params">(@Valid ProductForm form,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BindingResult bindingResult,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            map.put(<span class="string">"msg"</span>, bindingResult.getFieldError().getDefaultMessage());</span><br><span class="line">            map.put(<span class="string">"url"</span>, <span class="string">"/sell/seller/product/index"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"common/error"</span>, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ProductInfo productInfo = <span class="keyword">new</span> ProductInfo();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果productId为空, 说明是新增</span></span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(form.getProductId())) &#123;</span><br><span class="line">                productInfo = productService.findOne(form.getProductId());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                form.setProductId(KeyUtil.genUniqueKey());</span><br><span class="line">            &#125;</span><br><span class="line">            BeanUtils.copyProperties(form, productInfo);</span><br><span class="line">            productService.save(productInfo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SellException e) &#123;</span><br><span class="line">            map.put(<span class="string">"msg"</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">"url"</span>, <span class="string">"/sell/seller/product/index"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"common/error"</span>, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"url"</span>, <span class="string">"/sell/seller/product/list"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"common/success"</span>, map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="使用-CacheConfig">2.3. 使用@CacheConfig</h2><blockquote><p>如果我们就是想更新，而不是删除缓存，我们可以在Service层使用注解  </p></blockquote><blockquote><p>@CacheConfig、@Cacheable、@CachePut  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/99533631.jpg" alt=""></p><h2 id="使用condition、unless">2.4. 使用condition、unless</h2><ol><li><p><strong>key=”#sellerId”</strong>  </p><blockquote><p><a href="https://blog.csdn.net/ya_1249463314/article/details/68484422" target="_blank" rel="noopener">spel表达式</a>，获取接口参数的值  </p></blockquote></li><li><p><strong>condition=”#sellerId.length() &gt; 3”</strong>  </p><blockquote><p>判断条件，当请求参数sellerId的长度大于3时，才缓存返回结果ResultVO  </p></blockquote></li><li><p><strong>unless=”#result.getCode() != 0”</strong>  </p><blockquote><p>unless是”如果不”的意思,即当返回结果ResultVO的code为0时，执行缓存  </p></blockquote></li><li><p>测试URL  </p><blockquote><p><a href="http://127.0.0.1:8080/sell/buyer/product/list?sellerId=123457" target="_blank" rel="noopener">http://127.0.0.1:8080/sell/buyer/product/list?sellerId=123457</a>  </p></blockquote></li></ol>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>秒杀活动与分布式锁</title>
      <link href="/seconds-kill-distributed-lock.html"/>
      <url>/seconds-kill-distributed-lock.html</url>
      <content type="html"><![CDATA[<h1 id="分布式锁应用">1. 分布式锁应用</h1><h2 id="压测工具模拟并发">1.1. 压测工具模拟并发</h2><blockquote><p>分布式锁应用在高并发、大流量场景中，之前微信点餐项目中使用的单元测试、postman都无法模拟这种情形，    </p></blockquote><blockquote><p>所以这里使用压测工具来模拟高并发请求。  </p></blockquote><ul><li>压测工具<a href="https://www.apachehaus.com/cgi-bin/download.plx" target="_blank" rel="noopener">Apache ab</a>  </li></ul><blockquote><p>安装和使用参考：<a href="https://www.cnblogs.com/lishuyi/p/5808661.html" target="_blank" rel="noopener">Apache ab并发负载压力测试</a>  </p></blockquote><blockquote><p><a href="https://www.cnblogs.com/billyang/p/apache-ab.html" target="_blank" rel="noopener">ab压测工具Windows配置使用说明</a>  </p></blockquote><ul><li>ab 常用命令  </li></ul><blockquote><p>模拟100个并发发送500个请求：相当于100个人同时访问500次该网站  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 500 -c 100 http://www.baidu.com/</span><br></pre></td></tr></table></figure><blockquote><p>连续60s内发送100个请求  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -t 60 -c 100 http://www.baidu.com/</span><br></pre></td></tr></table></figure><h2 id="常规流程">1.2. 常规流程</h2><h3 id="业务代码">1.2.1. 业务代码</h3><ul><li>service层:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SecKillService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">querySecKillProductInfo</span><span class="params">(String productId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀活动：下单，减库存，结束活动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">orderProductMockDiffUser</span><span class="params">(String productId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKillServiceImpl</span> <span class="keyword">implements</span> <span class="title">SecKillService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 国庆活动，皮蛋粥特价，限量100000份 */</span></span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, Integer&gt; products;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, Integer&gt; stock;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, String&gt; orders;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">/** 模拟多个表：商品信息表，库存表，秒杀成功订单表 */</span></span><br><span class="line">        products = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        stock = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        orders = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        products.put(<span class="string">"123456"</span>, <span class="number">100000</span>); <span class="comment">// 商品Id, 商品库存</span></span><br><span class="line">        stock.put(<span class="string">"123456"</span>, <span class="number">10000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">queryMap</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"国庆活动，皮蛋粥特价，限量份"</span></span><br><span class="line">                + products.get(productId)</span><br><span class="line">                + <span class="string">" 还剩："</span> + stock.get(productId) + <span class="string">"份"</span></span><br><span class="line">                + <span class="string">" 该商品成功下单用户数目："</span></span><br><span class="line">                + orders.size() + <span class="string">" 人"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">querySecKillProductInfo</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.queryMap(productId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderProductMockDiffUser</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 查询该商品库存，为0则结束活动</span></span><br><span class="line">        <span class="keyword">int</span> stockNum = stock.get(productId);</span><br><span class="line">        <span class="keyword">if</span> (stockNum == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(<span class="number">100</span>, <span class="string">"活动结束"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 下单(模拟不同用户openid不同)</span></span><br><span class="line">            orders.put(KeyUtil.genUniqueKey(), productId);</span><br><span class="line">            <span class="comment">// 3. 减库存</span></span><br><span class="line">            stockNum = stockNum - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            stock.put(productId, stockNum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller层：  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 测试秒杀：压测，分布式锁</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/9 0009 10:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/skill"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKillController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SecKillService secKillService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询秒杀活动特价商品的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query/&#123;productId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">(@PathVariable String productId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> secKillService.querySecKillProductInfo(productId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀，没有抢到提示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/order/&#123;productId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">skill</span><span class="params">(@PathVariable String productId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"@skill request, productId:"</span> + productId);</span><br><span class="line">        secKillService.orderProductMockDiffUser(productId);</span><br><span class="line">        <span class="keyword">return</span> secKillService.querySecKillProductInfo(productId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试">1.2.2. 测试</h3><ul><li>启动项目  </li><li>访问链接：查询订单信息  </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/sell/skill/query/123456</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/38816287.jpg" alt=""></p><blockquote><p>用户下单（刷新一下，就是请求一次）    </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/sell/skill/order/123456</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/42446295.jpg" alt=""></p><ul><li>ab压测测试：模拟100并发发送500次请求  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/30715844.jpg" alt=""></p><ul><li>压测结果  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/72923430.jpg" alt="">  </p><blockquote><p>可以看到，出现了超卖问题  </p></blockquote><h3 id="问题原因">1.2.3. 问题原因</h3><blockquote><p>从代码上来看，因为我们的数据是放在map中，类似于数据存在内存中（redis），而不是从数据库中，这样查询速度快。  </p></blockquote><blockquote><p>我们可以在核心代码【SecKillServiceImpl.java】上加上关键字<strong>synchronized</strong>  </p></blockquote><ul><li>修改代码：  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">orderProductMockDiffUser</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 查询该商品库存，为0则结束活动</span></span><br><span class="line">        <span class="keyword">int</span> stockNum = stock.get(productId);</span><br><span class="line">        <span class="keyword">if</span> (stockNum == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(<span class="number">100</span>, <span class="string">"活动结束"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 下单(模拟不同用户openid不同)</span></span><br><span class="line">            orders.put(KeyUtil.genUniqueKey(), productId);</span><br><span class="line">            <span class="comment">// 3. 减库存</span></span><br><span class="line">            stockNum = stockNum - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            stock.put(productId, stockNum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>重新测试  </li></ul><blockquote><p>重启项目，进行压测，结果显示正常，没有出现<strong>超卖</strong>问题  </p></blockquote><blockquote><p>但是发现，压测时，明显感觉到请求速度变慢，sychronized在保证线程安全同时，牺牲了性能</p></blockquote><h3 id="分析synchronized">1.2.4. 分析synchronized</h3><ul><li>是一种解决方法  </li><li>无法做到细粒度控制  <blockquote><p>比如很多商品参加秒杀活动，每个商品ID都不一样，这些商品的每一次请求都会访问上面的方法，秒杀A商品的人比较多，<br>秒杀B商品的人较少，这样这两种秒杀都会一样的慢  </p></blockquote></li><li>只适合单点的情况  <blockquote><p>上述只能跑在单机上面，如果我们项目进行水平扩展，比如集群，显然负载均衡后，不同的用户访问下结果肯定是五花八门。<br>这就引出下一篇的<strong>Redis分布式锁</strong>了。  </p></blockquote></li></ul><h2 id="Redis分布式锁">1.3. Redis分布式锁</h2><h3 id="Redis介绍">1.3.1. Redis介绍</h3><ul><li><a href="http://redis.cn/" target="_blank" rel="noopener">Redis中文网站</a>  </li><li><a href="http://redis.cn/commands/setnx.html" target="_blank" rel="noopener">SETNX命令</a>  </li><li><a href="http://redis.cn/commands/getset.html" target="_blank" rel="noopener">GETSET命令</a></li></ul><h3 id="使用Redis作为分布式锁">1.3.2. 使用Redis作为分布式锁</h3><ul><li><p>RedisLock.java  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: Redis分布式锁</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/9 0009 13:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 当前时间+超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// setIfAbset() 等同于 Redis 命令：SETNX</span></span><br><span class="line">        <span class="keyword">if</span> (redisTemplate.opsForValue().setIfAbsent(key, value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String currentValue = redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 如果锁过期</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(currentValue) &amp;&amp; Long.parseLong(currentValue) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">            <span class="comment">// 获取上一个锁的时间</span></span><br><span class="line">            <span class="comment">// getAndSet 等同于 Redis 命令：GETSET</span></span><br><span class="line">            String oldValue = redisTemplate.opsForValue().getAndSet(key, value);</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(oldValue) &amp;&amp; oldValue.equals(currentValue)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁：删掉key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String currentValue = redisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(currentValue) &amp;&amp; currentValue.equals(value)) &#123;</span><br><span class="line">                redisTemplate.opsForValue().getOperations().delete(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"【redis分布式锁】解锁异常, &#123;&#125;"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SecKillServiceImpl.java 核心代码   </p></li></ul><blockquote><p>去掉synchronized关键字；<br>在用户下单减库存业务执行前后添加【加锁】和【解锁】功能。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderProductMockDiffUser</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis() + TIMEOUT;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果加锁不成功, lock()返回false</span></span><br><span class="line">        <span class="keyword">if</span> (!redisLock.lock(productId, String.valueOf(time))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(<span class="number">101</span>, <span class="string">"哎呦喂，人也太多了，换个姿势再试试~~~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 查询该商品库存，为0则结束活动</span></span><br><span class="line">        <span class="keyword">int</span> stockNum = stock.get(productId);</span><br><span class="line">        <span class="keyword">if</span> (stockNum == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(<span class="number">100</span>, <span class="string">"活动结束"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 下单(模拟不同用户openid不同)</span></span><br><span class="line">            orders.put(KeyUtil.genUniqueKey(), productId);</span><br><span class="line">            <span class="comment">// 3. 减库存</span></span><br><span class="line">            stockNum = stockNum - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            stock.put(productId, stockNum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        redisLock.unlock(productId, String.valueOf(time));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果">1.3.3. 测试结果</h3><ul><li>重启项目，ab压测  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 500 -c 100 http://127.0.0.1:8080/sell/skill/order/123456</span><br></pre></td></tr></table></figure><ul><li>和sychorized对比，明显Redis分布式锁速度快多了  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/34453815.jpg" alt=""></p><h2 id="总结">1.4. 总结</h2><ul><li><p>Redis作为<strong>单线程服务</strong>，又是<strong>NoSql数据库</strong>，即高效的<strong>key-value</strong>数据结构，能达到每秒10万次的并发，能作为<br>【高可用】【分布式集群】的一种解决方案；  </p></li><li><p>相对于关键字【synchronized】支持分布式、高可用；  </p></li><li><p>可以更细粒度的控制  </p><blockquote><p>上面介绍的以商品ID productId 作为锁的key, 采用分布式锁  </p></blockquote></li><li><p>多台机器上多个进程对一个数据进行操作的互斥  </p><blockquote><p>用户可以秒杀多个商品，采用多个productId作为分布式的锁。</p></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 压测 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>项目中异常捕获--统一异常处理</title>
      <link href="/springboot-global-exception-summary.html"/>
      <url>/springboot-global-exception-summary.html</url>
      <content type="html"><![CDATA[<h1 id="统一异常处理">1. 统一异常处理</h1><h2 id="准备">1.1. 准备</h2><ul><li>Spring Boot微信点餐项目  </li><li>PostMan工具  </li></ul><h2 id="之前">1.2. 之前</h2><ol><li>使用postman发送生成订单请求，成功时返回信息如下：  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/48933708.jpg" alt=""></p><ol start="2"><li>失败时，返回信息如下：  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/7610957.jpg" alt=""></p><blockquote><p>我们想无论成功还是失败返回统一格式的信息。  </p></blockquote><h2 id="代码实现">1.3. 代码实现</h2><ul><li>ResultVO.java  </li></ul><blockquote><p>返回到前台的信息  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: http请求返回的最外层对象</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohq</span></span><br><span class="line"><span class="comment"> * 日期: 2018/3/13 20:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 错误码 */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/** 提示信息 */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/** 具体内容 */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ResultVO工具类  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: ResultVO工具类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohq</span></span><br><span class="line"><span class="comment"> * 日期: 2018/3/13 21:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultVOUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultVO <span class="title">success</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        ResultVO resultVO = <span class="keyword">new</span> ResultVO();</span><br><span class="line">        resultVO.setData(object);</span><br><span class="line">        resultVO.setCode(<span class="number">0</span>);</span><br><span class="line">        resultVO.setMsg(<span class="string">"成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultVO <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultVO <span class="title">error</span><span class="params">(Integer code, String msg)</span></span>&#123;</span><br><span class="line">        ResultVO resultVO = <span class="keyword">new</span> ResultVO();</span><br><span class="line">        resultVO.setCode(code);</span><br><span class="line">        resultVO.setMsg(msg);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SellException.java  </li></ul><blockquote><p>自定义全局异常类，处理业务时，抛出该异常；  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SellException</span><span class="params">(ResultEnum resultEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(resultEnum.getMessage());</span><br><span class="line">        <span class="keyword">this</span>.code = resultEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SellException</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ResultEnum.java  </li></ul><blockquote><p>返回前端信息的枚举类  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResultEnum &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">0</span>, <span class="string">"成功"</span>),</span><br><span class="line">    PARAM_ERROR(<span class="number">1</span>, <span class="string">"参数不正确"</span>),</span><br><span class="line">    PRODUCT_NOT_EXIST(<span class="number">10</span>, <span class="string">"商品不存在"</span>),</span><br><span class="line">    PRODUCT_SOTCK_ERROR(<span class="number">11</span>, <span class="string">"商品库存异常"</span>),</span><br><span class="line">    ORDER_NOT_EXIST(<span class="number">12</span>, <span class="string">"订单不存在"</span>),</span><br><span class="line">    ORDERDETAIL_NOT_EXIST(<span class="number">12</span>, <span class="string">"订单不存在"</span>),</span><br><span class="line">    ORDER_STATUS_ERROR(<span class="number">14</span>, <span class="string">"订单状态不正确"</span>),</span><br><span class="line">    ORDER_UPDATE_FAIL(<span class="number">15</span>, <span class="string">"订单更新失败"</span>),</span><br><span class="line">    ORDER_DETAIL_EMPTY(<span class="number">16</span>, <span class="string">"订单详情为空"</span>),</span><br><span class="line">    ORDER_PAY_STATUS_ERROR(<span class="number">17</span>, <span class="string">"订单支付状态不正确"</span>),</span><br><span class="line">    CART_EMPTY(<span class="number">18</span>, <span class="string">"购物车为空"</span>),</span><br><span class="line">    ORDER_OWNER_ERROR(<span class="number">19</span>, <span class="string">"该订单不属于当前用户"</span>),</span><br><span class="line">    WECHAT_MP_ERROR(<span class="number">20</span>, <span class="string">"微信公众账号方面错误"</span>),</span><br><span class="line">    WXPAY_NOTIFY_MONEY_VERIFY_ERROR(<span class="number">21</span>, <span class="string">"微信支付异步通知金额校验不通过"</span>),</span><br><span class="line">    ORDER_CANCEL_SUCCESS(<span class="number">22</span>, <span class="string">"订单取消成功"</span>),</span><br><span class="line">    ORDER_FINISH_SUCCESS(<span class="number">23</span>, <span class="string">"订单完结成功"</span>),</span><br><span class="line">    PRODUCT_STATUS_ERROR(<span class="number">24</span>, <span class="string">"商品状态不正确"</span>),</span><br><span class="line">    LOGIN_FAIL(<span class="number">25</span>, <span class="string">"登录失败, 登录信息不正确"</span>),</span><br><span class="line">    LOGOUT_SUCCESS(<span class="number">26</span>, <span class="string">"登出成功"</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    ResultEnum(Integer code, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SellExceptionHandler.java   </li></ul><blockquote><p>统一异常处理类：拦截登录异常；拦截各种业务异常  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectUrlConfig projectUrlConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截登录异常</span></span><br><span class="line">    <span class="comment">// 拦截后，跳转到：http://sell.natapp4.cc/sell/wechat/qrAuthorize?returnUrl=http://sell.natapp4.cc/sell/seller/login</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SellerAuthorizeException.class)</span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.FORBIDDEN)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handlerAuthorizeException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:"</span></span><br><span class="line">        .concat(projectUrlConfig.getWechatOpenAuthorize())</span><br><span class="line">        .concat(<span class="string">"/sell/wechat/qrAuthorize"</span>)</span><br><span class="line">        .concat(<span class="string">"?returnUrl="</span>)</span><br><span class="line">        .concat(projectUrlConfig.getSell())</span><br><span class="line">        .concat(<span class="string">"/sell/seller/login"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截业务异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SellException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">handlerSellerException</span><span class="params">(SellException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultVOUtil.error(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现效果">1.4. 实现效果</h2><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/19068018.jpg" alt=""></p><blockquote><p>从上图可以看到：返回正确格式的错误信息，但此时状态码为<strong>200</strong>，之前是<strong>500</strong>，当然这个也可以自定义。  </p></blockquote><h2 id="抛出异常时自定义返回状态码">1.5. 抛出异常时自定义返回状态码</h2><ul><li>SellExceptionHandler.java 部分代码：  </li></ul><blockquote><p>直接使用注解<strong>@ResponseStatus</strong>,比如抛出异常时，返回403：<strong>HttpStatus.FORBIDDEN</strong>   </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截业务异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SellException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.FORBIDDEN)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">handlerSellerException</span><span class="params">(SellException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultVOUtil.error(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>HttpStatus.java  </li></ul><blockquote><p>各种状态码  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpStatus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PROCESSING = <span class="number">102</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MULTI_STATUS = <span class="number">207</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUEST_TOO_LONG = <span class="number">413</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_INSUFFICIENT_SPACE_ON_RESOURCE = <span class="number">419</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_METHOD_FAILURE = <span class="number">420</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_UNPROCESSABLE_ENTITY = <span class="number">422</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_LOCKED = <span class="number">423</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_FAILED_DEPENDENCY = <span class="number">424</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_INSUFFICIENT_STORAGE = <span class="number">507</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果  </li></ul><blockquote><p>可以看到，状态码已经显示403了  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/20639259.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用websocket推送消息</title>
      <link href="/websocket-push-message.html"/>
      <url>/websocket-push-message.html</url>
      <content type="html"><![CDATA[<h1 id="websocket推送消息">1. websocket推送消息</h1><h2 id="准备">1.1. 准备</h2><ul><li>spring boot点餐项目  </li><li>websocket(Html5原生)  </li></ul><blockquote><p>功能：当客户端下订单后，服务端推送消息提醒卖家由用户下单  </p></blockquote><h2 id="流程">1.2. 流程</h2><ul><li>pom.xml：引入依赖  </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- websocket --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>/order/list.ftl：前端js  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#--弹窗--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span></span><br><span class="line">                    提醒</span><br><span class="line">                <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                你有新的订单</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"javascript:document.getElementById('notice').pause()"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"location.reload()"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>查看新的订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">#--播放音乐--</span>&gt;</span><span class="comment">&lt;!--使用html5原生播放音乐--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"notice"</span> <span class="attr">loop</span>=<span class="string">"loop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"/sell/mp3/websocket_message.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> websocket = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span></span><br><span class="line"><span class="javascript">        websocket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://hunterfish.ngrok.xiaomiqiu.cn//sell/webSocket'</span>);</span></span><br><span class="line"><span class="javascript">    &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'该浏览器不支持websocket!'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// websocket事件</span></span></span><br><span class="line"><span class="javascript">    websocket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'建立连接'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    websocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'连接关闭'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    websocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'收到消息:'</span> + event.data)</span></span><br><span class="line"><span class="javascript">        <span class="comment">//弹窗提醒, 播放音乐</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#myModal'</span>).modal(<span class="string">'show'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'notice'</span>).play();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    websocket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'websocket通信发生错误！'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 页面刷新，触发</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        websocket.close();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通知音乐文件：可以<a href="http://developer.baidu.com/vcast" target="_blank" rel="noopener">点击</a>自定义自己想要的提示音！    </p></li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/8132712.jpg" alt=""></p><ul><li>WebSocketConfig.java：websocket配置类，生成Bean  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: websocket配置类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/8 0008 16:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>WebSocket.java  </li></ul><blockquote><p>类似于Controller接口  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: webSocket事件方法：实现前端js中定义的事件方法</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/8 0008 16:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/webSocket"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 储存session</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocket&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        webSocketSet.add(<span class="keyword">this</span>);</span><br><span class="line">        log.info(<span class="string">"【websocket消息】有新的连接，总数:&#123;&#125;"</span>, webSocketSet.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);</span><br><span class="line">        log.info(<span class="string">"【websocket消息】连接断开，总数:&#123;&#125;"</span>, webSocketSet.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);</span><br><span class="line">        log.info(<span class="string">"【websocket消息】收到客户端发来的消息:&#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WebSocket webSocket : webSocketSet) &#123;</span><br><span class="line">            log.info(<span class="string">"【websocket消息】广播消息, message=&#123;&#125;"</span>, message);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                webSocket.session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();    <span class="comment">// 异常只打印不抛出（抛出会回滚）</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试">1.3. 测试</h2><ul><li>启动项目  </li></ul><p>如何启动，请参考本博客另一篇文章<a href="">启动spring boot微信点餐项目</a></p><blockquote><p>当进入或刷新订单页面后，websocket产生连接  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/68865724.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/84939282.jpg" alt=""></p><ul><li>postman发送生成订单请求：  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/90026970.jpg" alt=""></p><ul><li>发送请求后：  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/67965777.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/54531158.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用微信推送模板消息功能</title>
      <link href="/wechat-push-template-message.html"/>
      <url>/wechat-push-template-message.html</url>
      <content type="html"><![CDATA[<h1 id="微信推送模板消息">1. 微信推送模板消息</h1><h2 id="准备">1.1. 准备</h2><ul><li>微信公众平台测试账号  </li><li>微信开发SDK：<a href="https://github.com/Wechat-Group/weixin-java-tools" target="_blank" rel="noopener">weixin-java-mp</a>  </li></ul><h2 id="微信测试平台新建模板消息">1.2. 微信测试平台新建模板消息</h2><blockquote><p>微信测试账号和正式账号还是不一样的，暂时不提  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/47258658.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/55601474.jpg" alt=""></p><h2 id="代码">1.3. 代码</h2><ul><li>application.yml  </li></ul><blockquote><p>可以添加多个模板ID  </p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">templateId:</span></span><br><span class="line">  <span class="comment"># 订单状态变化模板</span></span><br><span class="line"><span class="attr">  orderStatus:</span> <span class="number">6</span><span class="string">JxFTK2OKTIF0hZ6aFrsHcUaNad5VDZ8a8wNk_OztFY</span></span><br></pre></td></tr></table></figure><ul><li>PushMessageService   </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 微信推送消息</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/8 0008 14:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PushMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单状态变更消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">orderStatus</span><span class="params">(OrderDTO orderDTO)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PushMessageServiceImpl.java  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 微信推送消息实现</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/8 0008 14:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushMessageServiceImpl</span> <span class="keyword">implements</span> <span class="title">PushMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpService wxMpService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WechatAccountConfig wechatAccountConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderStatus</span><span class="params">(OrderDTO orderDTO)</span> </span>&#123;</span><br><span class="line">        WxMpTemplateMessage templateMessage = <span class="keyword">new</span> WxMpTemplateMessage();</span><br><span class="line">        templateMessage.setTemplateId(wechatAccountConfig.getTemplateId().get(<span class="string">"orderStatus"</span>));</span><br><span class="line">        templateMessage.setToUser(orderDTO.getBuyerOpenid());</span><br><span class="line"></span><br><span class="line">        List&lt;WxMpTemplateData&gt; data = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"first"</span>, <span class="string">"亲，请记得收货！"</span>),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"keyword1"</span>, <span class="string">"微信点餐"</span>),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"keyword2"</span>, <span class="string">"13636486238"</span>),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"keyword3"</span>, orderDTO.getOrderId()),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"keyword4"</span>, orderDTO.getOrderStatusEnum().getMessage()),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"keyword5"</span>, <span class="string">"￥"</span> + orderDTO.getOrderAmount()),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"remark"</span>, <span class="string">"欢迎再次光临！"</span>)</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line">        templateMessage.setData(data);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wxMpService.getTemplateMsgService().sendTemplateMsg(templateMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">            log.error(<span class="string">"【微信模板消息】发送失败, &#123;&#125;"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>发送模板消息只是捕捉，打印错误日志，并没有抛出异常，因为下面业务代码【完结订单】执行后，如果抛出异常，就会<br>回滚，而【发送模板消息】并不是必须的，如果因为【发送模板消息】出现异常就回滚【完结订单】业务，就得不偿失了！      </p></blockquote><ul><li>OrderServiceImpl.java  </li></ul><blockquote><p>结束订单时，发送模板消息  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderDTO <span class="title">finish</span><span class="params">(OrderDTO orderDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 判断订单状态</span></span><br><span class="line">        <span class="keyword">if</span> (!orderDTO.getOrderStatus().equals(OrderStatusEnum.NEW.getCode())) &#123;</span><br><span class="line">            log.error(<span class="string">"【完结订单】订单状态不正确，orderId=&#123;&#125;, orderStatus=&#123;&#125;"</span>, orderDTO.getOrderId(), orderDTO.getOrderStatus());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(ResultEnum.ORDER_STATUS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 修改订单状态</span></span><br><span class="line">        orderDTO.setOrderStatus(OrderStatusEnum.FINISHED.getCode());</span><br><span class="line">        OrderMaster orderMaster = <span class="keyword">new</span> OrderMaster();</span><br><span class="line">        BeanUtils.copyProperties(orderDTO, orderMaster);</span><br><span class="line">        OrderMaster updateResult = orderMasterRepository.save(orderMaster);</span><br><span class="line">        <span class="keyword">if</span> (updateResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">"【完结订单】更新失败，orderMaster=&#123;&#125;"</span>, orderMaster);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(ResultEnum.ORDER_UPDATE_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 推送微信模板消息（没有抛出异常，只是捕捉并打印日志，因为如果抛出异常，完结订单就会回滚了，推送消息并不是非常必需的）</span></span><br><span class="line">        pushMessageService.orderStatus(orderDTO);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderDTO;</span><br><span class="line">    &#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">* 测试类：  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushMessageServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PushMessageServiceImpl pushMessageService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        OrderDTO orderDTO = orderService.findOne(<span class="string">"1525757413764873869"</span>);</span><br><span class="line">        pushMessageService.orderStatus(orderDTO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/22669771.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分布式系统和分布式session</title>
      <link href="/distributed-system-and-session.html"/>
      <url>/distributed-system-and-session.html</url>
      <content type="html"><![CDATA[<h1 id="分布式系统">1. 分布式系统</h1><h2 id="介绍">1.1. 介绍</h2><blockquote><p>旨在支持应用程序和服务的开发，可以利用物理架构由多个自治的处理元素；<br>不共享主内存，但通过网络发送消息合作。</p></blockquote><h3 id="三个特点">1.1.1. 三个特点</h3><ul><li>多节点  </li><li>消息通信  </li><li>不共享内存  </li></ul><h3 id="三个概念">1.1.2. 三个概念</h3><ul><li>分布式系统（distributed system） </li><li>集群（cluster）  </li><li>分布式计算（distributed computing）  </li></ul><blockquote><p>关于分布式和集群可以这样理解：一个厨房有炒菜的和洗菜的，这就是分布式；如果炒菜的有多个，这就是集群。    </p></blockquote><h1 id="分布式session">2. 分布式session</h1><h2 id="session">2.1. session</h2><blockquote><p>这里我们所说的session是广义的session，就是平常所说的<strong>会话控制</strong>  </p></blockquote><ul><li><p>http协议是无状态的，对于一个URL请求并没有上下文关系，当用户完成登陆后，需要有一个机制能够保存用户的信息<br>和状态，在后续的请求中能够验证用户的身份和检查用户的信息，这个依赖就是会话控制即SESSION。  </p></li><li><p>可以把session理解为一种保存key-value的机制；session机制的关键点：</p><blockquote><p>第一：设置和获取key;<br>第二：如何保存并正确获取对应的value。  </p></blockquote></li><li><p>从key方面来看，常用的会话方式有<strong>sessionId</strong>和<strong>token</strong>；  </p></li><li><p>不管是sessionId还是token都是全局唯一性的，无论是key还是value，如果没有唯一性，就会分辨不出用户身份和信息；  </p></li><li><p>当我们依赖sessionId时，如果用户禁用了Cookie，那么系统就会让用户不断的去登陆；  </p></li><li><p>key对应的value什么情况下有可能不唯一呢，这就是引出了分布式系统下的session问题了？  </p></li></ul><h3 id="sessionId">2.1.1. sessionId</h3><ul><li>客户端请求服务端时，服务端通过setCookie在http请求头中设置key：JSESSIONID和对应的value值；  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/14850270.jpg" alt=""></p><ul><li>客户端Cookie会保存在本地，后续的请求都会自动带上  </li></ul><h3 id="token">2.1.2. token</h3><ul><li><p>使用token时，我们需要手动在http head头或者url请求中设置token字段，服务器收到请求后，<br>再从head头里或url请求中获取token验证用户身份。  </p></li><li><p>当安全比较严格时，会结合签名一起使用。  </p></li></ul><h2 id="分布式系统下的session">2.2. 分布式系统下的session</h2><h3 id="应用最开始的架构">2.2.1. 应用最开始的架构</h3><ul><li>用户请求通过nginx到达tomcat，tomcat部署了一个应用，此时，session保存在tomcat应用的内存中，  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/52761962.jpg" alt=""></p><ul><li>后来用户使用人数激增，一个tomcat扛不住了，然后增加机器，部署多个Tomcat；  </li></ul><blockquote><p>水平扩展：A2、A3都是通过A1复制的，也就是平常说的集群； </p></blockquote><blockquote><p>垂直扩展：比如tomcat的应用中有订单、商家、商品三个服务，拆分出来，然后在三个tomcat上单独部署这三个<br>服务；  </p></blockquote><blockquote><p>接着配置nginx，通过访问不同的url访问不同的负载均衡到不同的服务器上去，减轻单台服务器压力。</p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/72984668.jpg" alt=""></p><ul><li>无论是水平扩展还是垂直拆分扩展，都会引出session的问题：  <blockquote><p>1，比如用户第一次进来访问的是A1服务器，此时A1持有用户的session；<br>2，当用户第二次请求时，由用户负载均衡，有可能访问A2或A3，A2或A3并没有用户的session信息，就会认为该用户没有登陆；<br>3，对于水平扩展，ip_hash可以让同一ip过来的请求发送到后台同一台服务器中，问题：如果很多用户的ip都映射到A1服务器，<br>如果某一时刻，A1宕机挂掉，之前都访问A1服务器的用户都访问不到我们的服务了；<br>4，垂直扩展更没戏了，所以不推荐使用ip_hash。  </p></blockquote></li></ul><h3 id="通用方案">2.2.2. 通用方案</h3><ul><li>创建单独的服务保存session信息，其他的服务都从该服务获取session信息；  、</li><li>通常用Redis集群或主从复制实现；<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/71123749.jpg" alt=""></li><li>这样无论是集群还是分布式服务都能从该服务中根据用户id获取唯一的session信息了；  <blockquote><p>登陆：设置key，保存value（sesion信息）；<br>登出：使该session信息失效。  </p></blockquote></li></ul><h1 id="分布式session实战">3. 分布式session实战</h1><blockquote><p>新建spring boot项目，<a href="https://gitee.com/ddebug/session" target="_blank" rel="noopener">点击访问项目地址</a><br>功能：实现卖家端微信扫码登陆功能。  </p></blockquote><h2 id="SpringBoot整合微信公众平台测试账号授权登陆">3.1. SpringBoot整合微信公众平台测试账号授权登陆</h2><blockquote><p>参考链接：<a href="https://blog.csdn.net/antma/article/details/79629584" target="_blank" rel="noopener">https://blog.csdn.net/antma/article/details/79629584</a>  </p></blockquote><blockquote><p>有关代码基本上和上面参考链接一样，部分需要修改！  </p></blockquote><h3 id="代码部分">3.1.1. 代码部分</h3><ul><li>application.yml：添加微信配置信息  </li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wechat:</span></span><br><span class="line">  <span class="comment"># 公众平台测试账号</span></span><br><span class="line"><span class="attr">  appId:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">  appSecret:</span> <span class="string">xxxxx</span></span><br></pre></td></tr></table></figure><ul><li>WechatAccountConfig：读取application.yml配置信息  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"wechat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatAccountConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 公众平台测试id */</span></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line">    <span class="comment">/** 公众平台测试密钥 */</span></span><br><span class="line">    <span class="keyword">private</span> String appSecret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>WeChatConfig.java：配置WxMpService Bean   </li></ul><blockquote><p><strong>weixin-java-mp</strong>是<a href="https://gitee.com/binary/weixin-java-tools" target="_blank" rel="noopener"><strong>weixin-java-tools</strong></a>开发工具包（SDK）的一部分</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WechatAccountConfig accountConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpService <span class="title">wxService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WxMpService wxservice = <span class="keyword">new</span> WxMpServiceImpl();</span><br><span class="line">        wxservice.setWxMpConfigStorage(wxConfigStorate());</span><br><span class="line">        <span class="keyword">return</span> wxservice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpConfigStorage <span class="title">wxConfigStorate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WxMpInMemoryConfigStorage wxMpInMemoryConfigStorage = <span class="keyword">new</span> WxMpInMemoryConfigStorage();</span><br><span class="line">        wxMpInMemoryConfigStorage.setAppId(accountConfig.getAppId());</span><br><span class="line">        wxMpInMemoryConfigStorage.setSecret(accountConfig.getAppSecret());</span><br><span class="line">        <span class="keyword">return</span> wxMpInMemoryConfigStorage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>LoginController：微信服务请求验证接口（测试账号的url和token验证）  </li></ul><blockquote><p>下面注释掉的java代码也可以，实际上并没有使用CheckUtil和SHA1工具类验证token  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"portal"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"success"</span>);</span><br><span class="line">        String signature = request.getParameter(<span class="string">"signature"</span>);</span><br><span class="line">        String timestamp = request.getParameter(<span class="string">"timestamp"</span>);</span><br><span class="line">        String nonce = request.getParameter(<span class="string">"nonce"</span>);</span><br><span class="line">        String echostr = request.getParameter(<span class="string">"echostr"</span>);</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = response.getWriter();</span><br><span class="line">            <span class="keyword">if</span>(CheckUtil.checkSignature(signature, timestamp, nonce))&#123;</span><br><span class="line">                out.append(echostr);</span><br><span class="line">                out.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不知道下面没有验证token，但是也可以成功</span></span><br><span class="line">        <span class="comment">/*String signature = request.getParameter("signature");</span></span><br><span class="line"><span class="comment">        String timestamp = request.getParameter("timestamp");</span></span><br><span class="line"><span class="comment">        String nonce = request.getParameter("nonce");</span></span><br><span class="line"><span class="comment">        String echostr = request.getParameter("echostr");</span></span><br><span class="line"><span class="comment">        System.out.println("signature:" + signature);</span></span><br><span class="line"><span class="comment">        System.out.println("timestamp:" + timestamp);</span></span><br><span class="line"><span class="comment">        System.out.println("nonce:" + nonce);</span></span><br><span class="line"><span class="comment">        System.out.println("echostr:" + echostr);</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            PrintWriter pw = response.getWriter();</span></span><br><span class="line"><span class="comment">            pw.append(echostr);</span></span><br><span class="line"><span class="comment">            pw.flush();</span></span><br><span class="line"><span class="comment">        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CheckUtil：微信请求校验工具类  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String token = <span class="string">"hunterfish"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkSignature</span><span class="params">(String signature,String timestamp,String nonce)</span></span>&#123;</span><br><span class="line">        String[] str = <span class="keyword">new</span> String[]&#123;token,timestamp,nonce&#125;;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(str);</span><br><span class="line">        <span class="comment">//拼接字符串</span></span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;str.length;i++)&#123;</span><br><span class="line">            buffer.append(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行sha1加密</span></span><br><span class="line">        String temp = SHA1.encode(buffer.toString());</span><br><span class="line">        <span class="comment">//与微信提供的signature进行匹对</span></span><br><span class="line">        <span class="keyword">return</span> signature.equals(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SHA1：sha1加密  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHA1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] HEX_DIGITS = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>,</span><br><span class="line">            <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Takes the raw bytes from the digest and formats them correct.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes the raw bytes from the digest.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the formatted bytes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getFormattedText</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = bytes.length;</span><br><span class="line">        StringBuilder buf = <span class="keyword">new</span> StringBuilder(len * <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 把密文转换成十六进制的字符串形式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            buf.append(HEX_DIGITS[(bytes[j] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>]);</span><br><span class="line">            buf.append(HEX_DIGITS[bytes[j] &amp; <span class="number">0x0f</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"SHA1"</span>);</span><br><span class="line">            messageDigest.update(str.getBytes());</span><br><span class="line">            <span class="keyword">return</span> getFormattedText(messageDigest.digest());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>WeChatController：访问微信服务器获取code和access_token、openId等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpService wxMpService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 功能描述: 微信授权</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 作者: luohongquan</span></span><br><span class="line"><span class="comment">     * 日期: 2018/5/3 0003 15:12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/authorize"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">qrAuthorize</span><span class="params">(@RequestParam(<span class="string">"returnUrl"</span>)</span> String returnUrl) </span>&#123;</span><br><span class="line">        String url = <span class="string">"https://c901e3dd.ngrok.io/session/userInfo"</span>;</span><br><span class="line">        String redirectURL = wxMpService.oauth2buildAuthorizationUrl(url, WxConsts.OAUTH2_SCOPE_USER_INFO, URLEncoder.encode(returnUrl));</span><br><span class="line">        log.info(<span class="string">"【微信网页授权】获取code，redirectURL=&#123;&#125;"</span>, redirectURL);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span> + redirectURL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 功能描述: 获取openId</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 作者: luohongquan</span></span><br><span class="line"><span class="comment">     * 日期: 2018/5/3 0003 15:12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/userInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">qrUserInfo</span><span class="params">(@RequestParam(<span class="string">"code"</span>)</span> String code,</span></span><br><span class="line"><span class="function">                             @<span class="title">RequestParam</span><span class="params">(<span class="string">"state"</span>)</span> String returnUrl) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"【微信网页授权】code=&#123;&#125;"</span>, code);</span><br><span class="line">        log.info(<span class="string">"【微信网页授权】state=&#123;&#125;"</span>, returnUrl);</span><br><span class="line">        WxMpOAuth2AccessToken wxMpOAuth2AccessToken = <span class="keyword">new</span> WxMpOAuth2AccessToken();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wxMpOAuth2AccessToken = wxMpService.oauth2getAccessToken(code);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">            log.error(<span class="string">"【微信网页授权】&#123;&#125;"</span>, e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String openId = wxMpOAuth2AccessToken.getOpenId();</span><br><span class="line">        log.info(<span class="string">"【微信网页授权】openId=&#123;&#125;"</span>, openId);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span> + returnUrl + <span class="string">"?openid="</span> + openId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 功能描述: 首页</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 作者: luohongquan</span></span><br><span class="line"><span class="comment">     * 日期: 2018/5/3 0003 14:54</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 功能描述: 登陆页面</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 作者: luohongquan</span></span><br><span class="line"><span class="comment">     * 日期: 2018/5/3 0003 14:54</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.html：访问路径”<a href="http://hunterfish.ngrok.xiaomiqiu.cn/session/&quot;，项目登陆后首页" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/session/&quot;，项目登陆后首页</a>  </li></ul><blockquote><p>前端页面简单的使用Thymeleaf完成     </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>login.html：访问路径”<a href="http://hunterfish.ngrok.xiaomiqiu.cn/session/&quot;，项目登陆页面" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/session/&quot;，项目登陆页面</a>  </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>微信公众平台测试号网页授权<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>授权页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size: 64px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/authorize(returnUrl='https://hunterfish.ngrok.xiaomiqiu.cn/session/')&#125;"</span>&gt;</span>微信登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行测试">3.1.2. 运行测试</h3><p><strong>1. 接口配置信息验证</strong>    </p><blockquote><p>URL：<a href="http://hunterfish.ngrok.xiaomiqiu.cn/session/portal（中间使用ngrok内网穿透域名）" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/session/portal（中间使用ngrok内网穿透域名）</a><br>Token：随便写，与LoginController的”/portal”接口中的token验证保持一致（实际中我测试不需要验证也能成功）  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/78053565.jpg" alt=""></p><p><strong>2. 进入登陆页面</strong>   </p><blockquote><p>使用<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html" target="_blank" rel="noopener">微信开发工具</a>，方便快捷；<br>登陆URL：<a href="http://hunterfish.ngrok.xiaomiqiu.cn/session/login" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/session/login</a>  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/40775360.jpg" alt=""></p><p><strong>3. 点击”微信登陆”</strong>  </p><blockquote><p>根据前面html页面可知，点击登陆的url链接：<a href="https://hunterfish.ngrok.xiaomiqiu.cn/session/authorize?returnUrl=https://hunterfish.ngrok.xiaomiqiu.cn/session/" target="_blank" rel="noopener">https://hunterfish.ngrok.xiaomiqiu.cn/session/authorize?returnUrl=https://hunterfish.ngrok.xiaomiqiu.cn/session/</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size: 64px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/authorize(returnUrl='https://hunterfish.ngrok.xiaomiqiu.cn/session/')&#125;"</span>&gt;</span>微信登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/78982621.jpg" alt=""></p><p><strong>4. 点击”确认登录”</strong>  </p><blockquote><p>此时，执行”/userInfo”接口，并携带了第三步访问”/authorize”接口的获取的Code等参数；<br>最终授权成功后，跳转到第一步登陆时携带的链接：<a href="http://hunterfish.ngrok.xiaomiqiu.cn/session/（index.html)。" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/session/（index.html)。</a>  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/62033396.jpg" alt=""></p><h2 id="登陆用户代码">3.2. 登陆用户代码</h2><h3 id="sql语句">3.2.1. sql语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户(登录后台使用, 用户登录可直接采用微信扫码登录，不使用账号密码)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`seller_info`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="string">`openid`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'微信openid'</span>,</span><br><span class="line">    <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`update_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'修改时间'</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">comment</span> <span class="string">'用户信息表'</span>;</span><br></pre></td></tr></table></figure><h3 id="后台代码">3.2.2. 后台代码</h3><ul><li>pom.xml  </li></ul><blockquote><p>新增mysql、jpa、lombok、weixin-java-mp、thymeleaf依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li>实体类  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String sellerId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String openid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Dao层  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserInfo</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据openId查询用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">UserInfo <span class="title">findByOpenid</span><span class="params">(String openid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Service层  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据openid查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> openid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">UserInfo <span class="title">findUserInfoByOpenid</span><span class="params">(String openid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoRepository userInfoRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfo <span class="title">findUserInfoByOpenid</span><span class="params">(String openid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 分布式 </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql统计一段时间内每天数据情况</title>
      <link href="/mysql-everyday-data-by-period.html"/>
      <url>/mysql-everyday-data-by-period.html</url>
      <content type="html"><![CDATA[<h2 id="项目需求">0.1. 项目需求</h2><p>后台项目要统计游戏模块每天新增人数，新增体力值数量以及占总体力值百分比，显示效果如下图所示：</p><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/37035734.jpg" alt=""></p><h2 id="sql语句">0.2. sql语句</h2><p>sql语句如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t2.date,</span><br><span class="line">    <span class="keyword">ifnull</span>(t4.newUserNum,<span class="number">0</span>) newUserNum,</span><br><span class="line">    <span class="keyword">ifnull</span>(t3.addVitality,<span class="number">0</span>) addVitality,</span><br><span class="line">    <span class="keyword">ifnull</span>(t4.allVitality,<span class="number">0</span>) allVitality,</span><br><span class="line">    <span class="keyword">ifnull</span>(<span class="keyword">ROUND</span>(t3.addVitality/t4.allVitality*<span class="number">100</span>,<span class="number">1</span>),<span class="number">0</span>) <span class="keyword">percent</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> @cdate := <span class="keyword">DATE_ADD</span>(@cdate, <span class="built_in">INTERVAL</span> <span class="number">-1</span> <span class="keyword">DAY</span>) <span class="built_in">date</span></span><br><span class="line">     <span class="keyword">FROM</span></span><br><span class="line">             (<span class="keyword">SELECT</span> @cdate := <span class="keyword">DATE_ADD</span>(<span class="string">'2018-03-21'</span>, <span class="built_in">INTERVAL</span> +<span class="number">1</span> <span class="keyword">DAY</span>)</span><br><span class="line">                <span class="keyword">FROM</span></span><br><span class="line">                        dl_area t0 <span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line">             ) t1</span><br><span class="line">    ) t2</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">sum</span>(<span class="keyword">if</span>((pay_status = <span class="number">1</span>),pay_amount,<span class="number">0</span>)) addVitality, <span class="built_in">DATE</span>(create_time) <span class="built_in">date</span></span><br><span class="line">         <span class="keyword">FROM</span></span><br><span class="line">                 ldd_game_pay_order</span><br><span class="line">         <span class="keyword">WHERE</span> create_time <span class="keyword">BETWEEN</span> <span class="string">'2018-02-02T00:00'</span> <span class="keyword">AND</span> <span class="string">'2018-03-21T00:00'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">date</span></span><br><span class="line">        ) t3</span><br><span class="line"><span class="keyword">ON</span> t2.date = t3.date</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="keyword">id</span>) newUserNum, <span class="keyword">sum</span>(vitality) allVitality, <span class="built_in">Date</span>(create_time) <span class="built_in">date</span></span><br><span class="line">         <span class="keyword">FROM</span></span><br><span class="line">                 ldd_game_user_info</span><br><span class="line">         <span class="keyword">WHERE</span> create_time <span class="keyword">BETWEEN</span> <span class="string">'2018-02-02T00:00'</span> <span class="keyword">AND</span> <span class="string">'2018-03-21T00:00'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">date</span></span><br><span class="line">        ) t4</span><br><span class="line"><span class="keyword">ON</span> t2.date = t4.date</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t2.date</span><br></pre></td></tr></table></figure></p><p>mybatis,xml语句如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryNewUserStatistics"</span> <span class="attr">resultType</span>=<span class="string">"com.dl98.modules.api.vo.GameStatisticsVo"</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">        t2.date,</span><br><span class="line">        ifnull(t4.newUserNum,0) newUserNum,</span><br><span class="line">        ifnull(t3.addVitality,0) addVitality,</span><br><span class="line">        ifnull(t4.allVitality,0) allVitality,</span><br><span class="line">        ifnull(ROUND(t3.addVitality/t4.allVitality*100,1),0) percent</span><br><span class="line">    FROM</span><br><span class="line">        (SELECT @cdate := DATE_ADD(@cdate, INTERVAL -1 DAY) date</span><br><span class="line">         FROM</span><br><span class="line">             (SELECT @cdate := DATE_ADD(#&#123;eDate&#125;, INTERVAL +1 DAY)</span><br><span class="line">              FROM</span><br><span class="line">                  dl_area t0 LIMIT #&#123;days&#125;</span><br><span class="line">             ) t1</span><br><span class="line">        ) t2</span><br><span class="line">    LEFT JOIN (SELECT sum(if((pay_status = 1),pay_amount,0)) addVitality, DATE(create_time) date</span><br><span class="line">               FROM</span><br><span class="line">                   ldd_game_pay_order</span><br><span class="line">               WHERE create_time BETWEEN #&#123;sTime&#125; AND #&#123;eTime&#125; GROUP BY date</span><br><span class="line">              ) t3</span><br><span class="line">    ON t2.date = t3.date</span><br><span class="line">    LEFT JOIN (SELECT count(id) newUserNum, sum(vitality) allVitality, Date(create_time) date</span><br><span class="line">               FROM</span><br><span class="line">                   ldd_game_user_info</span><br><span class="line">               WHERE create_time BETWEEN #&#123;sTime&#125; AND #&#123;eTime&#125; GROUP BY date</span><br><span class="line">              ) t4</span><br><span class="line">    ON t2.date = t4.date</span><br><span class="line">    ORDER BY t2.date</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="sql分析">0.2.1. sql分析</h3><h4 id="生成一段时间列">0.2.1.1. 生成一段时间列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @cdate := <span class="keyword">DATE_ADD</span>(@cdate, <span class="built_in">INTERVAL</span> <span class="number">-1</span> <span class="keyword">DAY</span>) <span class="built_in">date</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> @cdate := <span class="keyword">DATE_ADD</span>(#&#123;eDate&#125;, <span class="built_in">INTERVAL</span> +<span class="number">1</span> <span class="keyword">DAY</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  dl_area t0 <span class="keyword">LIMIT</span> #&#123;<span class="keyword">days</span>&#125;</span><br><span class="line">) t1</span><br></pre></td></tr></table></figure><ol><li><strong>@cdate</strong>   <blockquote><p>是定义名为cdate的变量并赋值（select后面必须用:=）  </p></blockquote></li><li><strong><a href="http://www.w3school.com.cn/sql/func_date_add.asp" target="_blank" rel="noopener">ATE_ADD(date, INTERVAL expr type)</a></strong> <blockquote><p>该mysql函数向日期添加指定的时间间隔  </p></blockquote></li><li><strong><a href="https://blog.csdn.net/arenzhj/article/details/16902141" target="_blank" rel="noopener">INTERVAL</a></strong>  <blockquote><p>取间隔关键字</p></blockquote></li><li><strong>@cdate := DATE_ADD(‘20180319’, INTERVAL + 1 DAY)</strong>  <blockquote><p>按照传入的日期’20180319’,加一天  </p></blockquote></li><li><strong>SELECT @cdate := DATE_ADD(‘20180319’,INTERVAL + 1 DAY) FROM ‘dl_area’</strong>  <blockquote><p>找一张表记录条数足够多的即可，能生成你想要的时间段内的连续日期  </p></blockquote></li><li><strong>limit</strong>  <blockquote><p>你需要的连续日期长度</p></blockquote><h2 id="参考链接">0.3. 参考链接</h2></li></ol><ul><li>ifnull(,)在使用GROUP By后不起作用，参考资料：<a href="https://blog.csdn.net/galenowow/article/details/79258748" target="_blank" rel="noopener">https://blog.csdn.net/galenowow/article/details/79258748</a>  </li><li>mysql生成一段时间内的连续天数日期，参考资料：<br><a href="https://www.jianshu.com/p/a63526962139" target="_blank" rel="noopener">https://www.jianshu.com/p/a63526962139</a><br><a href="https://www.cnblogs.com/dennyzhangdd/p/8073181.html" target="_blank" rel="noopener">https://www.cnblogs.com/dennyzhangdd/p/8073181.html</a>  <blockquote><p>注意：limit作用是连续天数的个数，不能超过查询表的记录条数！</p></blockquote></li><li><a href="https://blog.csdn.net/touatou/article/details/77045740" target="_blank" rel="noopener">https://blog.csdn.net/touatou/article/details/77045740</a></li></ul>]]></content>
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云服务器安装redis总结</title>
      <link href="/aliyun-install-redis-summary.html"/>
      <url>/aliyun-install-redis-summary.html</url>
      <content type="html"><![CDATA[<h1 id="在阿里云服务器上安装Redis数据库">1. 在阿里云服务器上安装Redis数据库</h1><h2 id="服务器具体信息">1.1. 服务器具体信息</h2><ul><li>CPU： 1核 </li><li>内存： 2 GB </li><li>实例类型： I/O优化 </li><li>操作系统： CentOS 7.4 64位  </li></ul><h2 id="mysql版本">1.2. mysql版本</h2><blockquote><p>redis-4.0.9  </p></blockquote><h2 id="安装流程">1.3. 安装流程</h2><p>参考链接：<a href="https://blog.csdn.net/mlks_2008/article/details/19001595" target="_blank" rel="noopener">https://blog.csdn.net/mlks_2008/article/details/19001595</a>  </p><h2 id="注意事项">1.4. 注意事项</h2><ul><li>参考链接里的init脚本头部添加下面内容：  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># chkconfig: 2345 90 10</span><br><span class="line"># description: Redis is a persistent key-value database</span><br><span class="line">```  </span><br><span class="line">* redis配置认证密码  </span><br><span class="line"></span><br><span class="line">redis配置文件/etc/redis.conf，去掉下面的注释，修改你自己的密码，重启完成</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">requirepass footbared  </span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">* 配置外网访问  </span><br><span class="line"></span><br><span class="line">redis3.0 以上的版本默认启用了安全机制较高的防护模式（protected-mode）。  </span><br><span class="line"></span><br><span class="line">redis2.x 只需要 bind 0.0.0.0，并开放防火墙端口即可外网访问；而redis3.x版本需要在此基础上禁用防护模式。  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"># redis-cli // 进入redis命令行模式  </span><br><span class="line">xxxx:6379&gt; CONFIG SET protected-mode no // 禁用防护模式</span><br></pre></td></tr></table></figure><h2 id="阿里云Redis漏洞">1.5. 阿里云Redis漏洞</h2><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-18/56531317.jpg" alt=""></p><p>参考<a href="http://www.freebuf.com/column/158065.html" target="_blank" rel="noopener">Redis未授权访问详解</a></p>]]></content>
      
      <categories>
          
          <category> 阿里云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 阿里云服务器 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用CentOS7命令</title>
      <link href="/common-centos7-commands.html"/>
      <url>/common-centos7-commands.html</url>
      <content type="html"><![CDATA[<h1 id="常用但不好记命令">1. 常用但不好记命令</h1><h2 id="开放防火墙端口">1.1. 开放防火墙端口</h2><ul><li>开放相应端口  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=<span class="keyword">public</span> --add-port=<span class="number">3306</span>/tcp</span><br><span class="line">firewall-cmd --permanent --zone=<span class="keyword">public</span> --add-port=<span class="number">3306</span>/udp </span><br><span class="line">```  </span><br><span class="line">* 重启使修改的防火墙规则生效  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">firewall-cmd --reload  </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">## 查看进程和端口监听  </span><br><span class="line"></span><br><span class="line">* 检查后台进程是否正在运行  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">ps -ef | grep redis  </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">* 检测端口是否在监听  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">netstat -lntp | grep <span class="number">6379</span></span><br></pre></td></tr></table></figure><h2 id="远程连接服务器发送文件">1.2. 远程连接服务器发送文件</h2><h3 id="通过工具">1.2.1. 通过工具</h3><blockquote><p>这种比较简单，可以通过putty,xshell等连接，通过xfpt发送文件  </p></blockquote><h3 id="通过命令行">1.2.2. 通过命令行</h3><ul><li><p><strong>ssh <a href="mailto:username@ip.address" target="_blank" rel="noopener">username@ip.address</a></strong>：连接</p><blockquote><p>通过命令行远程连接linux服务器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@47.98.xxx.xx</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>scp</strong>：copy文件  </p><blockquote><p>参考<a href="https://blog.csdn.net/jyf0412/article/details/36866041" target="_blank" rel="noopener">scp命令在linux和windows之间互传文件</a>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp target\sell.jar root@47.98.113.88:/opt/javaapps</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云服务器搭建Maven nexus私服</title>
      <link href="/aliyun-install-nexus-summary.html"/>
      <url>/aliyun-install-nexus-summary.html</url>
      <content type="html"><![CDATA[<h1 id="在阿里云服务器上搭建Maven私服">1. 在阿里云服务器上搭建Maven私服</h1><h2 id="服务器具体信息">1.1. 服务器具体信息</h2><ul><li>CPU： 1核 </li><li>内存： 2 GB </li><li>实例类型： I/O优化 </li><li>操作系统： CentOS 7.4 64位  </li></ul><h2 id="安装流程">1.2. 安装流程</h2><h3 id="git安装">1.2.1. git安装</h3><p>参考链接：<a href="https://www.cnblogs.com/boxuan/articles/6434109.html" target="_blank" rel="noopener">https://www.cnblogs.com/boxuan/articles/6434109.html</a>  </p><blockquote><p>执行<code>make configure</code>等命令时，会报错，缺少包，百度搜一下安装即可。  </p></blockquote><h3 id="JDK安装">1.2.2. JDK安装</h3><p>参考链接：<a href="https://blog.csdn.net/fuyuwei2015/article/details/73195936" target="_blank" rel="noopener">https://blog.csdn.net/fuyuwei2015/article/details/73195936</a>  </p><h3 id="Maven安装">1.2.3. Maven安装</h3><p>参考链接：<a href="https://www.cnblogs.com/HendSame-JMZ/p/6122188.html" target="_blank" rel="noopener">https://www.cnblogs.com/HendSame-JMZ/p/6122188.html</a>  </p><ul><li>/etc/profile修改为：  </li></ul><pre><code class="properties">#set for nodejs  export NODE_HOME=/usr/local/node  #export PATH=$NODE_HOME/bin:$PATHexport JAVA_HOME=/usr/local/java/jdk1.8.0_171#export JRE_HOME=${JAVA_HOME}/jre#export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport MAVEN_HOME=/usr/local/mavenexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$MAVEN_HOME/bin:$NODE_HOME/bin:$PATH</code></pre><h3 id="搭建私服">1.2.4. 搭建私服</h3><p>参考链接：<a href="https://juejin.im/entry/59e1cea8f265da43163c1990" target="_blank" rel="noopener">https://juejin.im/entry/59e1cea8f265da43163c1990</a>  </p>]]></content>
      
      <categories>
          
          <category> 阿里云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> JDK </tag>
            
            <tag> Nexus3 </tag>
            
            <tag> Linux </tag>
            
            <tag> 阿里云服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云服务器安装mysql总结</title>
      <link href="/aliyun-install-mysql-summary.html"/>
      <url>/aliyun-install-mysql-summary.html</url>
      <content type="html"><![CDATA[<h1 id="阿里云服务器安装mysql总结">1. 阿里云服务器安装mysql总结</h1><h2 id="服务器具体信息">1.1. 服务器具体信息</h2><ul><li>CPU： 1核 </li><li>内存： 2 GB </li><li>实例类型： I/O优化 </li><li>操作系统： CentOS 7.4 64位  </li></ul><h2 id="mysql版本">1.2. mysql版本</h2><blockquote><p>mysql  Ver 14.14 Distrib 5.6.40, for Linux (x86_64) using  EditLine wrapper  </p></blockquote><h2 id="安装流程">1.3. 安装流程</h2><p>参考资料：<a href="https://yq.aliyun.com/articles/47237" target="_blank" rel="noopener">https://yq.aliyun.com/articles/47237</a>  </p><ul><li>卸载原来mysql  </li><li>安装流程  </li><li>开机启动  </li><li>防火墙设置  </li><li>MySql安全设置  </li><li>远程访问设置  </li><li>utf8字符集设置  </li><li>备份还原  </li></ul><h2 id="mysql-用户设置">1.4. mysql 用户设置</h2><ul><li>root用户禁止远程访问   密码：L***1!</li><li>普通用户：hunterfish 密码：1<em>**</em>0</li><li>管理员用户：admin 密码：1<em>**</em>9</li></ul><h2 id="遇到的问题">1.5. 遇到的问题</h2><h3 id="mysql5-7初始化密码问题">1.5.1. mysql5.7初始化密码问题</h3><p>按照上面参考链接教程安装，如果是mysql5.7的话，使用mysql访问会出现下面错误：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)</span><br></pre></td></tr></table></figure><p>这是因为mysql从5.6开始后，安装初始化密码就不为空了，下面更改密码：  </p><ol><li>查看初始化密码  </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 'temporary password' /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-29/90859158.jpg" alt=""></p><ol start="2"><li>更改初始化密码<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-29/85681101.jpg" alt=""></li></ol><h3 id="3306端口">1.5.2. 3306端口</h3><p>顺利执行上面参考链接的安装流程后，在本地远程连接阿里云mysql数据库时（防火墙已经开放了3306d端口），遇到：</p><blockquote><p>can’t connect to mysql server on 10060  </p></blockquote><p>原因是阿里云服务器设置了安全组规则，只允许22和3389端口开放，所以新增3306安全组规则：  </p><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/4855161.jpg" alt=""></p><p>参考资料：<a href="https://blog.csdn.net/u010955892/article/details/72774920" target="_blank" rel="noopener">https://blog.csdn.net/u010955892/article/details/72774920</a></p>]]></content>
      
      <categories>
          
          <category> 阿里云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 阿里云服务器 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用tk.mybatis优化Spring Boot项目</title>
      <link href="/tk-mybatis-optimize-project.html"/>
      <url>/tk-mybatis-optimize-project.html</url>
      <content type="html"><![CDATA[<h1 id="Spring-Boot项目中整合tk-mybatis通用插件">1. Spring Boot项目中整合tk.mybatis通用插件</h1><h2 id="tk-mybatis介绍">1.1. tk.mybatis介绍</h2><ul><li>tk.mybatis是一款强大的MyBatis插件，合理使用会帮你除去大量的mybatis中的mapper.mxl文件里重复的sql语句；</li><li>Spring Boot中已经整合了tk.mybatis插件，使用起来非常方便  </li><li><a href="http://www.mybatis.tk/" target="_blank" rel="noopener">Mybatis官方文档地址</a>  </li><li><a href="https://blog.csdn.net/shikaiwencn/article/details/52485883" target="_blank" rel="noopener">框架介绍链接</a></li></ul><pre><code class="xml"><span class="comment">&lt;!-- 通用插件 mapper  --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mapper-spring-boot-starter.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><h2 id="项目改造">1.2. 项目改造</h2><h3 id="引入之前">1.2.1. 引入之前</h3><p>没有使用tk.mybatis之前，使用Mybatis Generator逆向生成mapper.xml, pojo, dao, service, controller等文件  </p><ul><li><font color="#0099ff" size="3" face="黑体">mapper.xml示例</font>  </li></ul><blockquote><p> 每一个mapper.xml文件中都会包含queryObject，queryList，save，update，delete，deleteBatch查询语句，在此基础上你可以修改或新增查询方法；<br>造成大量的重复性代码  </p></blockquote><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dl98.modules.api.dao.financial.BankDao"</span>&gt;</span>    <span class="comment">&lt;!-- 可根据自己的需求，是否要使用 --&gt;</span>    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.dl98.modules.api.entity.user.Bank"</span> <span class="attr">id</span>=<span class="string">"dlBankMap"</span>&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"createTime"</span> <span class="attr">column</span>=<span class="string">"create_time"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"updatedTime"</span> <span class="attr">column</span>=<span class="string">"updated_time"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"createBy"</span> <span class="attr">column</span>=<span class="string">"create_by"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"deleted"</span> <span class="attr">column</span>=<span class="string">"deleted"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"enable"</span> <span class="attr">column</span>=<span class="string">"enable"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"modifyBy"</span> <span class="attr">column</span>=<span class="string">"modify_by"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bank"</span> <span class="attr">column</span>=<span class="string">"bank"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cardNo"</span> <span class="attr">column</span>=<span class="string">"card_no"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cardType"</span> <span class="attr">column</span>=<span class="string">"card_type"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"subbranch"</span> <span class="attr">column</span>=<span class="string">"subbranch"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span>    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span>    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryObject"</span> <span class="attr">resultType</span>=<span class="string">"com.dl98.modules.api.entity.user.Bank"</span>&gt;</span>        select * from dl_bank where id = #{value}    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryList"</span> <span class="attr">resultType</span>=<span class="string">"com.dl98.modules.api.entity.user.Bank"</span>&gt;</span>        select * from dl_bank        <span class="tag">&lt;<span class="name">choose</span>&gt;</span>            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"sidx != null and sidx.trim() != ''"</span>&gt;</span>                order by ${sidx} ${order}            <span class="tag">&lt;/<span class="name">when</span>&gt;</span>            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>                order by id desc            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span>        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span>        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"offset != null and limit != null"</span>&gt;</span>            limit #{offset}, #{limit}        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>     <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryTotal"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span>        select count(*) from dl_bank     <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.dl98.modules.api.entity.user.Bank"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span>        insert into dl_bank        (            `create_time`,             `updated_time`,             `create_by`,             `deleted`,             `enable`,             `modify_by`,             `bank`,             `card_no`,             `card_type`,             `name`,             `subbranch`,             `user_id`        )        values        (            #{createTime},             #{updatedTime},             #{createBy},             #{deleted},             #{enable},             #{modifyBy},             #{bank},             #{cardNo},             #{cardType},             #{name},             #{subbranch},             #{userId}        )    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span>    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.dl98.modules.api.entity.user.Bank"</span>&gt;</span>        update dl_bank         <span class="tag">&lt;<span class="name">set</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"createTime != null"</span>&gt;</span>`create_time` = #{createTime}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"updatedTime != null"</span>&gt;</span>`updated_time` = #{updatedTime}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"createBy != null"</span>&gt;</span>`create_by` = #{createBy}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deleted != null"</span>&gt;</span>`deleted` = #{deleted}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"enable != null"</span>&gt;</span>`enable` = #{enable}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"modifyBy != null"</span>&gt;</span>`modify_by` = #{modifyBy}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bank != null"</span>&gt;</span>`bank` = #{bank}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cardNo != null"</span>&gt;</span>`card_no` = #{cardNo}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cardType != null"</span>&gt;</span>`card_type` = #{cardType}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span>`name` = #{name}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"subbranch != null"</span>&gt;</span>`subbranch` = #{subbranch}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userId != null"</span>&gt;</span>`user_id` = #{userId}<span class="tag">&lt;/<span class="name">if</span>&gt;</span>        <span class="tag">&lt;/<span class="name">set</span>&gt;</span>        where id = #{id}    <span class="tag">&lt;/<span class="name">update</span>&gt;</span>    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span>        delete from dl_bank where id = #{value}    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span>    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBatch"</span>&gt;</span>        delete from dl_bank where id in         <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span>            #{id}        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span>    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></code></pre><ul><li><font color="#0099ff" size="3" face="黑体">Dao层代码</font>  </li></ul><blockquote><p> 继承BaseDao接口；BaseDao定义的方法xml文件中必须有相应的SQL语句  </p></blockquote><pre><code class="java"><span class="comment">/**</span><span class="comment"> * 功能描述: 银行卡数据访问层</span><span class="comment"> */</span><span class="meta">@Mapper</span><span class="meta">@Repository</span><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BankDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Bank</span>&gt; </span>{}</code></pre><pre><code class="java"><span class="comment">/**</span><span class="comment"> * 基础Dao(还需在XML文件里，有对应的SQL语句)</span><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>{    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(T t)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">saveBatch</span><span class="params">(List&lt;T&gt; list)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(T t)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Object id)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">deleteBatch</span><span class="params">(Object[] id)</span></span>;    <span class="function">T <span class="title">queryObject</span><span class="params">(Object id)</span></span>;    <span class="function">List&lt;T&gt; <span class="title">queryList</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function">List&lt;T&gt; <span class="title">queryList</span><span class="params">(Object id)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">queryTotal</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">queryTotal</span><span class="params">()</span></span>;}</code></pre><ul><li><font color="#0099ff" size="3" face="黑体">service接口</font>  </li></ul><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BankService</span> </span>{    <span class="comment">// 新增自定义查询接口</span>    <span class="function">R <span class="title">updateBank</span><span class="params">(Bank bank)</span></span>;    <span class="comment">// 修改了原来dao默认的查询接口</span>    <span class="function">Bank <span class="title">queryObject</span><span class="params">(Long id)</span></span>;}</code></pre><ul><li><font color="#0099ff" size="3" face="黑体">service实现层</font>  </li></ul><blockquote><p> 注入BankDao  </p></blockquote><pre><code class="java"><span class="meta">@Service</span><span class="meta">@Transactional</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankServiceImpl</span> <span class="keyword">implements</span> <span class="title">BankService</span></span>{    <span class="meta">@Autowired</span>    <span class="keyword">private</span> BankDao bankDao;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> R <span class="title">updateBank</span><span class="params">(Bank bank)</span> </span>{        <span class="keyword">int</span> Result = bankDao.update(bank);        <span class="keyword">return</span> Result == <span class="number">0</span> ? R.error(<span class="string">"银行卡信息保存失败"</span>) : R.ok();    }    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> Bank <span class="title">queryObject</span><span class="params">(Long id)</span> </span>{        <span class="keyword">return</span> bankDao.queryObject(id);    }}</code></pre><blockquote><p> 总结：在mapper.xml中会有大量重复代码产生，使用tk.mybatis解决这个问题。  </p></blockquote><h3 id="引入之后">1.2.2. 引入之后</h3><ul><li><font color="#0099ff" size="3" face="黑体">mapper.xml文件</font>  </li></ul><blockquote><p>对，crud什么都不需要了，除非你有其他新增的业务需求要重写sql语句  </p></blockquote><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dl98.modules.api.dao.financial.BankMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></code></pre><ul><li><font color="#0099ff" size="3" face="黑体">实体类</font>   </li></ul><blockquote><p>使用tk.mybatis后，实体类必须使用注解  </p></blockquote><pre><code class="java"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">true</span>)<span class="meta">@Data</span><span class="meta">@Table</span>(name = <span class="string">"dl_bank"</span>)<span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)<span class="meta">@JsonIgnoreProperties</span>(value = {<span class="string">"hibernateLazyInitializer"</span>, <span class="string">"handler"</span>, <span class="string">"fieldHandler"</span>}, ignoreUnknown = <span class="keyword">true</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> <span class="keyword">extends</span> <span class="title">BaseFullEntity</span> </span>{    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8252054024694303083L</span>;    <span class="comment">/** 用户 **/</span>    <span class="meta">@Column</span>(name = <span class="string">"user_id"</span>)    <span class="keyword">private</span> Long userId;    <span class="comment">/** 银行卡所属银行 */</span>    <span class="meta">@Column</span>(name = <span class="string">"bank"</span>)    <span class="keyword">private</span> String bank;    <span class="comment">/** 银行卡号 */</span>    <span class="meta">@Column</span>(name = <span class="string">"card_no"</span>)    <span class="keyword">private</span> String cardNo;    <span class="comment">/** 支行 */</span>    <span class="meta">@Column</span>(name = <span class="string">"subbranch"</span>)    <span class="keyword">private</span> String subbranch;    <span class="comment">/** 姓名 (实名认证的名字) **/</span>    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)    <span class="keyword">private</span> String name;    <span class="comment">/** 银行卡类型  0=银行卡 1=支付宝？ 2=微信？ **/</span>    <span class="meta">@Column</span>(name = <span class="string">"card_type"</span>)    <span class="keyword">private</span> Integer cardType;}</code></pre><blockquote><p><strong>@JsonInclude(Include.NON_NULL)</strong>：将该标记放在属性上，如果该属性为NULL则不参与序列化；<br>如果放在类上，对整个类的全部属性起作用。<a href="https://www.cnblogs.com/yangy608/p/3936848.html" target="_blank" rel="noopener">点击详情！</a></p></blockquote><blockquote><p><strong>@JsonIgnoreProperties(value = {“hibernateLazyInitializer”, “handler”, “fieldHandler”}, ignoreUnknown = true)</strong>：  </p><ul><li>value属性：目的为了阻止Jackson在转化时触发hibernateLazyFetch机制</li><li>ignoreUnknown = true：忽略掉从JSON（由于在应用中没有完全匹配的POJO）中获得的所有“多余的”属性</li><li>参考资料：<a href="http://wong-john.iteye.com/blog/1753402" target="_blank" rel="noopener">http://wong-john.iteye.com/blog/1753402</a> <a href="http://hypgr.iteye.com/blog/907549" target="_blank" rel="noopener">http://hypgr.iteye.com/blog/907549</a>   </li></ul></blockquote><ul><li><font color="#0099ff" size="3" face="黑体">Dao层</font>  </li></ul><blockquote><p>重点是BaseMapper<bank>,<br>BaseMapper新增了两个通用的自定义的查询接口：queryList和queryTotal  </bank></p></blockquote><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BankMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Bank</span>&gt;</span>{}</code></pre><pre><code class="java"><span class="comment">/**</span><span class="comment"> * 功能描述: 公共 Mapper</span><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span></span><span class="class">        <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;,</span><span class="class">        <span class="title">MySqlMapper</span>&lt;<span class="title">T</span>&gt;,</span><span class="class">        <span class="title">IdsMapper</span>&lt;<span class="title">T</span>&gt; </span>{    <span class="comment">//TODO</span>    <span class="comment">//FIXME 特别注意，该接口不能被扫描到，否则会出错</span>    <span class="function">List&lt;T&gt; <span class="title">queryList</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">queryTotal</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;}</code></pre><blockquote><ul><li>不要把BaseMapper放到同其他Mapper一起，该类不能被当做普通Mapper一样被扫描，否则会出错</li><li>extends的接口参考资料：<a href="https://www.cnblogs.com/deolin/p/8182100.html" target="_blank" rel="noopener">https://www.cnblogs.com/deolin/p/8182100.html</a>  </li></ul></blockquote><ul><li><font color="#0099ff" size="3" face="黑体">service接口</font>  </li></ul><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BankService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Bank</span>&gt;</span>{    <span class="comment">/**</span><span class="comment">     * 功能描述: 更新银行卡信息</span><span class="comment">     */</span>    <span class="function">R <span class="title">updateBank</span><span class="params">(Bank bank)</span></span>;    <span class="function">Bank <span class="title">queryObject</span><span class="params">(Long id)</span></span>;}</code></pre><blockquote><p>定义Service层基础接口Iservice<t>，其他Service接口都继承该接口  </t></p></blockquote><pre><code class="java"><span class="meta">@SuppressWarnings</span>(<span class="string">"UnusedReturnValue"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>{    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(T entity)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(List&lt;T&gt; list)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">saveBatch</span><span class="params">(List&lt;T&gt; list)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">saveNotNull</span><span class="params">(T entity)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">deleteByKey</span><span class="params">(Object key)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(String ids)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(Object[] ids)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">updateAll</span><span class="params">(T entity)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">updateNotNull</span><span class="params">(T entity)</span></span>;    <span class="function">T <span class="title">selectByKey</span><span class="params">(Object key)</span></span>;    <span class="function">List&lt;T&gt; <span class="title">selectByIds</span><span class="params">(String ids)</span></span>;    <span class="function">List&lt;T&gt; <span class="title">selectByIds</span><span class="params">(Object[] ids)</span></span>;    <span class="function">List&lt;T&gt; <span class="title">selectByExample</span><span class="params">(Object example)</span></span>;    <span class="comment">/**</span><span class="comment">     * 功能描述: 列表查询条件 需要实现这个接口</span><span class="comment">     *</span><span class="comment">     * 作者: July</span><span class="comment">     * 日期: 2018-03-22 13:31:29</span><span class="comment">     */</span>    <span class="function">List&lt;T&gt; <span class="title">queryList</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="comment">/**</span><span class="comment">     * 功能描述: 列表查询条件总数 需要实现这个接口</span><span class="comment">     *</span><span class="comment">     * 作者: July</span><span class="comment">     * 日期: 2018-03-22 13:31:51</span><span class="comment">     */</span>    <span class="function"><span class="keyword">int</span> <span class="title">queryTotal</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;}</code></pre><ul><li><font color="#0099ff" size="3" face="黑体">service实现</font>  </li></ul><pre><code class="java"><span class="meta">@Service</span><span class="meta">@Transactional</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankServiceImpl</span> <span class="keyword">extends</span> <span class="title">AbstractService</span>&lt;<span class="title">BankMapper</span>, <span class="title">Bank</span>&gt; <span class="keyword">implements</span> <span class="title">BankService</span></span>{    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> R <span class="title">updateBank</span><span class="params">(Bank bank)</span> </span>{        <span class="keyword">int</span> Result = updateNotNull(bank);        <span class="keyword">return</span> Result == <span class="number">0</span> ? R.error(<span class="string">"银行卡信息保存失败"</span>) : R.ok();    }    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> Bank <span class="title">queryObject</span><span class="params">(Long id)</span> </span>{        <span class="keyword">return</span> selectByKey(id);    }}</code></pre><blockquote><p>抽象类<strong>AbstractService</strong>基于MyBatis Mapper插件的接口实现，实现了Iservice接口  </p></blockquote><pre><code class="java"><span class="meta">@Service</span>(<span class="string">"abstractService"</span>)<span class="meta">@Transactional</span><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractService</span>&lt;<span class="title">M</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>{    <span class="meta">@Autowired</span>    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)    <span class="keyword">protected</span> M mapper;    <span class="comment">/**</span><span class="comment">     * 保存一个实体，null的属性也会保存，不会使用数据库默认值</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(T entity)</span> </span>{        <span class="keyword">return</span> mapper.insert(entity);    }    <span class="comment">/**</span><span class="comment">     * 批量插入，支持批量插入的数据库可以使用，例如MySQL,H2等，另外该接口限制实体包含`id`属性并且必须为自增列</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(List&lt;T&gt; list)</span> </span>{        <span class="keyword">return</span> mapper.insertList(list);    }    <span class="comment">/**</span><span class="comment">     * 批量插入，支持批量插入的数据库可以使用，例如MySQL,H2等，另外该接口限制实体包含`id`属性并且必须为自增列</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveBatch</span><span class="params">(List&lt;T&gt; list)</span> </span>{        <span class="keyword">return</span> mapper.insertList(list);    }    <span class="comment">/**</span><span class="comment">     * 保存一个实体，null的属性不会保存，会使用数据库默认值</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveNotNull</span><span class="params">(T entity)</span> </span>{        <span class="keyword">return</span> mapper.insertSelective(entity);    }    <span class="comment">/**</span><span class="comment">     * 根据主键字段进行删除，方法参数必须包含完整的主键属性</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByKey</span><span class="params">(Object key)</span> </span>{        <span class="keyword">return</span> mapper.deleteByPrimaryKey(key);    }    <span class="comment">/**</span><span class="comment">     * 根据主键字符串进行删除，类中只有存在一个带有<span class="doctag">@Id</span>注解的字段</span><span class="comment">     *</span><span class="comment">     * <span class="doctag">@param</span> ids 如 "1,2,3,4"</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(String ids)</span> </span>{        <span class="keyword">return</span> mapper.deleteByIds(ids);    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(Object[] ids)</span> </span>{        <span class="keyword">return</span> mapper.deleteByIds(StringUtils.join(ids, <span class="string">","</span>));    }    <span class="comment">/**</span><span class="comment">     * 根据主键更新实体全部字段，null值会被更新</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateAll</span><span class="params">(T entity)</span> </span>{        <span class="keyword">return</span> mapper.updateByPrimaryKey(entity);    }    <span class="comment">/**</span><span class="comment">     * 根据主键更新属性不为null的值</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateNotNull</span><span class="params">(T entity)</span> </span>{        <span class="keyword">return</span> mapper.updateByPrimaryKeySelective(entity);    }    <span class="comment">/**</span><span class="comment">     * 根据主键字段进行查询，方法参数必须包含完整的主键属性，查询条件使用等号</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> T <span class="title">selectByKey</span><span class="params">(Object key)</span> </span>{        <span class="keyword">return</span> mapper.selectByPrimaryKey(key);    }    <span class="comment">/**</span><span class="comment">     * 根据主键字符串进行查询，类中只有存在一个带有<span class="doctag">@Id</span>注解的字段</span><span class="comment">     *</span><span class="comment">     * <span class="doctag">@param</span> ids 如 "1,2,3,4"</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">selectByIds</span><span class="params">(String ids)</span> </span>{        <span class="keyword">return</span> mapper.selectByIds(ids);    }    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">selectByIds</span><span class="params">(Object[] ids)</span> </span>{        <span class="keyword">return</span> mapper.selectByIds(StringUtils.join(ids, <span class="string">","</span>));    }    <span class="comment">/**</span><span class="comment">     * 根据Example条件进行查询</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">selectByExample</span><span class="params">(Object example)</span> </span>{        <span class="keyword">return</span> mapper.selectByExample(example);    }    <span class="comment">/**</span><span class="comment">     * 功能描述: 列表查询条件 需要实现这个接口</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">queryList</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>{        <span class="keyword">return</span> mapper.queryList(map);    }    <span class="comment">/**</span><span class="comment">     * 功能描述: 列表查询条件总数 需要实现这个接口</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">queryTotal</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>{        <span class="keyword">return</span> mapper.queryTotal(map);    }}</code></pre><h2 id="总结">1.3. 总结</h2><p>整体引入tk.mybatis通用插件，新增基础接口<strong>BaseMapper.java</strong>、<strong>Iservice</strong>、<strong>AbstractService</strong>优化了项目结构，<br>当新增业务时，减少代码量。  </p>]]></content>
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql查询条件为空查询所有</title>
      <link href="/mysql-condition-empty-query-all.html"/>
      <url>/mysql-condition-empty-query-all.html</url>
      <content type="html"><![CDATA[<h1 id="mysql-if语法">1. mysql if语法</h1><p>公司后台框架为Spring Boot + mybatis + vue,在一段复杂的统计查询语句中没有使用mybatis，而是一段完整的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAreaOrderStatistics"</span> <span class="attr">resultType</span>=<span class="string">"com.dl98.modules.api.vo.OrderStatisticsVo"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            c1.area_id,</span><br><span class="line">            count(c1.area_id) orderNum,</span><br><span class="line">            SUM(c1.total) total</span><br><span class="line">        FROM (</span><br><span class="line">                 SELECT</span><br><span class="line">                     sgoc.order_id,</span><br><span class="line">                     sgo.area_id,</span><br><span class="line">                     sgo.create_time,</span><br><span class="line">                     sum(</span><br><span class="line">                             (sp.price - sp.cost) * sgoc.goods_count * 0.08</span><br><span class="line">                     ) AS total</span><br><span class="line">                 FROM</span><br><span class="line">                     dl_supplier_goods_order_correlation sgoc</span><br><span class="line">                     LEFT JOIN dl_supplier_parameter sp ON sgoc.parameter_id = sp.id</span><br><span class="line">                     LEFT JOIN dl_supplier_goods_order sgo ON sgoc.order_id = sgo.id</span><br><span class="line">                 WHERE</span><br><span class="line">                     sgo.create_time BETWEEN #&#123;sTime&#125; AND #&#123;eTime&#125; AND if(#&#123;id&#125; is null, 1, sgo.mill_id=#&#123;id&#125;) AND sgo.pay_status = 1</span><br><span class="line">                 GROUP BY</span><br><span class="line">                     sgoc.order_id) c1</span><br><span class="line">        GROUP BY c1.area_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Hello! World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是：if (#{id} is null, 1, sgo.mill_id = #{id})</p><p>参考资料:<a href="https://blog.csdn.net/touatou/article/details/77045740" target="_blank" rel="noopener">https://blog.csdn.net/touatou/article/details/77045740</a></p>]]></content>
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的博客创建之旅</title>
      <link href="/my-blog-start-journey.html"/>
      <url>/my-blog-start-journey.html</url>
      <content type="html"><![CDATA[<h1 id="我的博客搭建">1. 我的博客搭建</h1><h2 id="前言">1.1. 前言</h2><p>通过一年的学习，最近想搭建一个博客网站，一是可以记录自己的学习历程，二是可以总结学习知识。<br>最后最不重要的一点就是可以装B了！</p><h2 id="技术选择">1.2. 技术选择</h2><blockquote><p>hexo, github, git, hexo-admin, node.js, npm</p></blockquote><h2 id="搭建流程">1.3. 搭建流程</h2><p>  因为网上资源很多，所以只是整理资料，然后挑出重点总结。  </p><h3 id="常规">1.3.1. 常规</h3><ul><li>1、 <strong><a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">Hexo从零开始到搭建完整</a></strong>  </li><li>2、 <strong><a href="https://www.cnblogs.com/tengj/p/5352572.html" target="_blank" rel="noopener">将Hexo博客同时托管到github和coding</a></strong>  </li><li>3、 <strong><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Hexo Next主题使用</a></strong></li><li>4、 <strong><a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">Hexo常用命令</a></strong></li><li>5、 <strong><a href="https://www.cnblogs.com/liugang-vip/p/6337580.html" target="_blank" rel="noopener">markdown常用语法</a></strong>  </li></ul><h3 id="进阶">1.3.2. 进阶</h3><ul><li>1、 <strong><a href="http://kchen.cc/2016/11/12/hexo-instructions/" target="_blank" rel="noopener">基于Hexo的全自动博客构建部署系统</a></strong></li><li>2、 <strong><a href="https://www.cnblogs.com/penglei-it/p/hexo_domain_name.html" target="_blank" rel="noopener">Hexo站点域名配置</a></strong>  </li><li>3、 <strong><a href="https://blog.csdn.net/Monkey_LZL/article/details/60870891" target="_blank" rel="noopener">Hexo博客多终端同步问题</a></strong></li><li>4、 <strong><a href="https://www.jianshu.com/p/5888bd91d070" target="_blank" rel="noopener">畅言评论系统</a></strong>  </li><li>5、 <strong><a href="https://www.jianshu.com/p/68e727dda16d" target="_blank" rel="noopener">Hexo-admin本地编辑上传博客</a></strong>  </li><li>6、 <strong><a href="http://lxj-life.com/2017/08/08/Hexo%E6%8F%92%E4%BB%B6-admin/" target="_blank" rel="noopener">Hexo-admin 哈希值密码创建</a></strong>  </li><li>7、 <strong><a href="https://blog.csdn.net/fjinhao/article/details/77096951" target="_blank" rel="noopener">将Hexo部署到阿里云主机VPS</a></strong>  </li><li>8、 <strong><a href="https://www.jianshu.com/p/7cbd50058ea3" target="_blank" rel="noopener">博客极简图床+七牛云</a></strong>  </li><li>9、 <strong><a href="https://www.cnblogs.com/tengj/p/5357879.html" target="_blank" rel="noopener">解决谷歌百度收录问题</a></strong>   </li></ul><h3 id="优化">1.3.3. 优化</h3><ul><li>1、 <strong><a href="https://blog.csdn.net/sunshine940326/article/details/70936988" target="_blank" rel="noopener">Hexo高阶教程各种优化</a></strong>  </li><li>2、 <strong><a href="https://www.jianshu.com/p/3884e5cb63e5" target="_blank" rel="noopener">Hexo定制&amp;优化</a></strong></li><li>3、 <strong><a href="http://r12f.com/posts/adding-index-to-your-headings-with-hexo-heading-index/" target="_blank" rel="noopener">为Hexo博客标题自动添加序号：hexo-heading-index</a></strong>  </li><li>4、 <strong><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></strong>  </li></ul><h2 id="操作流程">1.4. 操作流程</h2><ul><li>1 <a href="https://github.com/Hunterfish/Hunterfish.github.io" target="_blank" rel="noopener">我的博客项目</a>分支情况：  <blockquote><p>master分支：部署博客（存放部署后静态页面文件）的分支<br>hexo分支：我们可以clone到其他电脑或其他系统的hexo源文件的分支，而且我们已经将它设置成默认仓库</p></blockquote></li><li><p>2 在新的电脑端clone远程仓库hexo分支到本地</p><blockquote><p>git clone -b hexo <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yourname/yourname.github.io.git  </p></blockquote></li><li><p>3 初始化并新建博客部署   </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g     <span class="comment">// 全局安装hexo</span></span><br><span class="line">cd yourname.github.io</span><br><span class="line">npm install</span><br><span class="line">hexo <span class="keyword">new</span> post <span class="string">"new blog name"</span> <span class="comment">// 新建一个.md文件，你可以编辑博客内容</span></span><br><span class="line">git add source</span><br><span class="line">git commit -m <span class="string">"XX"</span></span><br><span class="line">git push origin hexo</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp build  <span class="comment">// gulp插件，优化静态文件</span></span><br><span class="line">hexo d      <span class="comment">// //push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master</span></span><br></pre></td></tr></table></figure><h2 id="遇到问题">1.5. 遇到问题</h2><ul><li>1、 <strong>hexo s -d 启动后，但是访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>一直无法访问</strong>  </li></ul><blockquote><p>可能是4000端口号被占用，hexo s -d -p 5000 更换端口</p></blockquote>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
