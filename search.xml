<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>初识Spring Cloud微服务</title>
      <link href="/springcloud-microservices-learning-action.html"/>
      <url>/springcloud-microservices-learning-action.html</url>
      <content type="html"><![CDATA[<h1 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h1><p>Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。</p><p>Spring Cloud包含了多个子项目（针对分布式系统中涉及的多个不同开源产品），比如：Spring Cloud Config、Spring Cloud Netflix、Spring Cloud0 CloudFoundry、Spring Cloud AWS、Spring Cloud Security、Spring Cloud Commons、Spring Cloud Zookeeper、Spring Cloud CLI等项目  </p><h1 id="微服务架构简介"><a href="#微服务架构简介" class="headerlink" title="微服务架构简介"></a>微服务架构简介</h1><blockquote><p>微服务是一种架构风格，她不是某种组件或某种框架；比如我们熟悉的RESTful，也是一种架构风格；<br>架构风格即没有强制性，没有绝对标准的答案，是一种建议，可以有不同细节的实现。  </p></blockquote><h2 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a><a href="https://martinfowler.com/articles/microservices.html#footnote-etymology" target="_blank" rel="noopener">官方定义</a></h2><blockquote><p>In short, the microservice architectural style is an approach to developing a single application as <strong>a suite of small services</strong>,<br>each <strong>running in its own process</strong> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <strong>built<br>around business capabilities</strong> and <strong>independently deployable</strong> by fully automated deployment machinery. There is <strong>a bare minimum of centralized<br>management of these servicesJ</strong>, which may be written in different programming languages and use different data storage technologies.  </p></blockquote><h3 id="官方定义重点"><a href="#官方定义重点" class="headerlink" title="官方定义重点"></a>官方定义重点</h3><ul><li><p>一系列微小的服务共同组成  </p><blockquote><p>对应传统的单体应用：一个服务  </p></blockquote></li><li><p>跑在自己的进程里  </p><blockquote><p>任何一个微服务，都有自己的独立进程，互不干扰  </p></blockquote></li><li><p>每个服务为独立的业务开发  </p><blockquote><p>微服务要围绕业务围绕领域模型建造：服务拆分  </p></blockquote></li><li><p>独立部署  </p></li><li><p>分布式的管理  </p><blockquote><p>对应传统的集中式管理  </p></blockquote></li></ul><h2 id="传统架构"><a href="#传统架构" class="headerlink" title="传统架构"></a>传统架构</h2><h3 id="点餐系统涉及的架构形态"><a href="#点餐系统涉及的架构形态" class="headerlink" title="点餐系统涉及的架构形态"></a>点餐系统涉及的架构形态</h3><p>点击回顾之前的<a href="https://www.ddebug.cn/springboot-wechat-ordering-project-summary.html#more">SpringBoot微信点餐系统</a>  </p><ul><li><p>单体架构  </p><blockquote><p>一个工程构建之后是一个war包  </p></blockquote></li><li><p>基于Ajax的前后端分离  </p></li><li><p>分布式（水平扩展 &amp; 服务拆分）  </p></li></ul><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><h4 id="以点餐系统为例"><a href="#以点餐系统为例" class="headerlink" title="以点餐系统为例"></a>以点餐系统为例</h4><p>下图显示点餐系统卖家端业务:  </p><ol><li><p>传统的CMS后台管理系统  </p><blockquote><p>包含了商品、订单、类目三种服务，这三种服务对应了三种业务逻辑代码，可以把它看成整体就是单体架构的应用；  </p></blockquote></li><li><p>所有应用打包成一个war/jar包，整体上没有外部依赖  </p><blockquote><p>这里外部依赖不是指pom.xml文件里的各种dependency，意思是订单依赖商品服务，但此时是一个整体，整合到一个war包里了  </p></blockquote></li><li><p>部署在一个Web容器里  </p><blockquote><p>比如Tomcat, 包含了Dao层，Service层，UI等所有逻辑；<br>当然不一定是Tomcat，我们使用的Spring Boot实现的内部默认实现的Tomcat容器也可以改成Jetty等其他web容器, 这里暂且不表  </p></blockquote></li><li><p>共用一个DB数据库</p></li></ol><p><img src="1" alt=""></p><h4 id="单体架构优点"><a href="#单体架构优点" class="headerlink" title="单体架构优点"></a>单体架构优点</h4><ul><li><p>容易测试  </p><blockquote><p>在本地就可以启动完整的项目，不需要外部依赖  </p></blockquote></li><li><p>容易部署  </p><blockquote><p>直接打成一个完整的War包，放到Tomcat等web容器中就可以运行  </p></blockquote></li></ul><h4 id="单体架构缺点"><a href="#单体架构缺点" class="headerlink" title="单体架构缺点"></a>单体架构缺点</h4><ul><li><p>开发效率低  </p><blockquote><p>所有开发人员在一个项目里改代码，提交代码时可能等待或造成代码冲突  </p></blockquote></li><li><p>代码维护难  </p></li><li><p>部署不灵活  </p><blockquote><p>跟容易部署是两个概念，是指部署时间比较长，有任何代码的小修改必须重新部署整个项目  </p></blockquote></li><li><p>稳定性不高  </p><blockquote><p>所有业务代码写到一个项目，一个微不足道的小问题可能让整个系统挂掉，牵一发而动全身！  </p></blockquote></li><li><p>扩展性不够  </p><blockquote><p>无法满足高并发情况下的业务需求；<br>比如买家们都只看不买的情况比较多，商品服务应对的流量大一些，订单服务应对的流量相反就小一些，<br>此时单体架构很难做到，因为商品订单服务都在一个整体中，运行也在一个war包里运行；<br>而微服务很容易做到，因为商品和订单服务独立开来，可以将商品服务部署10台服务器，订单服务部署5台服务器。  </p></blockquote></li></ul><h3 id="基于Ajax的前后端分离"><a href="#基于Ajax的前后端分离" class="headerlink" title="基于Ajax的前后端分离"></a><a href="https://blog.csdn.net/finish_dream/article/details/52231469" target="_blank" rel="noopener">基于Ajax的前后端分离</a></h3><p>这种开发模式可以称为SPA(Single Page Application 单页面应用)<br>参考<a href="https://github.com/lifesinger/blog/issues/184" target="_blank" rel="noopener">Web研发模式演变</a><br><img src="2" alt="">  </p><h4 id="点餐服务的前后端分离"><a href="#点餐服务的前后端分离" class="headerlink" title="点餐服务的前后端分离"></a>点餐服务的前后端分离</h4><p>下图显示的是买家端： </p><ol><li>SpringBoot后端服务可以多个  <blockquote><p>因为项目里我们使用Redis实现了Session共享，从而使springBoot服务支持水平扩展（集群部署）<br><img src="3" alt="">  </p></blockquote></li></ol><h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><blockquote><p>旨在支持应用程序和服务的开发，可以利用物理架构由<strong>多个自治的处理元素</strong>，<strong>不共享主内存</strong>，但<strong>通过网络发送消息合作</strong>。  </p></blockquote><p>需要理解：微服务必然是分布式的！  </p><ul><li><p>多个自治的处理元素  </p><blockquote><p>即多节点，分布式系统是多节点的，集群也是多节点的<br>分布式：一个厨房有炒菜和洗菜，互不干扰。<br>集群：一个厨房炒菜有5个人  </p></blockquote></li><li><p>通过网络发送消息合作  </p><blockquote><p>比如通过http、RESTful接口、RPC等，放到微服务中同样适用； </p></blockquote></li></ul><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2>]]></content>
      
      <categories>
          
          <category> Spring Cloud微服务实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot微信点餐项目本地运行</title>
      <link href="/springboot-wechat-ordering-local-running.html"/>
      <url>/springboot-wechat-ordering-local-running.html</url>
      <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>本项目我使用的是阿里云服务器，没有使用本地虚拟机，不过基本是一样的  </p><h2 id="阿里云服务器基本信息"><a href="#阿里云服务器基本信息" class="headerlink" title="阿里云服务器基本信息"></a>阿里云服务器基本信息</h2><ul><li>CPU： 1核  </li><li>内存： 2 GB  </li><li>实例类型： I/O优化  </li><li>操作系统： CentOS 7.4 64位  </li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><a href="https://gitee.com/ddebug/sell.git" target="_blank" rel="noopener">后端项目地址</a>  </li><li><a href="https://gitee.com/ddebug/sell_buyer_ui" target="_blank" rel="noopener">买家端前端地址</a>  </li><li><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">微信公众测试账号</a>  </li><li><a href="https://www.ddebug.cn/aliyun-install-redis-summary.html">阿里云安装redis</a>  </li><li><a href="https://www.ddebug.cn/aliyun-install-mysql-summary.html">阿里云安装mysql</a></li><li><a href="https://www.ddebug.cn/aliyun-install-nexus-summary.html">阿里云搭建私服</a></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>IDEA <a href="http://idea.lanyus.com/" target="_blank" rel="noopener">激活地址</a>  </li><li>Xshell  </li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html" target="_blank" rel="noopener">微信Web开发者工具</a>    </li><li><a href="http://ngrok.ciqiuwl.cn/" target="_blank" rel="noopener">小米球ngrok</a>  <blockquote><p>主要是免费，可以固定域名  </p></blockquote></li></ul><h1 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h1><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><h3 id="application-dev-yml"><a href="#application-dev-yml" class="headerlink" title="application.dev.yml"></a>application.dev.yml</h3><ul><li>mysql  </li><li>redis  </li><li>wechat公众平台测试账号ID和秘钥  </li><li>支付商户号和开放平台需要企业资质，暂时不测试  </li><li>templatedId: 微信推送消息模板ID  </li><li>projectUrl: 设置自己内网穿透的域名  </li></ul><h3 id="nginx-cnf配置"><a href="#nginx-cnf配置" class="headerlink" title="nginx.cnf配置"></a>nginx.cnf配置</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/12733950.jpg" alt=""></p><ul><li>Server.name  sell.ddebug.cn  <blockquote><p>我这里由于是阿里云服务器，使用了已经备案过的域名添加解析;<br>如果本地虚拟机，可以自定义，同时修改主机hosts文件添加解析 </p></blockquote></li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/8826006.jpg" alt=""></p><ul><li><p>proxy_pass  <a href="http://hunterfish.ngrok.xiaomiqiu.cn" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn</a>  </p><blockquote><p>本地后端项目启动后，用nginx代理床头内网生成的域名，是阿里云或虚拟机中的前端项目通过nginx代理调用后端本地启动的接口  </p></blockquote></li><li><p>root  /opt/data/wwwroot/sell  </p><blockquote><p>买家端前端项目打包后存放目录  </p></blockquote></li></ul><h3 id="微信测试账号配置"><a href="#微信测试账号配置" class="headerlink" title="微信测试账号配置"></a>微信测试账号配置</h3><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/21701607.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/3970488.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/80793861.jpg" alt=""></p><h2 id="买家端前端测试"><a href="#买家端前端测试" class="headerlink" title="买家端前端测试"></a>买家端前端测试</h2><h3 id="运行测试-有微信测试账号"><a href="#运行测试-有微信测试账号" class="headerlink" title="运行测试(有微信测试账号)"></a>运行测试(有微信测试账号)</h3><ul><li><p>启动后端项目  </p></li><li><p>微信web开发者工具中输入：<a href="http://sell.ddebug.cn" target="_blank" rel="noopener">http://sell.ddebug.cn</a>  </p></li><li><p>跳转到微信授权<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/60890277.jpg" alt=""></p></li><li><p>同时后台打印了微信授权信息openid<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/74526378.jpg" alt=""></p></li><li><p>授权成功，跳转页面<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/23484113.jpg" alt=""></p></li><li><p>同时生成Cookie<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/27750359.jpg" alt=""></p></li><li><p>因为支付商户号需要企业资质，所以没有测试  </p></li></ul><h3 id="运行测试-没有微信测试账号"><a href="#运行测试-没有微信测试账号" class="headerlink" title="运行测试(没有微信测试账号)"></a>运行测试(没有微信测试账号)</h3><ul><li>启动后端项目  </li><li>浏览器中输入并访问： <a href="http://sell.ddebug.cn/#/order" target="_blank" rel="noopener">http://sell.ddebug.cn/#/order</a>  </li><li>浏览器console中手动设置cookie(可以自定义): <strong>document.cookie=”openid=abc123”</strong><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/75375552.jpg" alt=""></li><li>再访问： <a href="http://sell.ddebug.cn" target="_blank" rel="noopener">http://sell.ddebug.cn</a><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/75947108.jpg" alt=""></li></ul><h2 id="卖家端前端测试"><a href="#卖家端前端测试" class="headerlink" title="卖家端前端测试"></a>卖家端前端测试</h2><blockquote><p>卖家端前端就是卖家管理商品订单分类的后台中心，使用微信开放平台账号的微信扫一扫登陆功能  </p></blockquote><blockquote><p>由于微信开放平台需要企业资质才能申请，所以这里只是自定义设置openid来模拟登陆，实际上代码已经完善，如果你有开放账号，直接修改application.xml  </p></blockquote><ul><li>浏览器访问： <a href="http://hunterfish.ngrok.xiaomiqiu.cn/sell/" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/sell/</a>  </li><li><p>console设置cookie(可以自定义): <strong>document.cookie=”token=abc123”</strong><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/19972825.jpg" alt=""></p></li><li><p>浏览器访问： <a href="http://hunterfish.ngrok.xiaomiqiu.cn/sell/seller/order/list" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/sell/seller/order/list</a><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/53997991.jpg" alt=""></p></li></ul>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot微信点餐项目学习总结</title>
      <link href="/springboot-wechat-ordering-project-summary.html"/>
      <url>/springboot-wechat-ordering-project-summary.html</url>
      <content type="html"><![CDATA[<h1 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h1><h2 id="卖家端"><a href="#卖家端" class="headerlink" title="卖家端"></a>卖家端</h2><p>后台基于Spring Boot 前端基于freemarker模板引擎的卖家商品订单管理后台  </p><h2 id="买家端"><a href="#买家端" class="headerlink" title="买家端"></a>买家端</h2><p>基于Vue.js构建的前后端分离的买家订餐平台  </p><h1 id="博客目录"><a href="#博客目录" class="headerlink" title="博客目录"></a>博客目录</h1><p>* </p>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决阿里云服务器Linux异常文件下载</title>
      <link href="/aliyun-solve-exception-file-download.html"/>
      <url>/aliyun-solve-exception-file-download.html</url>
      <content type="html"><![CDATA[<h1 id="阿里云服务器参数"><a href="#阿里云服务器参数" class="headerlink" title="阿里云服务器参数"></a>阿里云服务器参数</h1><ul><li>CPU： 1核 </li><li>内存： 2 GB </li><li>实例类型： I/O优化 </li><li>操作系统： CentOS 7.4 64位  </li></ul><h1 id="异常情况"><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h1><ul><li>进程异常行为-Linux异常文件下载  </li><li>谷歌后，应该是通过redis获取了root权限，上传了病毒  </li><li>会大量占用cpu资源，造成服务器卡顿  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-11/47499542.jpg" alt=""> </p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><blockquote><p>参考<a href="https://blog.csdn.net/yucdsn/article/details/79847869" target="_blank" rel="noopener">博客1</a>, <a href="https://www.cnblogs.com/killall007/p/8877294.html" target="_blank" rel="noopener">博客2</a>  </p></blockquote>]]></content>
      
      <categories>
          
          <category> 阿里云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 阿里云服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot微信点餐前端后端项目运行部署到阿里云服务器</title>
      <link href="/springboot-wechat-ordering-deploy-aliyun.html"/>
      <url>/springboot-wechat-ordering-deploy-aliyun.html</url>
      <content type="html"><![CDATA[<h1 id="后端运行部署"><a href="#后端运行部署" class="headerlink" title="后端运行部署"></a>后端运行部署</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><blockquote><p>Spring Boot项目  </p></blockquote><ul><li>点击<a href="https://gitee.com/ddebug/sell.git" target="_blank" rel="noopener">项目地址</a>下载项目到本地  </li></ul><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><blockquote><p>下面的几种方式其实现在都已经过时了，以后总结docer部署项目的相关知识  </p></blockquote><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><blockquote><p>打好包后，放到tomcat某个目录中，启动tomcat </p></blockquote><h3 id="java-jar"><a href="#java-jar" class="headerlink" title="java -jar"></a>java -jar</h3><blockquote><p>推荐使用此java框架方法  </p></blockquote><ol><li>进入项目主目录  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><ol start="2"><li>target下jar包<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/70520653.jpg" alt=""><blockquote><p>可以更改jar包名字, 修改pom.xml文件，然后重新执行上面打包命令：  </p></blockquote></li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/74412635.jpg" alt=""></p><ol start="3"><li><p>copy到服务器  </p><blockquote><p>可以参考博客<a href="https://www.ddebug.cn/2018/04/29/%E5%B8%B8%E7%94%A8CentOS7%E5%91%BD%E4%BB%A4/">常用CentOS7命令</a>  </p></blockquote></li><li><p>运行  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sell.jar</span><br></pre></td></tr></table></figure></li><li><p>指定端口和运行环境  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Dserver.port=8080 -Dspring.profiles.active=prod sell.jar</span><br></pre></td></tr></table></figure></li><li><p>后台运行  </p></li></ol><blockquote><p>启动后，会在sell.jar同目录下生成日志文件  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar sell.jar &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"># 停止进程</span><br><span class="line">kill -9 进程数</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/50729385.jpg" alt=""></p><ol start="7"><li>脚本运行  </li></ol><blockquote><p>新建文件start.sh  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">nohup java -jar sell.jar &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><blockquote><p>启动：bash start.sh  </p></blockquote><h3 id="centos7下可以新建服务service启动"><a href="#centos7下可以新建服务service启动" class="headerlink" title="centos7下可以新建服务service启动"></a>centos7下可以新建服务service启动</h3><ol><li>新建sell.service  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/systemd/system</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/83976316.jpg" alt=""></p><ol start="2"><li>vim sell.service<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/56882885.jpg" alt=""></li><li>systemctl daemon-reload: 修改文件后，重启配置</li><li>systemctl start sell：启动服务  </li><li>systemctl stop sell: 停止服务  </li><li>systemctl enable sell: 开机启动  </li><li>systemctl disable sell: 停止开机启动  </li></ol><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><ol><li>访问项目接口，成功显示数据   </li></ol><blockquote><p>URL：<a href="http://47.98.***.**:8080/sell/buyer/product/list" target="_blank" rel="noopener">http://47.98.***.**:8080/sell/buyer/product/list</a>  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/87579972.jpg" alt=""></p><h1 id="前端运行部署"><a href="#前端运行部署" class="headerlink" title="前端运行部署"></a>前端运行部署</h1><h2 id="项目介绍-1"><a href="#项目介绍-1" class="headerlink" title="项目介绍"></a>项目介绍</h2><blockquote><p>Spring Boot微信点餐项目的前端是参考慕课网视频<a href="https://coding.imooc.com/class/74.html" target="_blank" rel="noopener">vue.js高仿饿了么外卖App</a>,<br>我抽取了服务器中前端项目上传到自己的码云上，并修改了部分自己后端项目的配置。  </p></blockquote><ol><li>搭建环境参考博客[]  </li><li>点击<a href="https://gitee.com/ddebug/sell_buyer_ui" target="_blank" rel="noopener">项目地址</a>下载项目到本地  </li></ol><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><blockquote><p>本地运行  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">## 若上述不行则采取下面命令</span><br><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install</span><br><span class="line"></span><br><span class="line"># 本地开发 开启服务</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="项目部署-1"><a href="#项目部署-1" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="构建静态文件"><a href="#构建静态文件" class="headerlink" title="构建静态文件"></a>构建静态文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 构建生成环境</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><blockquote><p>生成dist目录  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/65663777.jpg" alt=""></p><h3 id="上传到阿里云服务器"><a href="#上传到阿里云服务器" class="headerlink" title="上传到阿里云服务器"></a>上传到阿里云服务器</h3><ol><li>参考<a href="https://blog.csdn.net/sherry_chan/article/details/79055211" target="_blank" rel="noopener">如何部署vue前端项目到阿里云服务器上</a>  </li><li>参考<a href="https://blog.csdn.net/qq_26026975/article/details/75331779" target="_blank" rel="noopener">nginx+vue.js实现前后端分离</a>  </li><li>copy上节生成的dist目录下的内容上传到云服务指定位置  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/83119425.jpg" alt=""></p><ol start="4"><li>修改nginx配置   </li></ol><blockquote><p>修改nginx配置 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/35267061.jpg" alt=""></p><blockquote><p>由于我用的是阿里云服务器，配置已备案二级域名，并在阿里云控制台配置解析  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/14153152.jpg" alt=""></p><blockquote><p>如果是本地虚拟机，可以修改本地hosts文件完成映射即可<br>修改后重启nginx: <strong>nginx -s reload</strong>  </p></blockquote>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云服务器 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的idea使用总结</title>
      <link href="/my-idea-summary.html"/>
      <url>/my-idea-summary.html</url>
      <content type="html"><![CDATA[<h1 id="序列化插件"><a href="#序列化插件" class="headerlink" title="序列化插件"></a>序列化插件</h1><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ul><li>Ctrl+Shift+s：生成序列化ID <strong>serialVersionUID</strong>  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/30770183.jpg" alt="图片"></p><h2 id="idea插件安装"><a href="#idea插件安装" class="headerlink" title="idea插件安装"></a>idea插件安装</h2><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/97346624.jpg" alt="图片"></p><h2 id="插件设置快捷键"><a href="#插件设置快捷键" class="headerlink" title="插件设置快捷键"></a>插件设置快捷键</h2><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/66397016.jpg" alt="图片"></p><h1 id="IDEA终端Terminal"><a href="#IDEA终端Terminal" class="headerlink" title="IDEA终端Terminal"></a>IDEA终端Terminal</h1><p>参考<a href="https://segmentfault.com/a/1190000012717033" target="_blank" rel="noopener">修改 Idea 终端 Terminal 为 GitBash 或 Cmder</a>; 修改为gitbash比较好，Cmder存在中文乱码问题  </p>]]></content>
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>了解并使用Redis缓存</title>
      <link href="/use-redis-cache.html"/>
      <url>/use-redis-cache.html</url>
      <content type="html"><![CDATA[<h1 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><blockquote><p>大流量场景环境下，有效提高数据读取速度；  </p></blockquote><ul><li>命中  <blockquote><p>用户从cache中获取数据，取到后返回  </p></blockquote></li><li>失效  <blockquote><p>缓存时间到时  </p></blockquote></li><li>更新  <blockquote><p>应用程序把数据存到数据库中，再放到缓存中  </p></blockquote></li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Spring Boot微信点餐项目  </li><li>项目启动参考<xxxxxxxxxxxxxx>  </xxxxxxxxxxxxxx></li></ul><h2 id="学习点"><a href="#学习点" class="headerlink" title="学习点"></a>学习点</h2><ol><li>@EnableCaching、@Cacheable、@CachePut、@CacheEvict  </li><li>相关对象实现序列化  </li><li>使用缓存要结合业务场景，避免滥用  </li></ol><h1 id="如何优雅的使用缓存"><a href="#如何优雅的使用缓存" class="headerlink" title="如何优雅的使用缓存"></a>如何优雅的使用缓存</h1><h2 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h2><h3 id="代码内容"><a href="#代码内容" class="headerlink" title="代码内容"></a>代码内容</h3><blockquote><p>实体类和页面展示类需要实现序列化，可参考<a href="https://www.ddebug.cn/2018/05/09/我的idea使用总结/">我的idea使用总结</a>  </p></blockquote><ul><li>SellApplication.java   </li></ul><blockquote><p>项目启动类添加注解 <strong>@EnableCaching</strong>  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SellApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BuyerProductController.java  </li></ul><blockquote><p>在商品列表接口上添加注解 <strong>@Cacheable</strong>  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"product"</span>, key = <span class="string">"123"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 查询所有上架的商品</span></span><br><span class="line">        List&lt;ProductInfo&gt; productInfoList = productService.findUpAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 查询类目（一次性查询）</span></span><br><span class="line">        <span class="comment">// 传统方法</span></span><br><span class="line"><span class="comment">//        List&lt;Integer&gt; categoryTypeList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        for (ProductInfo productInfo : productInfoList) &#123;</span></span><br><span class="line"><span class="comment">//            categoryTypeList.add(productInfo.getCategoryType());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 精简方法（Java8，lambda）</span></span><br><span class="line">        List&lt;Integer&gt; categoryTypeList = productInfoList.stream()</span><br><span class="line">                .map(e -&gt; e.getCategoryType())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        List&lt;ProductCategory&gt; productCategoryList = categoryService.findByCategoryTypeIn(categoryTypeList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 数据拼装</span></span><br><span class="line">        List&lt;ProductVO&gt; productVOList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ProductCategory productCategory : productCategoryList) &#123;</span><br><span class="line">            ProductVO productVO = <span class="keyword">new</span> ProductVO();</span><br><span class="line">            productVO.setCategoryType(productCategory.getCategoryType());</span><br><span class="line">            productVO.setCategoryName(productCategory.getCategoryName());</span><br><span class="line"></span><br><span class="line">            List&lt;ProductInfoVO&gt; productInfoVOList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (ProductInfo productInfo : productInfoList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (productInfo.getCategoryType().equals(productCategory.getCategoryType())) &#123;</span><br><span class="line">                    ProductInfoVO productInfoVO = <span class="keyword">new</span> ProductInfoVO();</span><br><span class="line">                    BeanUtils.copyProperties(productInfo, productInfoVO);</span><br><span class="line">                    productInfoVOList.add(productInfoVO);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            productVO.setProductInfoVOList(productInfoVOList);</span><br><span class="line">            productVOList.add(productVO);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultVOUtil.success(productVOList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h3><ul><li>启动项目  </li></ul><blockquote><p>在controller接口中打断点，访问：<br><a href="http://hunterfish.ngrok.xiaomiqiu.cn/sell/buyer/product/list" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/sell/buyer/product/list</a>    </p></blockquote><blockquote><p>访问后，会在断点处停止；    </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/11466847.jpg" alt=""></p><ul><li>再次访问上面链接  </li></ul><blockquote><p>发现不会经过断点，测试已经从redis缓存中获取数据了  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/66300248.jpg" alt=""></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>当我们修改商品数据保存到数据库后，再次访问，发现redis缓存数据没有变化  </p></blockquote><h2 id="缓存内容更新时"><a href="#缓存内容更新时" class="headerlink" title="缓存内容更新时"></a>缓存内容更新时</h2><blockquote><p>当我们查询数据已经更新（数据库），同时也要<strong>更新缓存数据</strong>  </p></blockquote><ul><li>SellerProductController.java  </li></ul><blockquote><p>保存/更新接口：save()添加注解 <strong>@CachePut</strong> 或者 <strong>@CacheEvict</strong>  </p></blockquote><blockquote><p>因为此处更新数据的接口缓存的是<strong>ModelAndView</strong>，并不是查询接口的ResultVO，所以此处使用<strong>@CacheEvict</strong>删除缓存，在查询接口时重新生成缓存，而不是更新。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="comment">// @CachePut(cacheNames = "product", key = "123")  // 更新缓存</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"product"</span>, key= <span class="string">"123"</span>) <span class="comment">// 删除缓存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save</span><span class="params">(@Valid ProductForm form,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BindingResult bindingResult,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            map.put(<span class="string">"msg"</span>, bindingResult.getFieldError().getDefaultMessage());</span><br><span class="line">            map.put(<span class="string">"url"</span>, <span class="string">"/sell/seller/product/index"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"common/error"</span>, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ProductInfo productInfo = <span class="keyword">new</span> ProductInfo();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果productId为空, 说明是新增</span></span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(form.getProductId())) &#123;</span><br><span class="line">                productInfo = productService.findOne(form.getProductId());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                form.setProductId(KeyUtil.genUniqueKey());</span><br><span class="line">            &#125;</span><br><span class="line">            BeanUtils.copyProperties(form, productInfo);</span><br><span class="line">            productService.save(productInfo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SellException e) &#123;</span><br><span class="line">            map.put(<span class="string">"msg"</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">"url"</span>, <span class="string">"/sell/seller/product/index"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"common/error"</span>, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"url"</span>, <span class="string">"/sell/seller/product/list"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"common/success"</span>, map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="使用-CacheConfig"><a href="#使用-CacheConfig" class="headerlink" title="使用@CacheConfig"></a>使用@CacheConfig</h2><blockquote><p>如果我们就是想更新，而不是删除缓存，我们可以在Service层使用注解  </p></blockquote><blockquote><p>@CacheConfig、@Cacheable、@CachePut  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/99533631.jpg" alt=""></p><h2 id="使用condition、unless"><a href="#使用condition、unless" class="headerlink" title="使用condition、unless"></a>使用condition、unless</h2><ol><li><p><strong>key=”#sellerId”</strong>  </p><blockquote><p><a href="https://blog.csdn.net/ya_1249463314/article/details/68484422" target="_blank" rel="noopener">spel表达式</a>，获取接口参数的值  </p></blockquote></li><li><p><strong>condition=”#sellerId.length() &gt; 3”</strong>  </p><blockquote><p>判断条件，当请求参数sellerId的长度大于3时，才缓存返回结果ResultVO  </p></blockquote></li><li><p><strong>unless=”#result.getCode() != 0”</strong>  </p><blockquote><p>unless是”如果不”的意思,即当返回结果ResultVO的code为0时，执行缓存  </p></blockquote></li><li><p>测试URL  </p><blockquote><p><a href="http://127.0.0.1:8080/sell/buyer/product/list?sellerId=123457" target="_blank" rel="noopener">http://127.0.0.1:8080/sell/buyer/product/list?sellerId=123457</a>  </p></blockquote></li></ol>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>秒杀活动与分布式锁</title>
      <link href="/seconds-kill-distributed-lock.html"/>
      <url>/seconds-kill-distributed-lock.html</url>
      <content type="html"><![CDATA[<h1 id="分布式锁应用"><a href="#分布式锁应用" class="headerlink" title="分布式锁应用"></a>分布式锁应用</h1><h2 id="压测工具模拟并发"><a href="#压测工具模拟并发" class="headerlink" title="压测工具模拟并发"></a>压测工具模拟并发</h2><blockquote><p>分布式锁应用在高并发、大流量场景中，之前微信点餐项目中使用的单元测试、postman都无法模拟这种情形，    </p></blockquote><blockquote><p>所以这里使用压测工具来模拟高并发请求。  </p></blockquote><ul><li>压测工具<a href="https://www.apachehaus.com/cgi-bin/download.plx" target="_blank" rel="noopener">Apache ab</a>  </li></ul><blockquote><p>安装和使用参考：<a href="https://www.cnblogs.com/lishuyi/p/5808661.html" target="_blank" rel="noopener">Apache ab并发负载压力测试</a>  </p></blockquote><blockquote><p><a href="https://www.cnblogs.com/billyang/p/apache-ab.html" target="_blank" rel="noopener">ab压测工具Windows配置使用说明</a>  </p></blockquote><ul><li>ab 常用命令  </li></ul><blockquote><p>模拟100个并发发送500个请求：相当于100个人同时访问500次该网站  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 500 -c 100 http://www.baidu.com/</span><br></pre></td></tr></table></figure><blockquote><p>连续60s内发送100个请求  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -t 60 -c 100 http://www.baidu.com/</span><br></pre></td></tr></table></figure><h2 id="常规流程"><a href="#常规流程" class="headerlink" title="常规流程"></a>常规流程</h2><h3 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h3><ul><li>service层:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SecKillService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">querySecKillProductInfo</span><span class="params">(String productId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀活动：下单，减库存，结束活动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">orderProductMockDiffUser</span><span class="params">(String productId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKillServiceImpl</span> <span class="keyword">implements</span> <span class="title">SecKillService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 国庆活动，皮蛋粥特价，限量100000份 */</span></span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, Integer&gt; products;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, Integer&gt; stock;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, String&gt; orders;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">/** 模拟多个表：商品信息表，库存表，秒杀成功订单表 */</span></span><br><span class="line">        products = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        stock = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        orders = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        products.put(<span class="string">"123456"</span>, <span class="number">100000</span>); <span class="comment">// 商品Id, 商品库存</span></span><br><span class="line">        stock.put(<span class="string">"123456"</span>, <span class="number">10000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">queryMap</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"国庆活动，皮蛋粥特价，限量份"</span></span><br><span class="line">                + products.get(productId)</span><br><span class="line">                + <span class="string">" 还剩："</span> + stock.get(productId) + <span class="string">"份"</span></span><br><span class="line">                + <span class="string">" 该商品成功下单用户数目："</span></span><br><span class="line">                + orders.size() + <span class="string">" 人"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">querySecKillProductInfo</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.queryMap(productId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderProductMockDiffUser</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 查询该商品库存，为0则结束活动</span></span><br><span class="line">        <span class="keyword">int</span> stockNum = stock.get(productId);</span><br><span class="line">        <span class="keyword">if</span> (stockNum == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(<span class="number">100</span>, <span class="string">"活动结束"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 下单(模拟不同用户openid不同)</span></span><br><span class="line">            orders.put(KeyUtil.genUniqueKey(), productId);</span><br><span class="line">            <span class="comment">// 3. 减库存</span></span><br><span class="line">            stockNum = stockNum - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            stock.put(productId, stockNum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller层：  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 测试秒杀：压测，分布式锁</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/9 0009 10:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/skill"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKillController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SecKillService secKillService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询秒杀活动特价商品的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query/&#123;productId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">(@PathVariable String productId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> secKillService.querySecKillProductInfo(productId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀，没有抢到提示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/order/&#123;productId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">skill</span><span class="params">(@PathVariable String productId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"@skill request, productId:"</span> + productId);</span><br><span class="line">        secKillService.orderProductMockDiffUser(productId);</span><br><span class="line">        <span class="keyword">return</span> secKillService.querySecKillProductInfo(productId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>启动项目  </li><li>访问链接：查询订单信息  </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/sell/skill/query/123456</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/38816287.jpg" alt=""></p><blockquote><p>用户下单（刷新一下，就是请求一次）    </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/sell/skill/order/123456</span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/42446295.jpg" alt=""></p><ul><li>ab压测测试：模拟100并发发送500次请求  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/30715844.jpg" alt=""></p><ul><li>压测结果  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/72923430.jpg" alt="">  </p><blockquote><p>可以看到，出现了超卖问题  </p></blockquote><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><blockquote><p>从代码上来看，因为我们的数据是放在map中，类似于数据存在内存中（redis），而不是从数据库中，这样查询速度快。  </p></blockquote><blockquote><p>我们可以在核心代码【SecKillServiceImpl.java】上加上关键字<strong>synchronized</strong>  </p></blockquote><ul><li>修改代码：  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">orderProductMockDiffUser</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 查询该商品库存，为0则结束活动</span></span><br><span class="line">        <span class="keyword">int</span> stockNum = stock.get(productId);</span><br><span class="line">        <span class="keyword">if</span> (stockNum == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(<span class="number">100</span>, <span class="string">"活动结束"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 下单(模拟不同用户openid不同)</span></span><br><span class="line">            orders.put(KeyUtil.genUniqueKey(), productId);</span><br><span class="line">            <span class="comment">// 3. 减库存</span></span><br><span class="line">            stockNum = stockNum - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            stock.put(productId, stockNum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>重新测试  </li></ul><blockquote><p>重启项目，进行压测，结果显示正常，没有出现<strong>超卖</strong>问题  </p></blockquote><blockquote><p>但是发现，压测时，明显感觉到请求速度变慢，sychronized在保证线程安全同时，牺牲了性能</p></blockquote><h3 id="分析synchronized"><a href="#分析synchronized" class="headerlink" title="分析synchronized"></a>分析synchronized</h3><ul><li>是一种解决方法  </li><li>无法做到细粒度控制  <blockquote><p>比如很多商品参加秒杀活动，每个商品ID都不一样，这些商品的每一次请求都会访问上面的方法，秒杀A商品的人比较多，<br>秒杀B商品的人较少，这样这两种秒杀都会一样的慢  </p></blockquote></li><li>只适合单点的情况  <blockquote><p>上述只能跑在单机上面，如果我们项目进行水平扩展，比如集群，显然负载均衡后，不同的用户访问下结果肯定是五花八门。<br>这就引出下一篇的<strong>Redis分布式锁</strong>了。  </p></blockquote></li></ul><h2 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h2><h3 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h3><ul><li><a href="http://redis.cn/" target="_blank" rel="noopener">Redis中文网站</a>  </li><li><a href="http://redis.cn/commands/setnx.html" target="_blank" rel="noopener">SETNX命令</a>  </li><li><a href="http://redis.cn/commands/getset.html" target="_blank" rel="noopener">GETSET命令</a></li></ul><h3 id="使用Redis作为分布式锁"><a href="#使用Redis作为分布式锁" class="headerlink" title="使用Redis作为分布式锁"></a>使用Redis作为分布式锁</h3><ul><li><p>RedisLock.java  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: Redis分布式锁</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/9 0009 13:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 当前时间+超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// setIfAbset() 等同于 Redis 命令：SETNX</span></span><br><span class="line">        <span class="keyword">if</span> (redisTemplate.opsForValue().setIfAbsent(key, value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String currentValue = redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 如果锁过期</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(currentValue) &amp;&amp; Long.parseLong(currentValue) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">            <span class="comment">// 获取上一个锁的时间</span></span><br><span class="line">            <span class="comment">// getAndSet 等同于 Redis 命令：GETSET</span></span><br><span class="line">            String oldValue = redisTemplate.opsForValue().getAndSet(key, value);</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(oldValue) &amp;&amp; oldValue.equals(currentValue)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁：删掉key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String currentValue = redisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(currentValue) &amp;&amp; currentValue.equals(value)) &#123;</span><br><span class="line">                redisTemplate.opsForValue().getOperations().delete(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"【redis分布式锁】解锁异常, &#123;&#125;"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SecKillServiceImpl.java 核心代码   </p></li></ul><blockquote><p>去掉synchronized关键字；<br>在用户下单减库存业务执行前后添加【加锁】和【解锁】功能。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderProductMockDiffUser</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis() + TIMEOUT;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果加锁不成功, lock()返回false</span></span><br><span class="line">        <span class="keyword">if</span> (!redisLock.lock(productId, String.valueOf(time))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(<span class="number">101</span>, <span class="string">"哎呦喂，人也太多了，换个姿势再试试~~~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 查询该商品库存，为0则结束活动</span></span><br><span class="line">        <span class="keyword">int</span> stockNum = stock.get(productId);</span><br><span class="line">        <span class="keyword">if</span> (stockNum == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(<span class="number">100</span>, <span class="string">"活动结束"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 下单(模拟不同用户openid不同)</span></span><br><span class="line">            orders.put(KeyUtil.genUniqueKey(), productId);</span><br><span class="line">            <span class="comment">// 3. 减库存</span></span><br><span class="line">            stockNum = stockNum - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            stock.put(productId, stockNum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        redisLock.unlock(productId, String.valueOf(time));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><ul><li>重启项目，ab压测  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 500 -c 100 http://127.0.0.1:8080/sell/skill/order/123456</span><br></pre></td></tr></table></figure><ul><li>和sychorized对比，明显Redis分布式锁速度快多了  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/34453815.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>Redis作为<strong>单线程服务</strong>，又是<strong>NoSql数据库</strong>，即高效的<strong>key-value</strong>数据结构，能达到每秒10万次的并发，能作为<br>【高可用】【分布式集群】的一种解决方案；  </p></li><li><p>相对于关键字【synchronized】支持分布式、高可用；  </p></li><li><p>可以更细粒度的控制  </p><blockquote><p>上面介绍的以商品ID productId 作为锁的key, 采用分布式锁  </p></blockquote></li><li><p>多台机器上多个进程对一个数据进行操作的互斥  </p><blockquote><p>用户可以秒杀多个商品，采用多个productId作为分布式的锁。</p></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 压测 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>项目中异常捕获--统一异常处理</title>
      <link href="/springboot-global-exception-summary.html"/>
      <url>/springboot-global-exception-summary.html</url>
      <content type="html"><![CDATA[<h1 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Spring Boot微信点餐项目  </li><li>PostMan工具  </li></ul><h2 id="之前"><a href="#之前" class="headerlink" title="之前"></a>之前</h2><ol><li>使用postman发送生成订单请求，成功时返回信息如下：  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/48933708.jpg" alt=""></p><ol start="2"><li>失败时，返回信息如下：  </li></ol><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/7610957.jpg" alt=""></p><blockquote><p>我们想无论成功还是失败返回统一格式的信息。  </p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li>ResultVO.java  </li></ul><blockquote><p>返回到前台的信息  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: http请求返回的最外层对象</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohq</span></span><br><span class="line"><span class="comment"> * 日期: 2018/3/13 20:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 错误码 */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/** 提示信息 */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/** 具体内容 */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ResultVO工具类  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: ResultVO工具类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohq</span></span><br><span class="line"><span class="comment"> * 日期: 2018/3/13 21:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultVOUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultVO <span class="title">success</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        ResultVO resultVO = <span class="keyword">new</span> ResultVO();</span><br><span class="line">        resultVO.setData(object);</span><br><span class="line">        resultVO.setCode(<span class="number">0</span>);</span><br><span class="line">        resultVO.setMsg(<span class="string">"成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultVO <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultVO <span class="title">error</span><span class="params">(Integer code, String msg)</span></span>&#123;</span><br><span class="line">        ResultVO resultVO = <span class="keyword">new</span> ResultVO();</span><br><span class="line">        resultVO.setCode(code);</span><br><span class="line">        resultVO.setMsg(msg);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SellException.java  </li></ul><blockquote><p>自定义全局异常类，处理业务时，抛出该异常；  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SellException</span><span class="params">(ResultEnum resultEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(resultEnum.getMessage());</span><br><span class="line">        <span class="keyword">this</span>.code = resultEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SellException</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ResultEnum.java  </li></ul><blockquote><p>返回前端信息的枚举类  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResultEnum &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">0</span>, <span class="string">"成功"</span>),</span><br><span class="line">    PARAM_ERROR(<span class="number">1</span>, <span class="string">"参数不正确"</span>),</span><br><span class="line">    PRODUCT_NOT_EXIST(<span class="number">10</span>, <span class="string">"商品不存在"</span>),</span><br><span class="line">    PRODUCT_SOTCK_ERROR(<span class="number">11</span>, <span class="string">"商品库存异常"</span>),</span><br><span class="line">    ORDER_NOT_EXIST(<span class="number">12</span>, <span class="string">"订单不存在"</span>),</span><br><span class="line">    ORDERDETAIL_NOT_EXIST(<span class="number">12</span>, <span class="string">"订单不存在"</span>),</span><br><span class="line">    ORDER_STATUS_ERROR(<span class="number">14</span>, <span class="string">"订单状态不正确"</span>),</span><br><span class="line">    ORDER_UPDATE_FAIL(<span class="number">15</span>, <span class="string">"订单更新失败"</span>),</span><br><span class="line">    ORDER_DETAIL_EMPTY(<span class="number">16</span>, <span class="string">"订单详情为空"</span>),</span><br><span class="line">    ORDER_PAY_STATUS_ERROR(<span class="number">17</span>, <span class="string">"订单支付状态不正确"</span>),</span><br><span class="line">    CART_EMPTY(<span class="number">18</span>, <span class="string">"购物车为空"</span>),</span><br><span class="line">    ORDER_OWNER_ERROR(<span class="number">19</span>, <span class="string">"该订单不属于当前用户"</span>),</span><br><span class="line">    WECHAT_MP_ERROR(<span class="number">20</span>, <span class="string">"微信公众账号方面错误"</span>),</span><br><span class="line">    WXPAY_NOTIFY_MONEY_VERIFY_ERROR(<span class="number">21</span>, <span class="string">"微信支付异步通知金额校验不通过"</span>),</span><br><span class="line">    ORDER_CANCEL_SUCCESS(<span class="number">22</span>, <span class="string">"订单取消成功"</span>),</span><br><span class="line">    ORDER_FINISH_SUCCESS(<span class="number">23</span>, <span class="string">"订单完结成功"</span>),</span><br><span class="line">    PRODUCT_STATUS_ERROR(<span class="number">24</span>, <span class="string">"商品状态不正确"</span>),</span><br><span class="line">    LOGIN_FAIL(<span class="number">25</span>, <span class="string">"登录失败, 登录信息不正确"</span>),</span><br><span class="line">    LOGOUT_SUCCESS(<span class="number">26</span>, <span class="string">"登出成功"</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    ResultEnum(Integer code, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SellExceptionHandler.java   </li></ul><blockquote><p>统一异常处理类：拦截登录异常；拦截各种业务异常  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectUrlConfig projectUrlConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截登录异常</span></span><br><span class="line">    <span class="comment">// 拦截后，跳转到：http://sell.natapp4.cc/sell/wechat/qrAuthorize?returnUrl=http://sell.natapp4.cc/sell/seller/login</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SellerAuthorizeException.class)</span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.FORBIDDEN)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handlerAuthorizeException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:"</span></span><br><span class="line">        .concat(projectUrlConfig.getWechatOpenAuthorize())</span><br><span class="line">        .concat(<span class="string">"/sell/wechat/qrAuthorize"</span>)</span><br><span class="line">        .concat(<span class="string">"?returnUrl="</span>)</span><br><span class="line">        .concat(projectUrlConfig.getSell())</span><br><span class="line">        .concat(<span class="string">"/sell/seller/login"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截业务异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SellException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">handlerSellerException</span><span class="params">(SellException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultVOUtil.error(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/19068018.jpg" alt=""></p><blockquote><p>从上图可以看到：返回正确格式的错误信息，但此时状态码为<strong>200</strong>，之前是<strong>500</strong>，当然这个也可以自定义。  </p></blockquote><h2 id="抛出异常时自定义返回状态码"><a href="#抛出异常时自定义返回状态码" class="headerlink" title="抛出异常时自定义返回状态码"></a>抛出异常时自定义返回状态码</h2><ul><li>SellExceptionHandler.java 部分代码：  </li></ul><blockquote><p>直接使用注解<strong>@ResponseStatus</strong>,比如抛出异常时，返回403：<strong>HttpStatus.FORBIDDEN</strong>   </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截业务异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SellException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.FORBIDDEN)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">handlerSellerException</span><span class="params">(SellException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultVOUtil.error(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>HttpStatus.java  </li></ul><blockquote><p>各种状态码  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpStatus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PROCESSING = <span class="number">102</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MULTI_STATUS = <span class="number">207</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUEST_TOO_LONG = <span class="number">413</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_INSUFFICIENT_SPACE_ON_RESOURCE = <span class="number">419</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_METHOD_FAILURE = <span class="number">420</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_UNPROCESSABLE_ENTITY = <span class="number">422</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_LOCKED = <span class="number">423</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_FAILED_DEPENDENCY = <span class="number">424</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_INSUFFICIENT_STORAGE = <span class="number">507</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果  </li></ul><blockquote><p>可以看到，状态码已经显示403了  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/20639259.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用websocket推送消息</title>
      <link href="/websocket-push-message.html"/>
      <url>/websocket-push-message.html</url>
      <content type="html"><![CDATA[<h1 id="websocket推送消息"><a href="#websocket推送消息" class="headerlink" title="websocket推送消息"></a>websocket推送消息</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>spring boot点餐项目  </li><li>websocket(Html5原生)  </li></ul><blockquote><p>功能：当客户端下订单后，服务端推送消息提醒卖家由用户下单  </p></blockquote><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>pom.xml：引入依赖  </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- websocket --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>/order/list.ftl：前端js  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#--弹窗--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span></span><br><span class="line">                    提醒</span><br><span class="line">                <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                你有新的订单</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"javascript:document.getElementById('notice').pause()"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"location.reload()"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>查看新的订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">#--播放音乐--</span>&gt;</span><span class="comment">&lt;!--使用html5原生播放音乐--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"notice"</span> <span class="attr">loop</span>=<span class="string">"loop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"/sell/mp3/websocket_message.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var websocket = null;</span></span><br><span class="line"><span class="undefined">    if('WebSocket' in window) &#123;</span></span><br><span class="line"><span class="undefined">        websocket = new WebSocket('ws://hunterfish.ngrok.xiaomiqiu.cn//sell/webSocket');</span></span><br><span class="line"><span class="undefined">    &#125;else &#123;</span></span><br><span class="line"><span class="undefined">        alert('该浏览器不支持websocket!');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    // websocket事件</span></span><br><span class="line"><span class="undefined">    websocket.onopen = function (event) &#123;</span></span><br><span class="line"><span class="undefined">        console.log('建立连接');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    websocket.onclose = function (event) &#123;</span></span><br><span class="line"><span class="undefined">        console.log('连接关闭');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    websocket.onmessage = function (event) &#123;</span></span><br><span class="line"><span class="undefined">        console.log('收到消息:' + event.data)</span></span><br><span class="line"><span class="undefined">        //弹窗提醒, 播放音乐</span></span><br><span class="line"><span class="undefined">        $('#myModal').modal('show');</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        document.getElementById('notice').play();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    websocket.onerror = function () &#123;</span></span><br><span class="line"><span class="undefined">        alert('websocket通信发生错误！');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    // 页面刷新，触发</span></span><br><span class="line"><span class="undefined">    window.onbeforeunload = function () &#123;</span></span><br><span class="line"><span class="undefined">        websocket.close();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通知音乐文件：可以<a href="http://developer.baidu.com/vcast" target="_blank" rel="noopener">点击</a>自定义自己想要的提示音！    </p></li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/8132712.jpg" alt=""></p><ul><li>WebSocketConfig.java：websocket配置类，生成Bean  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: websocket配置类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/8 0008 16:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>WebSocket.java  </li></ul><blockquote><p>类似于Controller接口  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: webSocket事件方法：实现前端js中定义的事件方法</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/8 0008 16:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/webSocket"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 储存session</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocket&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        webSocketSet.add(<span class="keyword">this</span>);</span><br><span class="line">        log.info(<span class="string">"【websocket消息】有新的连接，总数:&#123;&#125;"</span>, webSocketSet.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);</span><br><span class="line">        log.info(<span class="string">"【websocket消息】连接断开，总数:&#123;&#125;"</span>, webSocketSet.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);</span><br><span class="line">        log.info(<span class="string">"【websocket消息】收到客户端发来的消息:&#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WebSocket webSocket : webSocketSet) &#123;</span><br><span class="line">            log.info(<span class="string">"【websocket消息】广播消息, message=&#123;&#125;"</span>, message);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                webSocket.session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();    <span class="comment">// 异常只打印不抛出（抛出会回滚）</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>启动项目  </li></ul><p>如何启动，请参考本博客另一篇文章<a href="">启动spring boot微信点餐项目</a></p><blockquote><p>当进入或刷新订单页面后，websocket产生连接  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/68865724.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/84939282.jpg" alt=""></p><ul><li>postman发送生成订单请求：  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/90026970.jpg" alt=""></p><ul><li>发送请求后：  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/67965777.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/54531158.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用微信推送模板消息功能</title>
      <link href="/wechat-push-template-message.html"/>
      <url>/wechat-push-template-message.html</url>
      <content type="html"><![CDATA[<h1 id="微信推送模板消息"><a href="#微信推送模板消息" class="headerlink" title="微信推送模板消息"></a>微信推送模板消息</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>微信公众平台测试账号  </li><li>微信开发SDK：<a href="https://github.com/Wechat-Group/weixin-java-tools" target="_blank" rel="noopener">weixin-java-mp</a>  </li></ul><h2 id="微信测试平台新建模板消息"><a href="#微信测试平台新建模板消息" class="headerlink" title="微信测试平台新建模板消息"></a>微信测试平台新建模板消息</h2><blockquote><p>微信测试账号和正式账号还是不一样的，暂时不提  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/47258658.jpg" alt=""><br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/55601474.jpg" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>application.yml  </li></ul><blockquote><p>可以添加多个模板ID  </p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">templateId:</span></span><br><span class="line">  <span class="comment"># 订单状态变化模板</span></span><br><span class="line"><span class="attr">  orderStatus:</span> <span class="number">6</span><span class="string">JxFTK2OKTIF0hZ6aFrsHcUaNad5VDZ8a8wNk_OztFY</span></span><br></pre></td></tr></table></figure><ul><li>PushMessageService   </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 微信推送消息</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/8 0008 14:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PushMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单状态变更消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">orderStatus</span><span class="params">(OrderDTO orderDTO)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PushMessageServiceImpl.java  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: 微信推送消息实现</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 作者: luohongquan</span></span><br><span class="line"><span class="comment"> * 日期: 2018/5/8 0008 14:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushMessageServiceImpl</span> <span class="keyword">implements</span> <span class="title">PushMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpService wxMpService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WechatAccountConfig wechatAccountConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderStatus</span><span class="params">(OrderDTO orderDTO)</span> </span>&#123;</span><br><span class="line">        WxMpTemplateMessage templateMessage = <span class="keyword">new</span> WxMpTemplateMessage();</span><br><span class="line">        templateMessage.setTemplateId(wechatAccountConfig.getTemplateId().get(<span class="string">"orderStatus"</span>));</span><br><span class="line">        templateMessage.setToUser(orderDTO.getBuyerOpenid());</span><br><span class="line"></span><br><span class="line">        List&lt;WxMpTemplateData&gt; data = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"first"</span>, <span class="string">"亲，请记得收货！"</span>),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"keyword1"</span>, <span class="string">"微信点餐"</span>),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"keyword2"</span>, <span class="string">"13636486238"</span>),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"keyword3"</span>, orderDTO.getOrderId()),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"keyword4"</span>, orderDTO.getOrderStatusEnum().getMessage()),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"keyword5"</span>, <span class="string">"￥"</span> + orderDTO.getOrderAmount()),</span><br><span class="line">                <span class="keyword">new</span> WxMpTemplateData(<span class="string">"remark"</span>, <span class="string">"欢迎再次光临！"</span>)</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line">        templateMessage.setData(data);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wxMpService.getTemplateMsgService().sendTemplateMsg(templateMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">            log.error(<span class="string">"【微信模板消息】发送失败, &#123;&#125;"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>发送模板消息只是捕捉，打印错误日志，并没有抛出异常，因为下面业务代码【完结订单】执行后，如果抛出异常，就会<br>回滚，而【发送模板消息】并不是必须的，如果因为【发送模板消息】出现异常就回滚【完结订单】业务，就得不偿失了！      </p></blockquote><ul><li>OrderServiceImpl.java  </li></ul><blockquote><p>结束订单时，发送模板消息  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderDTO <span class="title">finish</span><span class="params">(OrderDTO orderDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 判断订单状态</span></span><br><span class="line">        <span class="keyword">if</span> (!orderDTO.getOrderStatus().equals(OrderStatusEnum.NEW.getCode())) &#123;</span><br><span class="line">            log.error(<span class="string">"【完结订单】订单状态不正确，orderId=&#123;&#125;, orderStatus=&#123;&#125;"</span>, orderDTO.getOrderId(), orderDTO.getOrderStatus());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(ResultEnum.ORDER_STATUS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 修改订单状态</span></span><br><span class="line">        orderDTO.setOrderStatus(OrderStatusEnum.FINISHED.getCode());</span><br><span class="line">        OrderMaster orderMaster = <span class="keyword">new</span> OrderMaster();</span><br><span class="line">        BeanUtils.copyProperties(orderDTO, orderMaster);</span><br><span class="line">        OrderMaster updateResult = orderMasterRepository.save(orderMaster);</span><br><span class="line">        <span class="keyword">if</span> (updateResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">"【完结订单】更新失败，orderMaster=&#123;&#125;"</span>, orderMaster);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SellException(ResultEnum.ORDER_UPDATE_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 推送微信模板消息（没有抛出异常，只是捕捉并打印日志，因为如果抛出异常，完结订单就会回滚了，推送消息并不是非常必需的）</span></span><br><span class="line">        pushMessageService.orderStatus(orderDTO);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderDTO;</span><br><span class="line">    &#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">* 测试类：  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushMessageServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PushMessageServiceImpl pushMessageService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        OrderDTO orderDTO = orderService.findOne(<span class="string">"1525757413764873869"</span>);</span><br><span class="line">        pushMessageService.orderStatus(orderDTO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/22669771.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分布式系统和分布式session</title>
      <link href="/distributed-system-and-session.html"/>
      <url>/distributed-system-and-session.html</url>
      <content type="html"><![CDATA[<h1 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>旨在支持应用程序和服务的开发，可以利用物理架构由多个自治的处理元素；<br>不共享主内存，但通过网络发送消息合作。</p></blockquote><h3 id="三个特点"><a href="#三个特点" class="headerlink" title="三个特点"></a>三个特点</h3><ul><li>多节点  </li><li>消息通信  </li><li>不共享内存  </li></ul><h3 id="三个概念"><a href="#三个概念" class="headerlink" title="三个概念"></a>三个概念</h3><ul><li>分布式系统（distributed system） </li><li>集群（cluster）  </li><li>分布式计算（distributed computing）  </li></ul><blockquote><p>关于分布式和集群可以这样理解：一个厨房有炒菜的和洗菜的，这就是分布式；如果炒菜的有多个，这就是集群。    </p></blockquote><h1 id="分布式session"><a href="#分布式session" class="headerlink" title="分布式session"></a>分布式session</h1><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><blockquote><p>这里我们所说的session是广义的session，就是平常所说的<strong>会话控制</strong>  </p></blockquote><ul><li><p>http协议是无状态的，对于一个URL请求并没有上下文关系，当用户完成登陆后，需要有一个机制能够保存用户的信息<br>和状态，在后续的请求中能够验证用户的身份和检查用户的信息，这个依赖就是会话控制即SESSION。  </p></li><li><p>可以把session理解为一种保存key-value的机制；session机制的关键点：</p><blockquote><p>第一：设置和获取key;<br>第二：如何保存并正确获取对应的value。  </p></blockquote></li><li><p>从key方面来看，常用的会话方式有<strong>sessionId</strong>和<strong>token</strong>；  </p></li><li><p>不管是sessionId还是token都是全局唯一性的，无论是key还是value，如果没有唯一性，就会分辨不出用户身份和信息；  </p></li><li><p>当我们依赖sessionId时，如果用户禁用了Cookie，那么系统就会让用户不断的去登陆；  </p></li><li><p>key对应的value什么情况下有可能不唯一呢，这就是引出了分布式系统下的session问题了？  </p></li></ul><h3 id="sessionId"><a href="#sessionId" class="headerlink" title="sessionId"></a>sessionId</h3><ul><li>客户端请求服务端时，服务端通过setCookie在http请求头中设置key：JSESSIONID和对应的value值；  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/14850270.jpg" alt=""></p><ul><li>客户端Cookie会保存在本地，后续的请求都会自动带上  </li></ul><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><ul><li><p>使用token时，我们需要手动在http head头或者url请求中设置token字段，服务器收到请求后，<br>再从head头里或url请求中获取token验证用户身份。  </p></li><li><p>当安全比较严格时，会结合签名一起使用。  </p></li></ul><h2 id="分布式系统下的session"><a href="#分布式系统下的session" class="headerlink" title="分布式系统下的session"></a>分布式系统下的session</h2><h3 id="应用最开始的架构"><a href="#应用最开始的架构" class="headerlink" title="应用最开始的架构"></a>应用最开始的架构</h3><ul><li>用户请求通过nginx到达tomcat，tomcat部署了一个应用，此时，session保存在tomcat应用的内存中，  </li></ul><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/52761962.jpg" alt=""></p><ul><li>后来用户使用人数激增，一个tomcat扛不住了，然后增加机器，部署多个Tomcat；  </li></ul><blockquote><p>水平扩展：A2、A3都是通过A1复制的，也就是平常说的集群； </p></blockquote><blockquote><p>垂直扩展：比如tomcat的应用中有订单、商家、商品三个服务，拆分出来，然后在三个tomcat上单独部署这三个<br>服务；  </p></blockquote><blockquote><p>接着配置nginx，通过访问不同的url访问不同的负载均衡到不同的服务器上去，减轻单台服务器压力。</p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/72984668.jpg" alt=""></p><ul><li>无论是水平扩展还是垂直拆分扩展，都会引出session的问题：  <blockquote><p>1，比如用户第一次进来访问的是A1服务器，此时A1持有用户的session；<br>2，当用户第二次请求时，由用户负载均衡，有可能访问A2或A3，A2或A3并没有用户的session信息，就会认为该用户没有登陆；<br>3，对于水平扩展，ip_hash可以让同一ip过来的请求发送到后台同一台服务器中，问题：如果很多用户的ip都映射到A1服务器，<br>如果某一时刻，A1宕机挂掉，之前都访问A1服务器的用户都访问不到我们的服务了；<br>4，垂直扩展更没戏了，所以不推荐使用ip_hash。  </p></blockquote></li></ul><h3 id="通用方案"><a href="#通用方案" class="headerlink" title="通用方案"></a>通用方案</h3><ul><li>创建单独的服务保存session信息，其他的服务都从该服务获取session信息；  、</li><li>通常用Redis集群或主从复制实现；<br><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/71123749.jpg" alt=""></li><li>这样无论是集群还是分布式服务都能从该服务中根据用户id获取唯一的session信息了；  <blockquote><p>登陆：设置key，保存value（sesion信息）；<br>登出：使该session信息失效。  </p></blockquote></li></ul><h1 id="分布式session实战"><a href="#分布式session实战" class="headerlink" title="分布式session实战"></a>分布式session实战</h1><blockquote><p>新建spring boot项目，<a href="https://gitee.com/ddebug/session" target="_blank" rel="noopener">点击访问项目地址</a><br>功能：实现卖家端微信扫码登陆功能。  </p></blockquote><h2 id="SpringBoot整合微信公众平台测试账号授权登陆"><a href="#SpringBoot整合微信公众平台测试账号授权登陆" class="headerlink" title="SpringBoot整合微信公众平台测试账号授权登陆"></a>SpringBoot整合微信公众平台测试账号授权登陆</h2><blockquote><p>参考链接：<a href="https://blog.csdn.net/antma/article/details/79629584" target="_blank" rel="noopener">https://blog.csdn.net/antma/article/details/79629584</a>  </p></blockquote><blockquote><p>有关代码基本上和上面参考链接一样，部分需要修改！  </p></blockquote><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><ul><li>application.yml：添加微信配置信息  </li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wechat:</span></span><br><span class="line">  <span class="comment"># 公众平台测试账号</span></span><br><span class="line"><span class="attr">  appId:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">  appSecret:</span> <span class="string">xxxxx</span></span><br></pre></td></tr></table></figure><ul><li>WechatAccountConfig：读取application.yml配置信息  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"wechat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatAccountConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 公众平台测试id */</span></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line">    <span class="comment">/** 公众平台测试密钥 */</span></span><br><span class="line">    <span class="keyword">private</span> String appSecret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>WeChatConfig.java：配置WxMpService Bean   </li></ul><blockquote><p><strong>weixin-java-mp</strong>是<a href="https://gitee.com/binary/weixin-java-tools" target="_blank" rel="noopener"><strong>weixin-java-tools</strong></a>开发工具包（SDK）的一部分</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WechatAccountConfig accountConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpService <span class="title">wxService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WxMpService wxservice = <span class="keyword">new</span> WxMpServiceImpl();</span><br><span class="line">        wxservice.setWxMpConfigStorage(wxConfigStorate());</span><br><span class="line">        <span class="keyword">return</span> wxservice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpConfigStorage <span class="title">wxConfigStorate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WxMpInMemoryConfigStorage wxMpInMemoryConfigStorage = <span class="keyword">new</span> WxMpInMemoryConfigStorage();</span><br><span class="line">        wxMpInMemoryConfigStorage.setAppId(accountConfig.getAppId());</span><br><span class="line">        wxMpInMemoryConfigStorage.setSecret(accountConfig.getAppSecret());</span><br><span class="line">        <span class="keyword">return</span> wxMpInMemoryConfigStorage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>LoginController：微信服务请求验证接口（测试账号的url和token验证）  </li></ul><blockquote><p>下面注释掉的java代码也可以，实际上并没有使用CheckUtil和SHA1工具类验证token  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"portal"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"success"</span>);</span><br><span class="line">        String signature = request.getParameter(<span class="string">"signature"</span>);</span><br><span class="line">        String timestamp = request.getParameter(<span class="string">"timestamp"</span>);</span><br><span class="line">        String nonce = request.getParameter(<span class="string">"nonce"</span>);</span><br><span class="line">        String echostr = request.getParameter(<span class="string">"echostr"</span>);</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = response.getWriter();</span><br><span class="line">            <span class="keyword">if</span>(CheckUtil.checkSignature(signature, timestamp, nonce))&#123;</span><br><span class="line">                out.append(echostr);</span><br><span class="line">                out.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不知道下面没有验证token，但是也可以成功</span></span><br><span class="line">        <span class="comment">/*String signature = request.getParameter("signature");</span></span><br><span class="line"><span class="comment">        String timestamp = request.getParameter("timestamp");</span></span><br><span class="line"><span class="comment">        String nonce = request.getParameter("nonce");</span></span><br><span class="line"><span class="comment">        String echostr = request.getParameter("echostr");</span></span><br><span class="line"><span class="comment">        System.out.println("signature:" + signature);</span></span><br><span class="line"><span class="comment">        System.out.println("timestamp:" + timestamp);</span></span><br><span class="line"><span class="comment">        System.out.println("nonce:" + nonce);</span></span><br><span class="line"><span class="comment">        System.out.println("echostr:" + echostr);</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            PrintWriter pw = response.getWriter();</span></span><br><span class="line"><span class="comment">            pw.append(echostr);</span></span><br><span class="line"><span class="comment">            pw.flush();</span></span><br><span class="line"><span class="comment">        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CheckUtil：微信请求校验工具类  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String token = <span class="string">"hunterfish"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkSignature</span><span class="params">(String signature,String timestamp,String nonce)</span></span>&#123;</span><br><span class="line">        String[] str = <span class="keyword">new</span> String[]&#123;token,timestamp,nonce&#125;;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(str);</span><br><span class="line">        <span class="comment">//拼接字符串</span></span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;str.length;i++)&#123;</span><br><span class="line">            buffer.append(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行sha1加密</span></span><br><span class="line">        String temp = SHA1.encode(buffer.toString());</span><br><span class="line">        <span class="comment">//与微信提供的signature进行匹对</span></span><br><span class="line">        <span class="keyword">return</span> signature.equals(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SHA1：sha1加密  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHA1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] HEX_DIGITS = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>,</span><br><span class="line">            <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Takes the raw bytes from the digest and formats them correct.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes the raw bytes from the digest.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the formatted bytes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getFormattedText</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = bytes.length;</span><br><span class="line">        StringBuilder buf = <span class="keyword">new</span> StringBuilder(len * <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 把密文转换成十六进制的字符串形式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            buf.append(HEX_DIGITS[(bytes[j] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>]);</span><br><span class="line">            buf.append(HEX_DIGITS[bytes[j] &amp; <span class="number">0x0f</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"SHA1"</span>);</span><br><span class="line">            messageDigest.update(str.getBytes());</span><br><span class="line">            <span class="keyword">return</span> getFormattedText(messageDigest.digest());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>WeChatController：访问微信服务器获取code和access_token、openId等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpService wxMpService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 功能描述: 微信授权</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 作者: luohongquan</span></span><br><span class="line"><span class="comment">     * 日期: 2018/5/3 0003 15:12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/authorize"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">qrAuthorize</span><span class="params">(@RequestParam(<span class="string">"returnUrl"</span>)</span> String returnUrl) </span>&#123;</span><br><span class="line">        String url = <span class="string">"https://c901e3dd.ngrok.io/session/userInfo"</span>;</span><br><span class="line">        String redirectURL = wxMpService.oauth2buildAuthorizationUrl(url, WxConsts.OAUTH2_SCOPE_USER_INFO, URLEncoder.encode(returnUrl));</span><br><span class="line">        log.info(<span class="string">"【微信网页授权】获取code，redirectURL=&#123;&#125;"</span>, redirectURL);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span> + redirectURL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 功能描述: 获取openId</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 作者: luohongquan</span></span><br><span class="line"><span class="comment">     * 日期: 2018/5/3 0003 15:12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/userInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">qrUserInfo</span><span class="params">(@RequestParam(<span class="string">"code"</span>)</span> String code,</span></span><br><span class="line"><span class="function">                             @<span class="title">RequestParam</span><span class="params">(<span class="string">"state"</span>)</span> String returnUrl) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"【微信网页授权】code=&#123;&#125;"</span>, code);</span><br><span class="line">        log.info(<span class="string">"【微信网页授权】state=&#123;&#125;"</span>, returnUrl);</span><br><span class="line">        WxMpOAuth2AccessToken wxMpOAuth2AccessToken = <span class="keyword">new</span> WxMpOAuth2AccessToken();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wxMpOAuth2AccessToken = wxMpService.oauth2getAccessToken(code);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">            log.error(<span class="string">"【微信网页授权】&#123;&#125;"</span>, e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String openId = wxMpOAuth2AccessToken.getOpenId();</span><br><span class="line">        log.info(<span class="string">"【微信网页授权】openId=&#123;&#125;"</span>, openId);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span> + returnUrl + <span class="string">"?openid="</span> + openId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 功能描述: 首页</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 作者: luohongquan</span></span><br><span class="line"><span class="comment">     * 日期: 2018/5/3 0003 14:54</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 功能描述: 登陆页面</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 作者: luohongquan</span></span><br><span class="line"><span class="comment">     * 日期: 2018/5/3 0003 14:54</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.html：访问路径”<a href="http://hunterfish.ngrok.xiaomiqiu.cn/session/&quot;，项目登陆后首页" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/session/&quot;，项目登陆后首页</a>  </li></ul><blockquote><p>前端页面简单的使用Thymeleaf完成     </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>login.html：访问路径”<a href="http://hunterfish.ngrok.xiaomiqiu.cn/session/&quot;，项目登陆页面" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/session/&quot;，项目登陆页面</a>  </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>微信公众平台测试号网页授权<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>授权页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size: 64px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/authorize(returnUrl='https://hunterfish.ngrok.xiaomiqiu.cn/session/')&#125;"</span>&gt;</span>微信登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p><strong>1. 接口配置信息验证</strong>    </p><blockquote><p>URL：<a href="http://hunterfish.ngrok.xiaomiqiu.cn/session/portal（中间使用ngrok内网穿透域名）" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/session/portal（中间使用ngrok内网穿透域名）</a><br>Token：随便写，与LoginController的”/portal”接口中的token验证保持一致（实际中我测试不需要验证也能成功）  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/78053565.jpg" alt=""></p><p><strong>2. 进入登陆页面</strong>   </p><blockquote><p>使用<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html" target="_blank" rel="noopener">微信开发工具</a>，方便快捷；<br>登陆URL：<a href="http://hunterfish.ngrok.xiaomiqiu.cn/session/login" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/session/login</a>  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/40775360.jpg" alt=""></p><p><strong>3. 点击”微信登陆”</strong>  </p><blockquote><p>根据前面html页面可知，点击登陆的url链接：<a href="https://hunterfish.ngrok.xiaomiqiu.cn/session/authorize?returnUrl=https://hunterfish.ngrok.xiaomiqiu.cn/session/" target="_blank" rel="noopener">https://hunterfish.ngrok.xiaomiqiu.cn/session/authorize?returnUrl=https://hunterfish.ngrok.xiaomiqiu.cn/session/</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size: 64px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/authorize(returnUrl='https://hunterfish.ngrok.xiaomiqiu.cn/session/')&#125;"</span>&gt;</span>微信登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/78982621.jpg" alt=""></p><p><strong>4. 点击”确认登录”</strong>  </p><blockquote><p>此时，执行”/userInfo”接口，并携带了第三步访问”/authorize”接口的获取的Code等参数；<br>最终授权成功后，跳转到第一步登陆时携带的链接：<a href="http://hunterfish.ngrok.xiaomiqiu.cn/session/（index.html)。" target="_blank" rel="noopener">http://hunterfish.ngrok.xiaomiqiu.cn/session/（index.html)。</a>  </p></blockquote><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/62033396.jpg" alt=""></p><h2 id="登陆用户代码"><a href="#登陆用户代码" class="headerlink" title="登陆用户代码"></a>登陆用户代码</h2><h3 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句<mysql></mysql></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户(登录后台使用, 用户登录可直接采用微信扫码登录，不使用账号密码)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`seller_info`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="string">`openid`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'微信openid'</span>,</span><br><span class="line">    <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`update_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'修改时间'</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">comment</span> <span class="string">'用户信息表'</span>;</span><br></pre></td></tr></table></figure><h3 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h3><ul><li>pom.xml  </li></ul><blockquote><p>新增mysql、jpa、lombok、weixin-java-mp、thymeleaf依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li>实体类  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String sellerId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String openid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Dao层  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserInfo</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据openId查询用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">UserInfo <span class="title">findByOpenid</span><span class="params">(String openid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Service层  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据openid查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> openid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">UserInfo <span class="title">findUserInfoByOpenid</span><span class="params">(String openid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoRepository userInfoRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfo <span class="title">findUserInfoByOpenid</span><span class="params">(String openid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring Boot微信点餐项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> session </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql统计一段时间内每天数据情况</title>
      <link href="/mysql-everyday-data-by-period.html"/>
      <url>/mysql-everyday-data-by-period.html</url>
      <content type="html"><![CDATA[<h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p>后台项目要统计游戏模块每天新增人数，新增体力值数量以及占总体力值百分比，显示效果如下图所示：</p><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/37035734.jpg" alt=""></p><h2 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h2><p>sql语句如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t2.date,</span><br><span class="line">    <span class="keyword">ifnull</span>(t4.newUserNum,<span class="number">0</span>) newUserNum,</span><br><span class="line">    <span class="keyword">ifnull</span>(t3.addVitality,<span class="number">0</span>) addVitality,</span><br><span class="line">    <span class="keyword">ifnull</span>(t4.allVitality,<span class="number">0</span>) allVitality,</span><br><span class="line">    <span class="keyword">ifnull</span>(<span class="keyword">ROUND</span>(t3.addVitality/t4.allVitality*<span class="number">100</span>,<span class="number">1</span>),<span class="number">0</span>) <span class="keyword">percent</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> @cdate := <span class="keyword">DATE_ADD</span>(@cdate, <span class="built_in">INTERVAL</span> <span class="number">-1</span> <span class="keyword">DAY</span>) <span class="built_in">date</span></span><br><span class="line">     <span class="keyword">FROM</span></span><br><span class="line">             (<span class="keyword">SELECT</span> @cdate := <span class="keyword">DATE_ADD</span>(<span class="string">'2018-03-21'</span>, <span class="built_in">INTERVAL</span> +<span class="number">1</span> <span class="keyword">DAY</span>)</span><br><span class="line">                <span class="keyword">FROM</span></span><br><span class="line">                        dl_area t0 <span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line">             ) t1</span><br><span class="line">    ) t2</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">sum</span>(<span class="keyword">if</span>((pay_status = <span class="number">1</span>),pay_amount,<span class="number">0</span>)) addVitality, <span class="built_in">DATE</span>(create_time) <span class="built_in">date</span></span><br><span class="line">         <span class="keyword">FROM</span></span><br><span class="line">                 ldd_game_pay_order</span><br><span class="line">         <span class="keyword">WHERE</span> create_time <span class="keyword">BETWEEN</span> <span class="string">'2018-02-02T00:00'</span> <span class="keyword">AND</span> <span class="string">'2018-03-21T00:00'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">date</span></span><br><span class="line">        ) t3</span><br><span class="line"><span class="keyword">ON</span> t2.date = t3.date</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="keyword">id</span>) newUserNum, <span class="keyword">sum</span>(vitality) allVitality, <span class="built_in">Date</span>(create_time) <span class="built_in">date</span></span><br><span class="line">         <span class="keyword">FROM</span></span><br><span class="line">                 ldd_game_user_info</span><br><span class="line">         <span class="keyword">WHERE</span> create_time <span class="keyword">BETWEEN</span> <span class="string">'2018-02-02T00:00'</span> <span class="keyword">AND</span> <span class="string">'2018-03-21T00:00'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">date</span></span><br><span class="line">        ) t4</span><br><span class="line"><span class="keyword">ON</span> t2.date = t4.date</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t2.date</span><br></pre></td></tr></table></figure></p><p>mybatis,xml语句如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryNewUserStatistics"</span> <span class="attr">resultType</span>=<span class="string">"com.dl98.modules.api.vo.GameStatisticsVo"</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">        t2.date,</span><br><span class="line">        ifnull(t4.newUserNum,0) newUserNum,</span><br><span class="line">        ifnull(t3.addVitality,0) addVitality,</span><br><span class="line">        ifnull(t4.allVitality,0) allVitality,</span><br><span class="line">        ifnull(ROUND(t3.addVitality/t4.allVitality*100,1),0) percent</span><br><span class="line">    FROM</span><br><span class="line">        (SELECT @cdate := DATE_ADD(@cdate, INTERVAL -1 DAY) date</span><br><span class="line">         FROM</span><br><span class="line">             (SELECT @cdate := DATE_ADD(#&#123;eDate&#125;, INTERVAL +1 DAY)</span><br><span class="line">              FROM</span><br><span class="line">                  dl_area t0 LIMIT #&#123;days&#125;</span><br><span class="line">             ) t1</span><br><span class="line">        ) t2</span><br><span class="line">    LEFT JOIN (SELECT sum(if((pay_status = 1),pay_amount,0)) addVitality, DATE(create_time) date</span><br><span class="line">               FROM</span><br><span class="line">                   ldd_game_pay_order</span><br><span class="line">               WHERE create_time BETWEEN #&#123;sTime&#125; AND #&#123;eTime&#125; GROUP BY date</span><br><span class="line">              ) t3</span><br><span class="line">    ON t2.date = t3.date</span><br><span class="line">    LEFT JOIN (SELECT count(id) newUserNum, sum(vitality) allVitality, Date(create_time) date</span><br><span class="line">               FROM</span><br><span class="line">                   ldd_game_user_info</span><br><span class="line">               WHERE create_time BETWEEN #&#123;sTime&#125; AND #&#123;eTime&#125; GROUP BY date</span><br><span class="line">              ) t4</span><br><span class="line">    ON t2.date = t4.date</span><br><span class="line">    ORDER BY t2.date</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="sql分析"><a href="#sql分析" class="headerlink" title="sql分析"></a>sql分析</h3><h4 id="生成一段时间列"><a href="#生成一段时间列" class="headerlink" title="生成一段时间列"></a>生成一段时间列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @cdate := <span class="keyword">DATE_ADD</span>(@cdate, <span class="built_in">INTERVAL</span> <span class="number">-1</span> <span class="keyword">DAY</span>) <span class="built_in">date</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> @cdate := <span class="keyword">DATE_ADD</span>(#&#123;eDate&#125;, <span class="built_in">INTERVAL</span> +<span class="number">1</span> <span class="keyword">DAY</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  dl_area t0 <span class="keyword">LIMIT</span> #&#123;<span class="keyword">days</span>&#125;</span><br><span class="line">) t1</span><br></pre></td></tr></table></figure><ol><li><strong>@cdate</strong>   <blockquote><p>是定义名为cdate的变量并赋值（select后面必须用:=）  </p></blockquote></li><li><strong><a href="http://www.w3school.com.cn/sql/func_date_add.asp" target="_blank" rel="noopener">ATE_ADD(date, INTERVAL expr type)</a></strong> <blockquote><p>该mysql函数向日期添加指定的时间间隔  </p></blockquote></li><li><strong><a href="https://blog.csdn.net/arenzhj/article/details/16902141" target="_blank" rel="noopener">INTERVAL</a></strong>  <blockquote><p>取间隔关键字</p></blockquote></li><li><strong>@cdate := DATE_ADD(‘20180319’, INTERVAL + 1 DAY)</strong>  <blockquote><p>按照传入的日期’20180319’,加一天  </p></blockquote></li><li><strong>SELECT @cdate := DATE_ADD(‘20180319’,INTERVAL + 1 DAY) FROM ‘dl_area’</strong>  <blockquote><p>找一张表记录条数足够多的即可，能生成你想要的时间段内的连续日期  </p></blockquote></li><li><strong>limit</strong>  <blockquote><p>你需要的连续日期长度</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2></li></ol><ul><li>ifnull(,)在使用GROUP By后不起作用，参考资料：<a href="https://blog.csdn.net/galenowow/article/details/79258748" target="_blank" rel="noopener">https://blog.csdn.net/galenowow/article/details/79258748</a>  </li><li>mysql生成一段时间内的连续天数日期，参考资料：<br><a href="https://www.jianshu.com/p/a63526962139" target="_blank" rel="noopener">https://www.jianshu.com/p/a63526962139</a><br><a href="https://www.cnblogs.com/dennyzhangdd/p/8073181.html" target="_blank" rel="noopener">https://www.cnblogs.com/dennyzhangdd/p/8073181.html</a>  <blockquote><p>注意：limit作用是连续天数的个数，不能超过查询表的记录条数！</p></blockquote></li><li><a href="https://blog.csdn.net/touatou/article/details/77045740" target="_blank" rel="noopener">https://blog.csdn.net/touatou/article/details/77045740</a></li></ul>]]></content>
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云服务器安装redis总结</title>
      <link href="/aliyun-install-redis-summary.html"/>
      <url>/aliyun-install-redis-summary.html</url>
      <content type="html"><![CDATA[<h1 id="在阿里云服务器上安装Redis数据库"><a href="#在阿里云服务器上安装Redis数据库" class="headerlink" title="在阿里云服务器上安装Redis数据库"></a>在阿里云服务器上安装Redis数据库</h1><h2 id="服务器具体信息"><a href="#服务器具体信息" class="headerlink" title="服务器具体信息"></a>服务器具体信息</h2><ul><li>CPU： 1核 </li><li>内存： 2 GB </li><li>实例类型： I/O优化 </li><li>操作系统： CentOS 7.4 64位  </li></ul><h2 id="mysql版本"><a href="#mysql版本" class="headerlink" title="mysql版本"></a>mysql版本</h2><blockquote><p>redis-4.0.9  </p></blockquote><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>参考链接：<a href="https://blog.csdn.net/mlks_2008/article/details/19001595" target="_blank" rel="noopener">https://blog.csdn.net/mlks_2008/article/details/19001595</a>  </p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>参考链接里的init脚本头部添加下面内容：  </li></ul><pre><code class="properties">#!/bin/sh# chkconfig: 2345 90 10# description: Redis is a persistent key-value database</code></pre><ul><li>redis配置认证密码  </li></ul><p>redis配置文件/etc/redis.conf，去掉下面的注释，修改你自己的密码，重启完成</p><pre><code class="java">requirepass footbared  </code></pre><ul><li>配置外网访问  </li></ul><p>redis3.0 以上的版本默认启用了安全机制较高的防护模式（protected-mode）。  </p><p>redis2.x 只需要 bind 0.0.0.0，并开放防火墙端口即可外网访问；而redis3.x版本需要在此基础上禁用防护模式。  </p><pre><code class="java"># redis-cli // 进入redis命令行模式  xxxx:<span class="number">6379</span>&gt; CONFIG SET <span class="keyword">protected</span>-mode no <span class="comment">// 禁用防护模式 </span></code></pre>]]></content>
      
      <categories>
          
          <category> 阿里云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 阿里云服务器 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用CentOS7命令</title>
      <link href="/common-centos7-commands.html"/>
      <url>/common-centos7-commands.html</url>
      <content type="html"><![CDATA[<h1 id="常用但不好记命令"><a href="#常用但不好记命令" class="headerlink" title="常用但不好记命令"></a>常用但不好记命令</h1><h2 id="开放防火墙端口"><a href="#开放防火墙端口" class="headerlink" title="开放防火墙端口"></a>开放防火墙端口</h2><ul><li>开放相应端口  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=<span class="keyword">public</span> --add-port=<span class="number">3306</span>/tcp</span><br><span class="line">firewall-cmd --permanent --zone=<span class="keyword">public</span> --add-port=<span class="number">3306</span>/udp </span><br><span class="line">```  </span><br><span class="line">* 重启使修改的防火墙规则生效  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">firewall-cmd --reload  </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">## 查看进程和端口监听  </span><br><span class="line"></span><br><span class="line">* 检查后台进程是否正在运行  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">ps -ef | grep redis  </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">* 检测端口是否在监听  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">netstat -lntp | grep <span class="number">6379</span></span><br></pre></td></tr></table></figure><h2 id="远程连接服务器发送文件"><a href="#远程连接服务器发送文件" class="headerlink" title="远程连接服务器发送文件"></a>远程连接服务器发送文件</h2><h3 id="通过工具"><a href="#通过工具" class="headerlink" title="通过工具"></a>通过工具</h3><blockquote><p>这种比较简单，可以通过putty,xshell等连接，通过xfpt发送文件  </p></blockquote><h3 id="通过命令行"><a href="#通过命令行" class="headerlink" title="通过命令行"></a>通过命令行</h3><ul><li><p><strong>ssh <a href="mailto:username@ip.address" target="_blank" rel="noopener">username@ip.address</a></strong>：连接</p><blockquote><p>通过命令行远程连接linux服务器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@47.98.xxx.xx</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>scp</strong>：copy文件  </p><blockquote><p>参考<a href="https://blog.csdn.net/jyf0412/article/details/36866041" target="_blank" rel="noopener">scp命令在linux和windows之间互传文件</a>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp target\sell.jar root@47.98.113.88:/opt/javaapps</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云服务器搭建Maven nexus私服</title>
      <link href="/aliyun-install-nexus-summary.html"/>
      <url>/aliyun-install-nexus-summary.html</url>
      <content type="html"><![CDATA[<h1 id="在阿里云服务器上搭建Maven私服"><a href="#在阿里云服务器上搭建Maven私服" class="headerlink" title="在阿里云服务器上搭建Maven私服"></a>在阿里云服务器上搭建Maven私服</h1><h2 id="服务器具体信息"><a href="#服务器具体信息" class="headerlink" title="服务器具体信息"></a>服务器具体信息</h2><ul><li>CPU： 1核 </li><li>内存： 2 GB </li><li>实例类型： I/O优化 </li><li>操作系统： CentOS 7.4 64位  </li></ul><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><p>参考链接：<a href="https://blog.csdn.net/fuyuwei2015/article/details/73195936" target="_blank" rel="noopener">https://blog.csdn.net/fuyuwei2015/article/details/73195936</a>  </p><h3 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h3><p>参考链接：<a href="https://www.cnblogs.com/HendSame-JMZ/p/6122188.html" target="_blank" rel="noopener">https://www.cnblogs.com/HendSame-JMZ/p/6122188.html</a>  </p><ul><li>/etc/profile修改为：  </li></ul><pre><code class="properties">#set for nodejs  export NODE_HOME=/usr/local/node  #export PATH=$NODE_HOME/bin:$PATHexport JAVA_HOME=/usr/local/java/jdk1.8.0_171#export JRE_HOME=${JAVA_HOME}/jre#export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport MAVEN_HOME=/usr/local/mavenexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$MAVEN_HOME/bin:$NODE_HOME/bin:$PATH</code></pre><h3 id="搭建私服"><a href="#搭建私服" class="headerlink" title="搭建私服"></a>搭建私服</h3><p>参考链接：<a href="https://juejin.im/entry/59e1cea8f265da43163c1990" target="_blank" rel="noopener">https://juejin.im/entry/59e1cea8f265da43163c1990</a>  </p>]]></content>
      
      <categories>
          
          <category> 阿里云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 阿里云服务器 </tag>
            
            <tag> Maven </tag>
            
            <tag> JDK </tag>
            
            <tag> Nexus3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云服务器安装mysql总结</title>
      <link href="/aliyun-install-mysql-summary.html"/>
      <url>/aliyun-install-mysql-summary.html</url>
      <content type="html"><![CDATA[<h1 id="阿里云服务器安装mysql总结"><a href="#阿里云服务器安装mysql总结" class="headerlink" title="阿里云服务器安装mysql总结"></a>阿里云服务器安装mysql总结</h1><h2 id="服务器具体信息"><a href="#服务器具体信息" class="headerlink" title="服务器具体信息"></a>服务器具体信息</h2><ul><li>CPU： 1核 </li><li>内存： 2 GB </li><li>实例类型： I/O优化 </li><li>操作系统： CentOS 7.4 64位  </li></ul><h2 id="mysql版本"><a href="#mysql版本" class="headerlink" title="mysql版本"></a>mysql版本</h2><blockquote><p>mysql  Ver 14.14 Distrib 5.6.40, for Linux (x86_64) using  EditLine wrapper  </p></blockquote><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>参考资料：<a href="https://yq.aliyun.com/articles/47237" target="_blank" rel="noopener">https://yq.aliyun.com/articles/47237</a>  </p><ul><li>卸载原来mysql  </li><li>安装流程  </li><li>开机启动  </li><li>防火墙设置  </li><li>MySql安全设置  </li><li>远程访问设置  </li><li>utf8字符集设置  </li><li>备份还原  </li></ul><h2 id="mysql-用户设置"><a href="#mysql-用户设置" class="headerlink" title="mysql 用户设置"></a>mysql 用户设置</h2><ul><li>root用户禁止远程访问  </li><li>普通用户：hunterfish 密码：1<em>**</em>0</li><li>管理员用户：admin 密码：1<em>**</em>9</li></ul><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>顺利执行上面参考链接的安装流程后，在本地远程连接阿里云mysql数据库时（防火墙已经开放了3306d端口），遇到：</p><blockquote><p>can’t connect to mysql server on 10060  </p></blockquote><p>原因是阿里云服务器设置了安全组规则，只允许22和3389端口开放，所以新增3306安全组规则：  </p><p><img src="http://p8hqd7oln.bkt.clouddn.com/18-5-10/4855161.jpg" alt=""></p><p>参考资料：<a href="https://blog.csdn.net/u010955892/article/details/72774920" target="_blank" rel="noopener">https://blog.csdn.net/u010955892/article/details/72774920</a></p>]]></content>
      
      <categories>
          
          <category> 阿里云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
            <tag> 阿里云服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用tk.mybatis优化Spring Boot项目</title>
      <link href="/tk-mybatis-optimize-project.html"/>
      <url>/tk-mybatis-optimize-project.html</url>
      <content type="html"><![CDATA[<h1 id="Spring-Boot项目中整合tk-mybatis通用插件"><a href="#Spring-Boot项目中整合tk-mybatis通用插件" class="headerlink" title="Spring Boot项目中整合tk.mybatis通用插件"></a>Spring Boot项目中整合tk.mybatis通用插件</h1><h2 id="tk-mybatis介绍"><a href="#tk-mybatis介绍" class="headerlink" title="tk.mybatis介绍"></a>tk.mybatis介绍</h2><ul><li>tk.mybatis是一款强大的MyBatis插件，合理使用会帮你除去大量的mybatis中的mapper.mxl文件里重复的sql语句；</li><li>Spring Boot中已经整合了tk.mybatis插件，使用起来非常方便  </li><li><a href="http://www.mybatis.tk/" target="_blank" rel="noopener">Mybatis官方文档地址</a>  </li><li><a href="https://blog.csdn.net/shikaiwencn/article/details/52485883" target="_blank" rel="noopener">框架介绍链接</a></li></ul><pre><code class="xml"><span class="comment">&lt;!-- 通用插件 mapper  --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mapper-spring-boot-starter.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><h2 id="项目改造"><a href="#项目改造" class="headerlink" title="项目改造"></a>项目改造</h2><h3 id="引入之前"><a href="#引入之前" class="headerlink" title="引入之前"></a>引入之前</h3><p>没有使用tk.mybatis之前，使用Mybatis Generator逆向生成mapper.xml, pojo, dao, service, controller等文件  </p><ul><li><font color="#0099ff" size="3" face="黑体">mapper.xml示例</font>  </li></ul><blockquote><p> 每一个mapper.xml文件中都会包含queryObject，queryList，save，update，delete，deleteBatch查询语句，在此基础上你可以修改或新增查询方法；<br>造成大量的重复性代码  </p></blockquote><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dl98.modules.api.dao.financial.BankDao"</span>&gt;</span>    <span class="comment">&lt;!-- 可根据自己的需求，是否要使用 --&gt;</span>    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.dl98.modules.api.entity.user.Bank"</span> <span class="attr">id</span>=<span class="string">"dlBankMap"</span>&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"createTime"</span> <span class="attr">column</span>=<span class="string">"create_time"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"updatedTime"</span> <span class="attr">column</span>=<span class="string">"updated_time"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"createBy"</span> <span class="attr">column</span>=<span class="string">"create_by"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"deleted"</span> <span class="attr">column</span>=<span class="string">"deleted"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"enable"</span> <span class="attr">column</span>=<span class="string">"enable"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"modifyBy"</span> <span class="attr">column</span>=<span class="string">"modify_by"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bank"</span> <span class="attr">column</span>=<span class="string">"bank"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cardNo"</span> <span class="attr">column</span>=<span class="string">"card_no"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cardType"</span> <span class="attr">column</span>=<span class="string">"card_type"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"subbranch"</span> <span class="attr">column</span>=<span class="string">"subbranch"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span>    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span>    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryObject"</span> <span class="attr">resultType</span>=<span class="string">"com.dl98.modules.api.entity.user.Bank"</span>&gt;</span>        select * from dl_bank where id = #{value}    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryList"</span> <span class="attr">resultType</span>=<span class="string">"com.dl98.modules.api.entity.user.Bank"</span>&gt;</span>        select * from dl_bank        <span class="tag">&lt;<span class="name">choose</span>&gt;</span>            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"sidx != null and sidx.trim() != ''"</span>&gt;</span>                order by ${sidx} ${order}            <span class="tag">&lt;/<span class="name">when</span>&gt;</span>            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>                order by id desc            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span>        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span>        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"offset != null and limit != null"</span>&gt;</span>            limit #{offset}, #{limit}        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>     <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryTotal"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span>        select count(*) from dl_bank     <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.dl98.modules.api.entity.user.Bank"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span>        insert into dl_bank        (            `create_time`,             `updated_time`,             `create_by`,             `deleted`,             `enable`,             `modify_by`,             `bank`,             `card_no`,             `card_type`,             `name`,             `subbranch`,             `user_id`        )        values        (            #{createTime},             #{updatedTime},             #{createBy},             #{deleted},             #{enable},             #{modifyBy},             #{bank},             #{cardNo},             #{cardType},             #{name},             #{subbranch},             #{userId}        )    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span>    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.dl98.modules.api.entity.user.Bank"</span>&gt;</span>        update dl_bank         <span class="tag">&lt;<span class="name">set</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"createTime != null"</span>&gt;</span>`create_time` = #{createTime}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"updatedTime != null"</span>&gt;</span>`updated_time` = #{updatedTime}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"createBy != null"</span>&gt;</span>`create_by` = #{createBy}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deleted != null"</span>&gt;</span>`deleted` = #{deleted}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"enable != null"</span>&gt;</span>`enable` = #{enable}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"modifyBy != null"</span>&gt;</span>`modify_by` = #{modifyBy}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bank != null"</span>&gt;</span>`bank` = #{bank}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cardNo != null"</span>&gt;</span>`card_no` = #{cardNo}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cardType != null"</span>&gt;</span>`card_type` = #{cardType}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span>`name` = #{name}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"subbranch != null"</span>&gt;</span>`subbranch` = #{subbranch}, <span class="tag">&lt;/<span class="name">if</span>&gt;</span>            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userId != null"</span>&gt;</span>`user_id` = #{userId}<span class="tag">&lt;/<span class="name">if</span>&gt;</span>        <span class="tag">&lt;/<span class="name">set</span>&gt;</span>        where id = #{id}    <span class="tag">&lt;/<span class="name">update</span>&gt;</span>    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span>        delete from dl_bank where id = #{value}    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span>    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBatch"</span>&gt;</span>        delete from dl_bank where id in         <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span>            #{id}        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span>    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></code></pre><ul><li><font color="#0099ff" size="3" face="黑体">Dao层代码</font>  </li></ul><blockquote><p> 继承BaseDao接口；BaseDao定义的方法xml文件中必须有相应的SQL语句  </p></blockquote><pre><code class="java"><span class="comment">/**</span><span class="comment"> * 功能描述: 银行卡数据访问层</span><span class="comment"> */</span><span class="meta">@Mapper</span><span class="meta">@Repository</span><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BankDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Bank</span>&gt; </span>{}</code></pre><pre><code class="java"><span class="comment">/**</span><span class="comment"> * 基础Dao(还需在XML文件里，有对应的SQL语句)</span><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>{    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(T t)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">saveBatch</span><span class="params">(List&lt;T&gt; list)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(T t)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Object id)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">deleteBatch</span><span class="params">(Object[] id)</span></span>;    <span class="function">T <span class="title">queryObject</span><span class="params">(Object id)</span></span>;    <span class="function">List&lt;T&gt; <span class="title">queryList</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function">List&lt;T&gt; <span class="title">queryList</span><span class="params">(Object id)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">queryTotal</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">queryTotal</span><span class="params">()</span></span>;}</code></pre><ul><li><font color="#0099ff" size="3" face="黑体">service接口</font>  </li></ul><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BankService</span> </span>{    <span class="comment">// 新增自定义查询接口</span>    <span class="function">R <span class="title">updateBank</span><span class="params">(Bank bank)</span></span>;    <span class="comment">// 修改了原来dao默认的查询接口</span>    <span class="function">Bank <span class="title">queryObject</span><span class="params">(Long id)</span></span>;}</code></pre><ul><li><font color="#0099ff" size="3" face="黑体">service实现层</font>  </li></ul><blockquote><p> 注入BankDao  </p></blockquote><pre><code class="java"><span class="meta">@Service</span><span class="meta">@Transactional</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankServiceImpl</span> <span class="keyword">implements</span> <span class="title">BankService</span></span>{    <span class="meta">@Autowired</span>    <span class="keyword">private</span> BankDao bankDao;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> R <span class="title">updateBank</span><span class="params">(Bank bank)</span> </span>{        <span class="keyword">int</span> Result = bankDao.update(bank);        <span class="keyword">return</span> Result == <span class="number">0</span> ? R.error(<span class="string">"银行卡信息保存失败"</span>) : R.ok();    }    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> Bank <span class="title">queryObject</span><span class="params">(Long id)</span> </span>{        <span class="keyword">return</span> bankDao.queryObject(id);    }}</code></pre><blockquote><p> 总结：在mapper.xml中会有大量重复代码产生，使用tk.mybatis解决这个问题。  </p></blockquote><h3 id="引入之后"><a href="#引入之后" class="headerlink" title="引入之后"></a>引入之后</h3><ul><li><font color="#0099ff" size="3" face="黑体">mapper.xml文件</font>  </li></ul><blockquote><p>对，crud什么都不需要了，除非你有其他新增的业务需求要重写sql语句  </p></blockquote><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dl98.modules.api.dao.financial.BankMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></code></pre><ul><li><font color="#0099ff" size="3" face="黑体">实体类</font>   </li></ul><blockquote><p>使用tk.mybatis后，实体类必须使用注解  </p></blockquote><pre><code class="java"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">true</span>)<span class="meta">@Data</span><span class="meta">@Table</span>(name = <span class="string">"dl_bank"</span>)<span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)<span class="meta">@JsonIgnoreProperties</span>(value = {<span class="string">"hibernateLazyInitializer"</span>, <span class="string">"handler"</span>, <span class="string">"fieldHandler"</span>}, ignoreUnknown = <span class="keyword">true</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> <span class="keyword">extends</span> <span class="title">BaseFullEntity</span> </span>{    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8252054024694303083L</span>;    <span class="comment">/** 用户 **/</span>    <span class="meta">@Column</span>(name = <span class="string">"user_id"</span>)    <span class="keyword">private</span> Long userId;    <span class="comment">/** 银行卡所属银行 */</span>    <span class="meta">@Column</span>(name = <span class="string">"bank"</span>)    <span class="keyword">private</span> String bank;    <span class="comment">/** 银行卡号 */</span>    <span class="meta">@Column</span>(name = <span class="string">"card_no"</span>)    <span class="keyword">private</span> String cardNo;    <span class="comment">/** 支行 */</span>    <span class="meta">@Column</span>(name = <span class="string">"subbranch"</span>)    <span class="keyword">private</span> String subbranch;    <span class="comment">/** 姓名 (实名认证的名字) **/</span>    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)    <span class="keyword">private</span> String name;    <span class="comment">/** 银行卡类型  0=银行卡 1=支付宝？ 2=微信？ **/</span>    <span class="meta">@Column</span>(name = <span class="string">"card_type"</span>)    <span class="keyword">private</span> Integer cardType;}</code></pre><blockquote><p><strong>@JsonInclude(Include.NON_NULL)</strong>：将该标记放在属性上，如果该属性为NULL则不参与序列化；<br>如果放在类上，对整个类的全部属性起作用。<a href="https://www.cnblogs.com/yangy608/p/3936848.html" target="_blank" rel="noopener">点击详情！</a></p></blockquote><blockquote><p><strong>@JsonIgnoreProperties(value = {“hibernateLazyInitializer”, “handler”, “fieldHandler”}, ignoreUnknown = true)</strong>：  </p><ul><li>value属性：目的为了阻止Jackson在转化时触发hibernateLazyFetch机制</li><li>ignoreUnknown = true：忽略掉从JSON（由于在应用中没有完全匹配的POJO）中获得的所有“多余的”属性</li><li>参考资料：<a href="http://wong-john.iteye.com/blog/1753402" target="_blank" rel="noopener">http://wong-john.iteye.com/blog/1753402</a> <a href="http://hypgr.iteye.com/blog/907549" target="_blank" rel="noopener">http://hypgr.iteye.com/blog/907549</a>   </li></ul></blockquote><ul><li><font color="#0099ff" size="3" face="黑体">Dao层</font>  </li></ul><blockquote><p>重点是BaseMapper<bank>,<br>BaseMapper新增了两个通用的自定义的查询接口：queryList和queryTotal  </bank></p></blockquote><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BankMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Bank</span>&gt;</span>{}</code></pre><pre><code class="java"><span class="comment">/**</span><span class="comment"> * 功能描述: 公共 Mapper</span><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span></span><span class="class">        <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;,</span><span class="class">        <span class="title">MySqlMapper</span>&lt;<span class="title">T</span>&gt;,</span><span class="class">        <span class="title">IdsMapper</span>&lt;<span class="title">T</span>&gt; </span>{    <span class="comment">//TODO</span>    <span class="comment">//FIXME 特别注意，该接口不能被扫描到，否则会出错</span>    <span class="function">List&lt;T&gt; <span class="title">queryList</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">queryTotal</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;}</code></pre><blockquote><ul><li>不要把BaseMapper放到同其他Mapper一起，该类不能被当做普通Mapper一样被扫描，否则会出错</li><li>extends的接口参考资料：<a href="https://www.cnblogs.com/deolin/p/8182100.html" target="_blank" rel="noopener">https://www.cnblogs.com/deolin/p/8182100.html</a>  </li></ul></blockquote><ul><li><font color="#0099ff" size="3" face="黑体">service接口</font>  </li></ul><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BankService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Bank</span>&gt;</span>{    <span class="comment">/**</span><span class="comment">     * 功能描述: 更新银行卡信息</span><span class="comment">     */</span>    <span class="function">R <span class="title">updateBank</span><span class="params">(Bank bank)</span></span>;    <span class="function">Bank <span class="title">queryObject</span><span class="params">(Long id)</span></span>;}</code></pre><blockquote><p>定义Service层基础接口Iservice<t>，其他Service接口都继承该接口  </t></p></blockquote><pre><code class="java"><span class="meta">@SuppressWarnings</span>(<span class="string">"UnusedReturnValue"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>{    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(T entity)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(List&lt;T&gt; list)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">saveBatch</span><span class="params">(List&lt;T&gt; list)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">saveNotNull</span><span class="params">(T entity)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">deleteByKey</span><span class="params">(Object key)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(String ids)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(Object[] ids)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">updateAll</span><span class="params">(T entity)</span></span>;    <span class="function"><span class="keyword">int</span> <span class="title">updateNotNull</span><span class="params">(T entity)</span></span>;    <span class="function">T <span class="title">selectByKey</span><span class="params">(Object key)</span></span>;    <span class="function">List&lt;T&gt; <span class="title">selectByIds</span><span class="params">(String ids)</span></span>;    <span class="function">List&lt;T&gt; <span class="title">selectByIds</span><span class="params">(Object[] ids)</span></span>;    <span class="function">List&lt;T&gt; <span class="title">selectByExample</span><span class="params">(Object example)</span></span>;    <span class="comment">/**</span><span class="comment">     * 功能描述: 列表查询条件 需要实现这个接口</span><span class="comment">     *</span><span class="comment">     * 作者: July</span><span class="comment">     * 日期: 2018-03-22 13:31:29</span><span class="comment">     */</span>    <span class="function">List&lt;T&gt; <span class="title">queryList</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;    <span class="comment">/**</span><span class="comment">     * 功能描述: 列表查询条件总数 需要实现这个接口</span><span class="comment">     *</span><span class="comment">     * 作者: July</span><span class="comment">     * 日期: 2018-03-22 13:31:51</span><span class="comment">     */</span>    <span class="function"><span class="keyword">int</span> <span class="title">queryTotal</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;}</code></pre><ul><li><font color="#0099ff" size="3" face="黑体">service实现</font>  </li></ul><pre><code class="java"><span class="meta">@Service</span><span class="meta">@Transactional</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankServiceImpl</span> <span class="keyword">extends</span> <span class="title">AbstractService</span>&lt;<span class="title">BankMapper</span>, <span class="title">Bank</span>&gt; <span class="keyword">implements</span> <span class="title">BankService</span></span>{    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> R <span class="title">updateBank</span><span class="params">(Bank bank)</span> </span>{        <span class="keyword">int</span> Result = updateNotNull(bank);        <span class="keyword">return</span> Result == <span class="number">0</span> ? R.error(<span class="string">"银行卡信息保存失败"</span>) : R.ok();    }    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> Bank <span class="title">queryObject</span><span class="params">(Long id)</span> </span>{        <span class="keyword">return</span> selectByKey(id);    }}</code></pre><blockquote><p>抽象类<strong>AbstractService</strong>基于MyBatis Mapper插件的接口实现，实现了Iservice接口  </p></blockquote><pre><code class="java"><span class="meta">@Service</span>(<span class="string">"abstractService"</span>)<span class="meta">@Transactional</span><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractService</span>&lt;<span class="title">M</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>{    <span class="meta">@Autowired</span>    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)    <span class="keyword">protected</span> M mapper;    <span class="comment">/**</span><span class="comment">     * 保存一个实体，null的属性也会保存，不会使用数据库默认值</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(T entity)</span> </span>{        <span class="keyword">return</span> mapper.insert(entity);    }    <span class="comment">/**</span><span class="comment">     * 批量插入，支持批量插入的数据库可以使用，例如MySQL,H2等，另外该接口限制实体包含`id`属性并且必须为自增列</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(List&lt;T&gt; list)</span> </span>{        <span class="keyword">return</span> mapper.insertList(list);    }    <span class="comment">/**</span><span class="comment">     * 批量插入，支持批量插入的数据库可以使用，例如MySQL,H2等，另外该接口限制实体包含`id`属性并且必须为自增列</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveBatch</span><span class="params">(List&lt;T&gt; list)</span> </span>{        <span class="keyword">return</span> mapper.insertList(list);    }    <span class="comment">/**</span><span class="comment">     * 保存一个实体，null的属性不会保存，会使用数据库默认值</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveNotNull</span><span class="params">(T entity)</span> </span>{        <span class="keyword">return</span> mapper.insertSelective(entity);    }    <span class="comment">/**</span><span class="comment">     * 根据主键字段进行删除，方法参数必须包含完整的主键属性</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByKey</span><span class="params">(Object key)</span> </span>{        <span class="keyword">return</span> mapper.deleteByPrimaryKey(key);    }    <span class="comment">/**</span><span class="comment">     * 根据主键字符串进行删除，类中只有存在一个带有<span class="doctag">@Id</span>注解的字段</span><span class="comment">     *</span><span class="comment">     * <span class="doctag">@param</span> ids 如 "1,2,3,4"</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(String ids)</span> </span>{        <span class="keyword">return</span> mapper.deleteByIds(ids);    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(Object[] ids)</span> </span>{        <span class="keyword">return</span> mapper.deleteByIds(StringUtils.join(ids, <span class="string">","</span>));    }    <span class="comment">/**</span><span class="comment">     * 根据主键更新实体全部字段，null值会被更新</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateAll</span><span class="params">(T entity)</span> </span>{        <span class="keyword">return</span> mapper.updateByPrimaryKey(entity);    }    <span class="comment">/**</span><span class="comment">     * 根据主键更新属性不为null的值</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateNotNull</span><span class="params">(T entity)</span> </span>{        <span class="keyword">return</span> mapper.updateByPrimaryKeySelective(entity);    }    <span class="comment">/**</span><span class="comment">     * 根据主键字段进行查询，方法参数必须包含完整的主键属性，查询条件使用等号</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> T <span class="title">selectByKey</span><span class="params">(Object key)</span> </span>{        <span class="keyword">return</span> mapper.selectByPrimaryKey(key);    }    <span class="comment">/**</span><span class="comment">     * 根据主键字符串进行查询，类中只有存在一个带有<span class="doctag">@Id</span>注解的字段</span><span class="comment">     *</span><span class="comment">     * <span class="doctag">@param</span> ids 如 "1,2,3,4"</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">selectByIds</span><span class="params">(String ids)</span> </span>{        <span class="keyword">return</span> mapper.selectByIds(ids);    }    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">selectByIds</span><span class="params">(Object[] ids)</span> </span>{        <span class="keyword">return</span> mapper.selectByIds(StringUtils.join(ids, <span class="string">","</span>));    }    <span class="comment">/**</span><span class="comment">     * 根据Example条件进行查询</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">selectByExample</span><span class="params">(Object example)</span> </span>{        <span class="keyword">return</span> mapper.selectByExample(example);    }    <span class="comment">/**</span><span class="comment">     * 功能描述: 列表查询条件 需要实现这个接口</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">queryList</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>{        <span class="keyword">return</span> mapper.queryList(map);    }    <span class="comment">/**</span><span class="comment">     * 功能描述: 列表查询条件总数 需要实现这个接口</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">queryTotal</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>{        <span class="keyword">return</span> mapper.queryTotal(map);    }}</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体引入tk.mybatis通用插件，新增基础接口<strong>BaseMapper.java</strong>、<strong>Iservice</strong>、<strong>AbstractService</strong>优化了项目结构，<br>当新增业务时，减少代码量。  </p>]]></content>
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql查询条件为空查询所有</title>
      <link href="/mysql-condition-empty-query-all.html"/>
      <url>/mysql-condition-empty-query-all.html</url>
      <content type="html"><![CDATA[<h1 id="mysql-if语法"><a href="#mysql-if语法" class="headerlink" title="mysql if语法"></a>mysql if语法</h1><p>公司后台框架为Spring Boot + mybatis + vue,在一段复杂的统计查询语句中没有使用mybatis，而是一段完整的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAreaOrderStatistics"</span> <span class="attr">resultType</span>=<span class="string">"com.dl98.modules.api.vo.OrderStatisticsVo"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            c1.area_id,</span><br><span class="line">            count(c1.area_id) orderNum,</span><br><span class="line">            SUM(c1.total) total</span><br><span class="line">        FROM (</span><br><span class="line">                 SELECT</span><br><span class="line">                     sgoc.order_id,</span><br><span class="line">                     sgo.area_id,</span><br><span class="line">                     sgo.create_time,</span><br><span class="line">                     sum(</span><br><span class="line">                             (sp.price - sp.cost) * sgoc.goods_count * 0.08</span><br><span class="line">                     ) AS total</span><br><span class="line">                 FROM</span><br><span class="line">                     dl_supplier_goods_order_correlation sgoc</span><br><span class="line">                     LEFT JOIN dl_supplier_parameter sp ON sgoc.parameter_id = sp.id</span><br><span class="line">                     LEFT JOIN dl_supplier_goods_order sgo ON sgoc.order_id = sgo.id</span><br><span class="line">                 WHERE</span><br><span class="line">                     sgo.create_time BETWEEN #&#123;sTime&#125; AND #&#123;eTime&#125; AND if(#&#123;id&#125; is null, 1, sgo.mill_id=#&#123;id&#125;) AND sgo.pay_status = 1</span><br><span class="line">                 GROUP BY</span><br><span class="line">                     sgoc.order_id) c1</span><br><span class="line">        GROUP BY c1.area_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Hello! World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是：if (#{id} is null, 1, sgo.mill_id = #{id})</p><p>参考资料:<a href="https://blog.csdn.net/touatou/article/details/77045740" target="_blank" rel="noopener">https://blog.csdn.net/touatou/article/details/77045740</a></p>]]></content>
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的博客创建之旅</title>
      <link href="/my-blog-start-journey.html"/>
      <url>/my-blog-start-journey.html</url>
      <content type="html"><![CDATA[<h1 id="我的博客搭建"><a href="#我的博客搭建" class="headerlink" title="我的博客搭建"></a>我的博客搭建</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过一年的学习，最近想搭建一个博客网站，一是可以记录自己的学习历程，二是可以总结学习知识。<br>最后最不重要的一点就是可以装B了！</p><h2 id="技术选择"><a href="#技术选择" class="headerlink" title="技术选择"></a>技术选择</h2><blockquote><p>hexo, github, git, hexo-admin, node.js, npm</p></blockquote><h2 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h2><p>  因为网上资源很多，所以只是整理资料，然后挑出重点总结。  </p><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><ul><li>1、 <strong><a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">Hexo从零开始到搭建完整</a></strong>  </li><li>2、 <strong><a href="https://www.cnblogs.com/tengj/p/5352572.html" target="_blank" rel="noopener">将Hexo博客同时托管到github和coding</a></strong>  </li><li>3、 <strong><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Hexo Next主题使用</a></strong></li><li>4、 <strong><a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">Hexo常用命令</a></strong></li><li>5、 <strong><a href="https://www.cnblogs.com/liugang-vip/p/6337580.html" target="_blank" rel="noopener">markdown常用语法</a></strong>  </li></ul><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul><li>1、 <strong><a href="http://kchen.cc/2016/11/12/hexo-instructions/" target="_blank" rel="noopener">基于Hexo的全自动博客构建部署系统</a></strong></li><li>2、 <strong><a href="https://www.cnblogs.com/penglei-it/p/hexo_domain_name.html" target="_blank" rel="noopener">Hexo站点域名配置</a></strong>  </li><li>3、 <strong><a href="https://blog.csdn.net/Monkey_LZL/article/details/60870891" target="_blank" rel="noopener">Hexo博客多终端同步问题</a></strong></li><li>4、 <strong><a href="https://www.jianshu.com/p/5888bd91d070" target="_blank" rel="noopener">畅言评论系统</a></strong>  </li><li>5、 <strong><a href="https://www.jianshu.com/p/68e727dda16d" target="_blank" rel="noopener">Hexo-admin本地编辑上传博客</a></strong>  </li><li>6、 <strong><a href="http://lxj-life.com/2017/08/08/Hexo%E6%8F%92%E4%BB%B6-admin/" target="_blank" rel="noopener">Hexo-admin 哈希值密码创建</a></strong>  </li><li>7、 <strong><a href="https://blog.csdn.net/fjinhao/article/details/77096951" target="_blank" rel="noopener">将Hexo部署到阿里云主机VPS</a></strong>  </li><li>8、 <strong><a href="https://www.jianshu.com/p/7cbd50058ea3" target="_blank" rel="noopener">博客极简图床+七牛云</a></strong>  </li><li>9、 <strong><a href="https://www.cnblogs.com/tengj/p/5357879.html" target="_blank" rel="noopener">解决谷歌百度收录问题</a></strong>   </li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>1、 <strong>[Hexo高阶教程各种优化]</strong>(<a href="https://blog.csdn.net/sunshine940326/article/details/70936988" target="_blank" rel="noopener">https://blog.csdn.net/sunshine940326/article/details/70936988</a>)  </li><li>2、 <strong>[Hexo定制&amp;优化]</strong>(<a href="https://www.jianshu.com/p/3884e5cb63e5" target="_blank" rel="noopener">https://www.jianshu.com/p/3884e5cb63e5</a>)</li></ul><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><ul><li>1 <a href="https://github.com/Hunterfish/Hunterfish.github.io" target="_blank" rel="noopener">我的博客项目</a>分支情况：  <blockquote><p>master分支：部署博客（存放部署后静态页面文件）的分支<br>hexo分支：我们可以clone到其他电脑或其他系统的hexo源文件的分支，而且我们已经将它设置成默认仓库</p></blockquote></li><li>2 在新的电脑端clone远程仓库hexo分支到本地<blockquote><p>git clone -b hexo <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yourname/yourname.github.io.git</p></blockquote></li><li>3 初始化并新建博客部署  </li></ul><pre><code class="Shell">cd yourname.github.ionpm installhexo new post &quot;new blog name&quot; // 新建一个.md文件，你可以编辑博客内容git add sourcegit commit -m &quot;XX&quot;git push origin hexohexo cleanhexo ggulp build  // gulp插件，优化静态文件hexo d      // //push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master</code></pre><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><ul><li>1、 <strong>hexo s -d 启动后，但是访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>一直无法访问</strong>  </li></ul><blockquote><p>可能是4000端口号被占用，hexo s -d -p 5000 更换端口</p></blockquote>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
